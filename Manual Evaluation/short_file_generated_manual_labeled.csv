,repo,file path,code,data division,paragraphs,call relations,LOC,summary,Linked Programs,Called Programs,File Calls,granite 34b,refined summary2,business,functionality,completeness
7,IBM_example-health-apis,X-COBOL/X-COBOL/COBOL_Files/IBM_example-health-apis/HCIVDB01.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCIVDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCIVDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-IN.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-TIMESTAMP            PIC X(26).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID
           MOVE CA-PATIENT-ID TO EM-PATNUM
           MOVE CA-VISIT-DATE   TO DB2-TIMESTAMP(1:10)
           MOVE SPACE           TO DB2-TIMESTAMP (11:1)
           IF CA-VISIT-TIME(10:) EQUAL SPACE
              MOVE '.0' TO CA-VISIT-TIME(9:2)
           END-IF
           MOVE CA-VISIT-TIME   TO DB2-TIMESTAMP(12:10)
           MOVE '00000'         TO DB2-TIMESTAMP(22:5)
           PERFORM GET-BLOODPRESSURE.
           PERFORM GET-HEARTRATE.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-BLOODPRESSURE.
           EXEC SQL
               SELECT BLOODPRESSURE
               INTO  :CA-BLOOD-PRESSURE
               FROM BLOODPRESSURE
               WHERE PATIENTID = :DB2-PATIENT-ID AND
                     BPDATETIME = :DB2-TIMESTAMP
               END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       GET-HEARTRATE.
           EXEC SQL
               SELECT HEARTRATE
               INTO  :CA-HEART-RATE
               FROM HEARTRATE
               WHERE PATIENTID = :DB2-PATIENT-ID AND
                     HRDATETIME = :DB2-TIMESTAMP
               END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM(HCAZERRS)
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCIVDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-IN.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-TIMESTAMP            PIC X(26).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
","['MAINLINE', 'MAINLINE-END', 'MAINLINE-EXIT', 'GET-BLOODPRESSURE', 'GET-HEARTRATE', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph GET-HEARTRATE, WRITE-ERROR-MESSAGE, GET-BLOODPRESSURE.
Paragraph GET-BLOODPRESSURE calls paragraph WRITE-ERROR-MESSAGE.
Paragraph GET-HEARTRATE calls paragraph WRITE-ERROR-MESSAGE.
",155,Inquire Visit: Select visit details from DB2 table,,,,"1. The code is written in COBOL, a programming language used for business applications.

2. The code is part of a larger program that is likely used to interact with a mainframe computer system running the CICS (Customer Information Control System) operating system.

3. The code snippet provided is part of a larger program that includes a mainline and an exit procedure.

4. The mainline contains the logic and instructions for the program to execute, while the exit procedure is responsible for cleaning up any resources or performing final tasks before the program exits.

5. The code inside the <CODE> and </CODE> tags does not contain any meaningful instructions or logic, as it is simply a placeholder or comment.

6. It is common practice to include comments or placeholders within code to provide documentation or indicate areas that need further development.","This COBOL file is designed to retrieve and process patient health data, specifically blood pressure and heart rate. The MAINLINE initializes variables, performs checks, and calls GET-BLOODPRESSURE and GET-HEARTRATE to fetch the required data, handling errors via WRITE-ERROR-MESSAGE as needed. The program concludes with the MAINLINE-END and subsequently exits cleanly with MAINLINE-EXIT. Error handling ensures robust operation by reacting appropriately based on SQL code outcomes during data retrieval.",0.0,1.0,1.0
8,IBM_example-health-apis,X-COBOL/X-COBOL/COBOL_Files/IBM_example-health-apis/HCMADB01.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCMADB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCMADB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-MEDICATION-ID-INT    PIC S9(9) COMP.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-AMOUNT            PIC S9(4) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM Obtain-Patient-Id.
           PERFORM INSERT-MEDICATION.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       Obtain-Patient-Id.
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
           MOVE CA-AMOUNT TO DB2-AMOUNT.
       INSERT-MEDICATION.
           MOVE ' INSERT MEDICATION' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO MEDICATION
                         ( MEDICATIONID,
                           PATIENTID,
                           DRUGNAME,
                           STRENGTH,
                           AMOUNT,
                           ROUTE,
                           FREQUENCY,
                           IDENTIFIER,
                           TYPE )
                  VALUES ( DEFAULT,
                           :DB2-PATIENT-ID,
                           :CA-DRUG-NAME,
                           :CA-STRENGTH,
                           :DB2-AMOUNT,
                           :CA-ROUTE,
                           :CA-FREQUENCY,
                           :CA-IDENTIFIER,
                           :CA-BIOMED-TYPE  )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             ELSE
               EXEC SQL
                    SET :DB2-MEDICATION-ID-INT = IDENTITY_VAL_LOCAL()
               END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           MOVE DB2-MEDICATION-ID-INT TO CA-PRESCRIPTION-ID.
           EXIT.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM(HCAZERRS)
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCMADB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-MEDICATION-ID-INT    PIC S9(9) COMP.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-AMOUNT            PIC S9(4) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
","['MAINLINE', 'MAINLINE-EXIT', 'Obtain-Patient-Id', 'INSERT-MEDICATION', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph WRITE-ERROR-MESSAGE, INSERT-MEDICATION, Obtain-Patient-Id.
Paragraph INSERT-MEDICATION calls paragraph WRITE-ERROR-MESSAGE.
",144,"ADD Medication Details: To add patient's name, address and date of birth to the DB2 patient table creating a new patient entry.",,,,"1. The code snippet is written in COBOL and is part of a larger program. It performs several tasks related to error handling and communication with other programs.

2. First, it calls CICS ASKTIME and FORMATTIME to get the current time and format it into a date and time string. This information is stored in the variables EM-DATE and EM-TIME.

3. Next, it calls CICS LINK to pass the ERROR-MSG variable to another program called HCAZERRS. If there is additional data in the EIBCALEN field, it will also pass this data to HCAZERRS.

4. Finally, if there is any data in the EIBCALEN field, it checks its length and either passes all or part of the data to HCAZERRS again.

5. Overall, this code snippet is responsible for collecting and formatting error information and passing it to other programs for further processing.","This COBOL program manages patient medication by first initializing variables and checking conditions. It calls ""Obtain Patient ID"" to transfer patient data, followed by ""Insert Medication,"" which adds a medication record to the database and handles errors through the ""WRITE-ERROR-MESSAGE"" routine. The program culminates with an exit statement, ensuring that all processes complete before returning control to the operating system. Each function intricately supports effective medication management and error handling.",0.75,1.0,1.0
13,IBM_example-health-apis,X-COBOL/X-COBOL/COBOL_Files/IBM_example-health-apis/HCV1BI01.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCV1BI01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCV1BI01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       77 HCIVDB01                  PIC x(8) Value 'HCIVDB01'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-Resp                     PIC S9(8) Comp.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           03 CA-REQUEST-ID            PIC X(6).
           03 CA-RETURN-CODE           PIC 9(2).
           03 CA-PATIENT-ID            PIC 9(10).
           03 CA-REQUEST-SPECIFIC      PIC X(32482).
           03 CA-PATIENT-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-INS-CARD-NUM       PIC X(10).
              05 CA-FIRST-NAME         PIC X(10).
              05 CA-LAST-NAME          PIC X(20).
              05 CA-DOB                PIC X(10).
              05 CA-ADDRESS            PIC X(20).
              05 CA-CITY               PIC X(20).
              05 CA-POSTCODE           PIC X(10).
              05 CA-PHONE-MOBILE       PIC X(20).
              05 CA-EMAIL-ADDRESS      PIC X(50).
              05 CA-USERID             PIC X(10).
              05 CA-ADDITIONAL-DATA    PIC X(32302).
           03 CA-PATIENT-USER-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-USERNAME           PIC X(10).
              05 CA-USERPASSWORD       PIC X(14).
              05 CA-ADDITIONAL-DATA    PIC X(32458).
           03 CA-MEDICATION-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-DRUG-NAME          PIC X(50).
              05 CA-STRENGTH           PIC X(20).
              05 CA-AMOUNT             PIC 9(03).
              05 CA-ROUTE              PIC X(20).
              05 CA-FREQUENCY          PIC X(20).
              05 CA-IDENTIFIER         PIC X(20).
              05 CA-BIOMED-TYPE        PIC X(2).
              05 CA-START-DATE         PIC X(10).
              05 CA-END-DATE           PIC X(10).
              05 CA-PRESCRIPTION-ID    PIC 9(10).
              05 CA-ADDITIONAL-DATA    PIC X(32317).
           03 CA-MEDITATION-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-MEDITATION-NAME    PIC X(50).
              05 CA-MEDITATION-TYPE    PIC X(20).
              05 CA-RELIEF             PIC X(20).
              05 CA-POSTURE            PIC X(20).
              05 CA-HOW-OFTEN          PIC X(20).
              05 CA-ADDITIONAL-DATA    PIC X(32352).
           03 CA-THRESHOLD-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-HR-THRESHOLD       PIC X(10).
              05 CA-BP-THRESHOLD       PIC X(10).
              05 CA-MS-THRESHOLD       PIC X(10).
              05 CA-ADDITIONAL-DATA    PIC X(32452).
           03 CA-VISIT-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-VISIT-DATE         PIC X(10).
              05 CA-VISIT-TIME         PIC X(10).
              05 CA-HEART-RATE         PIC X(10).
              05 CA-BLOOD-PRESSURE     PIC X(10).
              05 CA-MENTAL-STATE       PIC X(10).
              05 CA-ADDITIONAL-DATA    PIC X(32432).
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO EM-PATNUM
           PERFORM GET-VISIT.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-VISIT.
             EXEC CICS LINK Program(HCIVDB01)
                 Commarea(DFHCOMMAREA)
                 LENGTH(32500)
             END-EXEC.
           EXIT.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM(HCAZERRS)
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCV1BI01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       77 HCIVDB01                  PIC x(8) Value 'HCIVDB01'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-Resp                     PIC S9(8) Comp.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           03 CA-REQUEST-ID            PIC X(6).
           03 CA-RETURN-CODE           PIC 9(2).
           03 CA-PATIENT-ID            PIC 9(10).
           03 CA-REQUEST-SPECIFIC      PIC X(32482).
           03 CA-PATIENT-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-INS-CARD-NUM       PIC X(10).
              05 CA-FIRST-NAME         PIC X(10).
              05 CA-LAST-NAME          PIC X(20).
              05 CA-DOB                PIC X(10).
              05 CA-ADDRESS            PIC X(20).
              05 CA-CITY               PIC X(20).
              05 CA-POSTCODE           PIC X(10).
              05 CA-PHONE-MOBILE       PIC X(20).
              05 CA-EMAIL-ADDRESS      PIC X(50).
              05 CA-USERID             PIC X(10).
              05 CA-ADDITIONAL-DATA    PIC X(32302).
           03 CA-PATIENT-USER-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-USERNAME           PIC X(10).
              05 CA-USERPASSWORD       PIC X(14).
              05 CA-ADDITIONAL-DATA    PIC X(32458).
           03 CA-MEDICATION-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-DRUG-NAME          PIC X(50).
              05 CA-STRENGTH           PIC X(20).
              05 CA-AMOUNT             PIC 9(03).
              05 CA-ROUTE              PIC X(20).
              05 CA-FREQUENCY          PIC X(20).
              05 CA-IDENTIFIER         PIC X(20).
              05 CA-BIOMED-TYPE        PIC X(2).
              05 CA-START-DATE         PIC X(10).
              05 CA-END-DATE           PIC X(10).
              05 CA-PRESCRIPTION-ID    PIC 9(10).
              05 CA-ADDITIONAL-DATA    PIC X(32317).
           03 CA-MEDITATION-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-MEDITATION-NAME    PIC X(50).
              05 CA-MEDITATION-TYPE    PIC X(20).
              05 CA-RELIEF             PIC X(20).
              05 CA-POSTURE            PIC X(20).
              05 CA-HOW-OFTEN          PIC X(20).
              05 CA-ADDITIONAL-DATA    PIC X(32352).
           03 CA-THRESHOLD-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-HR-THRESHOLD       PIC X(10).
              05 CA-BP-THRESHOLD       PIC X(10).
              05 CA-MS-THRESHOLD       PIC X(10).
              05 CA-ADDITIONAL-DATA    PIC X(32452).
           03 CA-VISIT-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-VISIT-DATE         PIC X(10).
              05 CA-VISIT-TIME         PIC X(10).
              05 CA-HEART-RATE         PIC X(10).
              05 CA-BLOOD-PRESSURE     PIC X(10).
              05 CA-MENTAL-STATE       PIC X(10).
              05 CA-ADDITIONAL-DATA    PIC X(32432).
","['MAINLINE', 'MAINLINE-END', 'MAINLINE-EXIT', 'GET-VISIT', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph WRITE-ERROR-MESSAGE, GET-VISIT.
",154,Inquire Visit: To obtain Patient Visit details from database. Visit Inquire Business logic ,['HCIVDB01'],,,"1. The code is written in COBOL, a programming language used for business applications.

2. The code snippet provided is part of a larger program that includes a mainline and an exit procedure.

3. The mainline contains a single statement, ""EXIT."", which causes the program to terminate.

4. The exit procedure is also empty, as there are no specific actions to be taken upon exiting the program.

5. The code inside the <CODE> and </CODE> tags is a placeholder or comment. It does not contain any meaningful instructions or logic, as it is simply a placeholder or comment.

6. The code first gets the current time and date using CICS commands and then formats them into the appropriate format.

7. It then links to another program called HCAZERRS to write the error message to a queue.

8. If there is additional data available, it will write that as well.

9. Finally, it exits the program.","This COBOL program initializes variables, checks communication area length, and handles patient ID retrieval through the GET-VISIT subroutine. If errors occur, it calls WRITE-ERROR-MESSAGE to log relevant information. The program concludes with MAINLINE-END, returning control to CICS, while MAINLINE-EXIT labels the termination point. This structure ensures proper flow from initialization to error handling and exit, maintaining a coherent process throughout execution.",0.5,1.0,0.75
14,IBM_example-health-apis,X-COBOL/X-COBOL/COBOL_Files/IBM_example-health-apis/HCAPDB01.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCAPDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID        PIC S9(9) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM Obtain-Patient-Id.
           PERFORM INSERT-PATIENT.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       Obtain-Patient-Id.
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
       INSERT-PATIENT.
           MOVE ' INSERT PATIENT' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO PATIENT
                         ( PATIENTID,
                           USERNAME,
                           FIRSTNAME,
                           LASTNAME,
                           DATEOFBIRTH,
                           INSCARDNUMBER,
                           ADDRESS,
                           CITY,
                           POSTCODE,
                           PHONEMOBILE,
                           EMAILADDRESS )
                  VALUES ( DEFAULT,
                           :CA-USERID,
                           :CA-FIRST-NAME,
                           :CA-LAST-NAME,
                           :CA-DOB,
                           :CA-INS-CARD-NUM,
                           :CA-ADDRESS,
                           :CA-CITY,
                           :CA-POSTCODE,
                           :CA-PHONE-MOBILE,
                           :CA-EMAIL-ADDRESS )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             ELSE
               EXEC SQL
                    SET :DB2-PATIENT-ID = IDENTITY_VAL_LOCAL()
               END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           EXIT.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM(HCAZERRS)
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID        PIC S9(9) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
","['MAINLINE', 'MAINLINE-EXIT', 'Obtain-Patient-Id', 'INSERT-PATIENT', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph WRITE-ERROR-MESSAGE, Obtain-Patient-Id, INSERT-PATIENT.
Paragraph INSERT-PATIENT calls paragraph WRITE-ERROR-MESSAGE.
",144,"ADD Patient Details: To add patient's name, address and date of birth to the DB2 patient table creating a new patient entry.",,,,"1. This COBOL file is used to manage patient information in a hospital setting. 
2. The file contains two procedures: MAINLINE and EXIT-PROGRAM. 
3. The MAINLINE procedure is responsible for obtaining patient information, inserting the information into a database table, and handling errors that may occur during the process. 
4. The EXIT-PROGRAM procedure is responsible for cleaning up any resources used by the program before it exits.","This COBOL program manages patient records by obtaining patient IDs, inserting records into a database, and handling errors. The MAINLINE initializes variables and coordinates operations, calling Obtain-Patient-Id to move patient ID values and INSERT-PATIENT to insert records while invoking WRITE-ERROR-MESSAGE for error handling. INSERT-PATIENT also checks for errors during the SQL execution, ensuring robust error reporting and program termination through MAINLINE-EXIT upon completion of operations.",0.75,1.0,1.0
15,IBM_example-health-apis,X-COBOL/X-COBOL/COBOL_Files/IBM_example-health-apis/HCAVDB01.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCAVDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID        PIC S9(9) COMP.
           03 DB2-TIMESTAMP         PIC X(26).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
           MOVE CA-VISIT-DATE   TO DB2-TIMESTAMP(1:10)
           MOVE SPACE           TO DB2-TIMESTAMP (11:1)
           MOVE CA-VISIT-TIME   TO DB2-TIMESTAMP(12:10)
           PERFORM INSERT-BLOODPRESSURE.
           PERFORM INSERT-HEARTRATE.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-BLOODPRESSURE.
           MOVE ' INSERT BLOODPRESSURE' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO BLOODPRESSURE
                         ( PATIENTID,
                           BPDATETIME,
                           BLOODPRESSURE )
                  VALUES ( :DB2-PATIENT-ID,
                           :DB2-TIMESTAMP,
                           :CA-BLOOD-PRESSURE )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           EXIT.
       INSERT-HEARTRATE.
           MOVE ' INSERT HEARTRATE' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO HEARTRATE
                         ( PATIENTID,
                           HRDATETIME,
                           HEARTRATE )
                  VALUES ( :DB2-PATIENT-ID,
                           :DB2-TIMESTAMP,
                           :CA-HEART-RATE )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           EXIT.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM(HCAZERRS)
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID        PIC S9(9) COMP.
           03 DB2-TIMESTAMP         PIC X(26).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
","['MAINLINE', 'MAINLINE-EXIT', 'INSERT-BLOODPRESSURE', 'INSERT-HEARTRATE', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph WRITE-ERROR-MESSAGE, INSERT-BLOODPRESSURE, INSERT-HEARTRATE.
Paragraph INSERT-BLOODPRESSURE calls paragraph WRITE-ERROR-MESSAGE.
Paragraph INSERT-HEARTRATE calls paragraph WRITE-ERROR-MESSAGE.
",145,ADD Visit Details: To add patient's visit details to bloodpressure and the heartrate DB2 tables.,,,,"1. The COBOL file is designed to handle errors and communicate with other programs using the CICS LINK command.

2. The file contains three paragraphs: MAINLINE, INSERT-BLOODPRESSURE, and INSERT-HEARTRATE. These paragraphs perform various tasks such as retrieving the current system time, formatting it, and calling external programs.

3. The file also includes a WRITE-ERROR-MESSAGE paragraph that handles error messages and communicates with the HCAZERRS program.

4. The file is part of a larger program that includes an exit procedure.

5. The file is written in COBOL, a programming language used for business applications.","This COBOL code is designed for managing patient data, specifically inserting blood pressure and heart rate readings into a database using CICS and DB2 systems. The mainline initializes variables and checks conditions before executing database operations, including inserting records. Both insertion paragraphs handle errors by invoking WRITE-ERROR-MESSAGE, which formats error messages and manages error handling. The program concludes with MAINLINE-EXIT to terminate the execution, ensuring robust error management throughout the process.",1.0,1.0,1.0
18,IBM_example-health-apis,X-COBOL/X-COBOL/COBOL_Files/IBM_example-health-apis/HCMADB02.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCMADB02.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCMADB02------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-NUM-DATE-FIELDS.
             05  WS-WORKING-DATE          PIC  9(8).
             05  WS-START-NUM-DATE.
                 10  WS-START-NUM-YEAR    PIC  9(4).
                 10  WS-START-NUM-MONTH   PIC  9(2).
                 10  WS-START-NUM-DAY     PIC  9(2).
             05  WS-START-NUM-TIME.
                 10  WS-START-NUM-HOUR    PIC  9(2).
                 10  WS-START-NUM-MINUTE  PIC  9(2).
                 10  WS-START-NUM-SECOND  PIC  9(2).
                 10  WS-START-NUM-MS      PIC  9(2).
             05  WS-END-NUM-DATE.
                 10  WS-END-NUM-YEAR    PIC  9(4).
                 10  WS-END-NUM-MONTH   PIC  9(2).
                 10  WS-END-NUM-DAY     PIC  9(2).
             05  WS-END-NUM-TIME.
                 10  WS-END-NUM-HOUR    PIC  9(2).
                 10  WS-END-NUM-MINUTE  PIC  9(2).
                 10  WS-END-NUM-SECOND  PIC  9(2).
                 10  WS-END-NUM-MS      PIC  9(2).
             05  WS-INTEGER-START-DATE   PIC 9(8).
             05  WS-INTEGER-END-DATE     PIC 9(8).
       01  DB2-OUT.
           03 DB2-PRESCRIPTION-ID-INT  PIC S9(9) COMP.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-TIMESTAMP            PIC X(19).
           03 DB2-TAKEN                PIC X.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE.
       REG-100-COMMON-CODE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
       REG-120-PROCESS-COMMAREA.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
           MOVE CA-PRESCRIPTION-ID TO DB2-PRESCRIPTION-ID-INT.
           MOVE 'N' TO DB2-TAKEN.
       REG-150-PROCESS-DATES.
           MOVE CA-START-DATE (1:4) TO  WS-START-NUM-YEAR
           MOVE CA-START-DATE (6:2) TO  WS-START-NUM-MONTH
           MOVE CA-START-DATE (9:2) TO  WS-START-NUM-DAY
           MOVE CA-END-DATE (1:4) TO  WS-END-NUM-YEAR
           MOVE CA-END-DATE (6:2) TO  WS-END-NUM-MONTH
           MOVE CA-END-DATE (9:2) TO  WS-END-NUM-DAY
           MOVE WS-START-NUM-DATE TO  WS-WORKING-DATE
           COMPUTE WS-INTEGER-START-DATE =
                   FUNCTION INTEGER-OF-DATE (WS-WORKING-DATE)
           MOVE WS-END-NUM-DATE TO  WS-WORKING-DATE
           COMPUTE WS-INTEGER-END-DATE =
                   FUNCTION INTEGER-OF-DATE (WS-WORKING-DATE)
           PERFORM UNTIL WS-INTEGER-START-DATE > WS-INTEGER-END-DATE
               COMPUTE WS-WORKING-DATE =
                       FUNCTION DATE-OF-INTEGER (WS-INTEGER-START-DATE)
               MOVE WS-WORKING-DATE TO WS-START-NUM-DATE
               EVALUATE CA-FREQUENCY
                  WHEN 1
                    MOVE 12000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                  WHEN 2
                    MOVE 08000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 20000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                  WHEN 3
                    MOVE 08000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 14000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 20000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                  WHEN 4
                    MOVE 08000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 12000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 16000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 20000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
               END-EVALUATE
               ADD 1 TO WS-INTEGER-START-DATE
           END-PERFORM.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       FORMAT-TIMESTAMP.
           MOVE WS-START-NUM-YEAR   TO DB2-TIMESTAMP(1:4)
           MOVE '-'                 TO DB2-TIMESTAMP(5:1)
           MOVE WS-START-NUM-MONTH  TO DB2-TIMESTAMP(6:2)
           MOVE '-'                 TO DB2-TIMESTAMP(8:1)
           MOVE WS-START-NUM-DAY    TO DB2-TIMESTAMP(9:2)
           MOVE SPACE               TO DB2-TIMESTAMP (11:1)
           MOVE WS-START-NUM-HOUR   TO DB2-TIMESTAMP(12:2)
           MOVE ':'                 TO DB2-TIMESTAMP(14:1)
           MOVE WS-START-NUM-MINUTE TO DB2-TIMESTAMP(15:2)
           MOVE ':'                 TO DB2-TIMESTAMP(17:1)
           MOVE WS-START-NUM-SECOND TO DB2-TIMESTAMP(18:2)
           EXIT.
       INSERT-PRESCRIPTION.
           MOVE ' INSERT PRESCRIPTION' TO EM-SQLREQ
           PERFORM FORMAT-TIMESTAMP
             EXEC SQL
               INSERT INTO PRESCRIPTION
                         ( PRESCRIPTIONID,
                           PATIENTID,
                           PDATETIME,
                           TAKEN )
                  VALUES ( :DB2-PRESCRIPTION-ID-INT,
                           :DB2-PATIENT-ID,
                           :DB2-TIMESTAMP,
                           :DB2-TAKEN )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF.
           EXIT.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM(HCAZERRS)
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM(HCAZERRS)
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCMADB02------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01 HCAZERRS           PIC x(8) Value 'HCAZERRS'.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' HCP1BI01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-PATNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' MNUM='.
             05 EM-MEDNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-NUM-DATE-FIELDS.
             05  WS-WORKING-DATE          PIC  9(8).
             05  WS-START-NUM-DATE.
                 10  WS-START-NUM-YEAR    PIC  9(4).
                 10  WS-START-NUM-MONTH   PIC  9(2).
                 10  WS-START-NUM-DAY     PIC  9(2).
             05  WS-START-NUM-TIME.
                 10  WS-START-NUM-HOUR    PIC  9(2).
                 10  WS-START-NUM-MINUTE  PIC  9(2).
                 10  WS-START-NUM-SECOND  PIC  9(2).
                 10  WS-START-NUM-MS      PIC  9(2).
             05  WS-END-NUM-DATE.
                 10  WS-END-NUM-YEAR    PIC  9(4).
                 10  WS-END-NUM-MONTH   PIC  9(2).
                 10  WS-END-NUM-DAY     PIC  9(2).
             05  WS-END-NUM-TIME.
                 10  WS-END-NUM-HOUR    PIC  9(2).
                 10  WS-END-NUM-MINUTE  PIC  9(2).
                 10  WS-END-NUM-SECOND  PIC  9(2).
                 10  WS-END-NUM-MS      PIC  9(2).
             05  WS-INTEGER-START-DATE   PIC 9(8).
             05  WS-INTEGER-END-DATE     PIC 9(8).
       01  DB2-OUT.
           03 DB2-PRESCRIPTION-ID-INT  PIC S9(9) COMP.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-TIMESTAMP            PIC X(19).
           03 DB2-TAKEN                PIC X.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
","['MAINLINE', 'REG-100-COMMON-CODE', 'REG-120-PROCESS-COMMAREA', 'REG-150-PROCESS-DATES', 'MAINLINE-EXIT', 'FORMAT-TIMESTAMP', 'INSERT-PRESCRIPTION', 'WRITE-ERROR-MESSAGE']","Paragraph REG-120-PROCESS-COMMAREA calls paragraph WRITE-ERROR-MESSAGE.
Paragraph REG-150-PROCESS-DATES calls paragraph INSERT-PRESCRIPTION.
Paragraph INSERT-PRESCRIPTION calls paragraph FORMAT-TIMESTAMP, WRITE-ERROR-MESSAGE.
",210,"ADD Prescription Details: To add patient's name, address and date of birth to the DB2 patient table creating a new patient entry.",,,,"1. The code initializes the variables WS-HEADER and DB2-OUT, and moves data from the system-defined variables EIBTRNID, EIBTRMID, and EIBTASKN into the fields of WS-HEADER.

2. The code segment is written in COBOL and is part of a larger program. It performs several tasks related to error handling and communication with other programs. First, it uses the CICS ASKTIME command to obtain the current system time and store it in the variable WS-ABSTIME. This value is then passed to the CICS FORMATTIME command, which formats the absolute time value into a date and time format. The resulting date and time are stored in the variables WS-DATE and WS-TIME, respectively. Next, the code uses the CICS LINK command to call another program named HCAZERRS. This program is likely responsible for processing errors and generating error messages. The ERROR-MSG structure is passed as a parameter to this program, along with its length. If there is additional data available in the EIBCALEN field, it is also passed to the HCAZERRS program. Finally, if the EIBCALEN field contains data, the code checks whether it is less than or equal to 70 characters. If so, it moves the first EIBCALEN characters from the DFHCOMMAREA variable to the CA-DATA variable and passes it to the HCAZERRS program again. Otherwise, it only passes the first 70 characters of the DFHCOMMAREA variable.

3. The code inside <CODE> and </CODE> is used to insert a prescription into a database table called PRESCRIPTION. It first moves the string ""INSERT PRESCRIPTION"" to the variable EM-SQLREQ using the MOVE statement. Then, it calls a subroutine named FORMAT-TIMESTAMP to format a timestamp. Next, it executes an SQL statement using the EXEC SQL verb to insert a new record into the PRESCRIPTION table. The values for the fields in the new record are provided by the variables DB2-PRESCRIPTION-ID-INT, DB2-PATIENT-ID, DB2-TIMESTAMP, and DB2-TAKEN. Finally, it checks the return code from the SQL statement and handles any errors that may occur.","This COBOL program is designed to process transactions, including error handling and database interactions. It begins with the MAINLINE, initializing key variables in REG-100-COMMON-CODE. The program checks and processes a comma area in REG-120-PROCESS-COMMAREA, which can trigger error handling through WRITE-ERROR-MESSAGE. Dates are managed in REG-150-PROCESS-DATES, which calls INSERT-PRESCRIPTION and invokes FORMAT-TIMESTAMP to format timestamps before inserting prescription records. The program gracefully exits with MAINLINE-EXIT after completing its tasks.",0.5,1.0,0.5
26,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/url-charconv.cbl,"       IDENTIFICATION DIVISION.
       program-id. url-charconv.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.
       01  cnv-post-string      PIC X(256) VALUE SPACE.
       01  ws-post-string       PIC X(256) VALUE SPACE.
       01  urlchars             PIC X(5)   VALUE SPACE.
       01  cindex               PIC 9(3)   VALUE 1.
       linkage section.
       01  rtnflag              PIC X.        
       01  raw-post-string      PIC X(256).
       01  num-len-cnt          PIC 9(5).        
       PROCEDURE DIVISION USING rtnflag raw-post-string num-len-cnt.
       000-convert-to-utf8.
           MOVE raw-post-string TO ws-post-string
           PERFORM VARYING cindex FROM 1 BY 1
               UNTIL cindex > num-len-cnt
                IF ws-post-string(cindex:1) = '%'
                    EVALUATE ws-post-string(cindex:6)
                        WHEN '%C3%A5'
                            MOVE x'c3a5' TO cnv-post-string(cindex:2)
                        WHEN '%C3%A4'
                            MOVE x'c3a4' TO cnv-post-string(cindex:2)
                        WHEN '%C3%B6'
                            MOVE x'c3b6' TO cnv-post-string(cindex:2)
                        WHEN '%C3%85'
                            MOVE x'c385' TO cnv-post-string(cindex:2)
                        WHEN '%C3%84'
                             MOVE x'c384' TO cnv-post-string(cindex:2)
                        WHEN '%C3%96'
                            MOVE x'c396' TO cnv-post-string(cindex:2)            
                    END-EVALUATE
                    ADD 5 TO cindex
                ELSE
                    MOVE ws-post-string(cindex:1) TO
                                cnv-post-string(cindex:1)
                END-IF
           END-PERFORM
           MOVE cnv-post-string TO raw-post-string
           EXIT PROGRAM
           .
","       working-storage section.
       01  cnv-post-string      PIC X(256) VALUE SPACE.
       01  ws-post-string       PIC X(256) VALUE SPACE.
       01  urlchars             PIC X(5)   VALUE SPACE.
       01  cindex               PIC 9(3)   VALUE 1.
       linkage section.
       01  rtnflag              PIC X.        
       01  raw-post-string      PIC X(256).
       01  num-len-cnt          PIC 9(5).        
",['000-convert-to-utf8'],,43,Initial url conversion tests - not part of application,,,,"1. The COBOL file is used to convert a string from one encoding to another, specifically from UTF-8 to ASCII.

2. The code loops through each character in the input string and checks if it's a percent sign (%). If it is, it uses an evaluate statement to map the UTF-8 sequence to its corresponding ASCII value and stores it in the output string.

3. If the current character is not a percent sign, it simply copies it to the output string as is.

4. Finally, the converted string is moved back to the original variable and the program exits.","The COBOL code is used to convert a raw post string to UTF-8 encoding. It uses a loop to iterate through the characters of the raw post string and checks if they are encoded as percentages. If they are, it evaluates the percentages and converts them to their corresponding UTF-8 characters. If the character is not encoded as a percentage, it is simply moved to the converted post string. Finally, the converted post string is moved to the raw post string and the program exits.",1.0,1.0,1.0
27,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/write-post-string.cbl,"       IDENTIFICATION DIVISION.
       program-id. write-post-string IS INITIAL.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.
           SELECT webinput ASSIGN TO KEYBOARD
              FILE STATUS IS wn-instatus.
           SELECT postfileout 
              ASSIGN TO '../data/postfile.dat'
              ORGANIZATION IS LINE SEQUENTIAL.         
       DATA DIVISION.
       file section.
       FD  webinput.
       01  fd-chunk-of-posts              PIC X(512).
       FD  postfileout.
       01  fd-postfile-post. 
           03  fc-post-name               PIC X(64).
           03  fc-post-separator          PIC X.      
           03  fc-post-value              PIC X(64). 
       working-storage section.
       01  wn-instatus                    PIC 9(4)      VALUE ZERO.  
       01  wc-env-length                  PIC X(3)      VALUE SPACE.
       01  wn-content-length              PIC 9(4)      VALUE ZERO.
       01  wc-raw-post-string             PIC X(512)    VALUE SPACE.
       01  wn-number-of-value-pairs       PIC 99        VALUE ZERO.        
       01  wn-pair-counter                PIC 99        VALUE ZERO.        
       01  wc-tmp-name-value              PIC X(128)    VALUE SPACE.
       01  wc-tmp-name                    PIC X(64)     VALUE SPACE.
       01  wc-tmp-value                   PIC X(64)     VALUE SPACE.
       01  wn-unstring-next-position      PIC 9(3)      VALUE 1.
       linkage section.
       01  ln-rtn-code                    PIC  S99.
       PROCEDURE DIVISION USING ln-rtn-code.
       0000-main.
           PERFORM A0100-init
           PERFORM B0100-write-post-to-file
           PERFORM C0100-closedown
           EXIT PROGRAM
           .
       A0100-init.
           ACCEPT wc-env-length FROM ENVIRONMENT 'CONTENT_LENGTH'
           COMPUTE wn-content-length = FUNCTION NUMVAL(wc-env-length)          
           MOVE SPACE TO wc-raw-post-string
           OPEN INPUT webinput
              IF wn-instatus < 10 THEN
                   READ
                       webinput
                   END-READ
                   IF wn-instatus > 9 THEN
                       MOVE SPACES TO fd-chunk-of-posts
                   END-IF
           END-IF
           CLOSE webinput
           MOVE fd-chunk-of-posts(1:wn-content-length)
                                      TO wc-raw-post-string
           OPEN OUTPUT postfileout
           MOVE ZERO TO ln-rtn-code
           .
       B0100-write-post-to-file.
            MOVE ZERO TO wn-number-of-value-pairs
            INSPECT wc-raw-post-string
                TALLYING wn-number-of-value-pairs FOR ALL '&'
            ADD 1 TO wn-number-of-value-pairs
            MOVE 1 TO wn-unstring-next-position
            PERFORM VARYING wn-pair-counter FROM 1 BY 1
                UNTIL wn-pair-counter > wn-number-of-value-pairs
                PERFORM B0200-process-value-pair
            END-PERFORM
            .
       B0200-process-value-pair.
            MOVE SPACE TO wc-tmp-name-value
            MOVE SPACE TO wc-tmp-name
            MOVE SPACE TO wc-tmp-value
            UNSTRING wc-raw-post-string DELIMITED BY '&'
                INTO wc-tmp-name-value
                WITH POINTER wn-unstring-next-position
            END-UNSTRING
            UNSTRING wc-tmp-name-value DELIMITED BY '='
                INTO wc-tmp-name wc-tmp-value
            END-UNSTRING 
            MOVE wc-tmp-name TO fc-post-name
            MOVE '=' TO fc-post-separator
            MOVE wc-tmp-value TO fc-post-value
            WRITE fd-postfile-post
            .
       C0100-closedown.
           CLOSE postfileout
           .
","       file section.
       FD  webinput.
       01  fd-chunk-of-posts              PIC X(512).
       FD  postfileout.
       01  fd-postfile-post. 
           03  fc-post-name               PIC X(64).
           03  fc-post-separator          PIC X.      
           03  fc-post-value              PIC X(64). 
       working-storage section.
       01  wn-instatus                    PIC 9(4)      VALUE ZERO.  
       01  wc-env-length                  PIC X(3)      VALUE SPACE.
       01  wn-content-length              PIC 9(4)      VALUE ZERO.
       01  wc-raw-post-string             PIC X(512)    VALUE SPACE.
       01  wn-number-of-value-pairs       PIC 99        VALUE ZERO.        
       01  wn-pair-counter                PIC 99        VALUE ZERO.        
       01  wc-tmp-name-value              PIC X(128)    VALUE SPACE.
       01  wc-tmp-name                    PIC X(64)     VALUE SPACE.
       01  wc-tmp-value                   PIC X(64)     VALUE SPACE.
       01  wn-unstring-next-position      PIC 9(3)      VALUE 1.
       linkage section.
       01  ln-rtn-code                    PIC  S99.
","['0000-main', 'A0100-init', 'B0100-write-post-to-file', 'B0200-process-value-pair', 'C0100-closedown']","Paragraph 0000-main calls paragraph C0100-closedown, B0100-write-post-to-file, A0100-init.
Paragraph B0100-write-post-to-file calls paragraph B0200-process-value-pair.
",89,"write-post-string: write received environment CGI post, and write to a sequental file on ../data.",,,,"1. The COBOL file is responsible for processing and writing data to a file. 
2. It initializes variables, reads input from the environment, and opens output files. 
3. It also closes the ""postfileout"" file before the program exits.","This COBOL program performs tasks of initializing, writing to a file, and closing down. It begins by initializing variables and opening input/output files. Then, it writes data to a file by processing value pairs extracted from a raw post string. A subroutine splits these pairs into name and value, storing them accordingly. Finally, it closes the output file ""postfileout,"" releasing all related resources to ensure proper termination of the program's operations.",0.5,1.0,1.0
30,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/cgi-edit-betyg.cbl,"       IDENTIFICATION DIVISION.
       program-id. cgi-edit-betyg.
       DATA DIVISION.
       working-storage section.
       01   switches-edit.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.             
            03  grade-id-is-in-table-switch         PIC X   VALUE 'N'.
                88  grade-id-is-in-table                    VALUE 'Y'.                             
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.        
       01  wc-pagetitle            PIC X(20) VALUE 'Uppdatera betyg'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.              
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-grade-rec-vars.       
           05  tbl-grade-grade-id       PIC  9(4).
           05  tbl-grade-grade          PIC  X(40).
           05  tbl-grade-comment        PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-grade-id         PIC  9(4) VALUE ZERO.
           05  wc-grade            PIC  X(40) VALUE SPACE.
           05  wc-comment          PIC  X(40) VALUE SPACE.  
       01  wr-cur-rec-vars.
           05  wn-cur-grade-id         PIC  9(4) VALUE ZERO.     
           05  wc-cur-grade        PIC  X(40) VALUE SPACE. 
           05  wc-cur-comment      PIC  X(40) VALUE SPACE.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           SET ENVIRONMENT ""OJ_DBG"" TO ""1""
           SET ENVIRONMENT ""OJ_LOG"" TO ""1""           
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-edit-grade
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
                PERFORM A0110-init-edit-action
           END-IF
           .
       A0110-init-edit-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'grade_id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                               wc-post-name wc-post-value
           MOVE FUNCTION NUMVAL(wc-post-value) TO wn-grade-id
           IF wc-post-value = SPACE
               MOVE 'Saknar ett angivet grade id'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string      
           ELSE                 
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'grade_grade' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                    wc-post-name wc-post-value
               MOVE wc-post-value TO wc-grade   
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'grade_comment' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                            wc-post-value                                     
               MOVE wc-post-value TO wc-comment           
               IF wc-grade NOT = SPACE OR
                  wc-comment NOT = SPACE
                        SET is-valid-init TO TRUE                  
               ELSE
                   MOVE 'Ingen kolumn att uppdatera'
                        TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string
               END-IF   
           END-IF
           . 
       B0100-connect.
           MOVE  ""openjensen""    TO   wc-database
           MOVE  ""jensen""        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-edit-grade.
           PERFORM B0210-does-grade-id-exist
           IF grade-id-is-in-table
               PERFORM B0220-change-grade-item
           ELSE
               MOVE 'Denna student finns ej'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-grade-id-exist.
           EXEC SQL
             DECLARE cursedit CURSOR FOR
                 SELECT grade_id, grade_grade, grade_comment
                 FROM tbl_grade
           END-EXEC      
           EXEC SQL
                OPEN cursedit
           END-EXEC
           MOVE wn-grade-id TO tbl-grade-grade-id
           EXEC SQL
               FETCH cursedit
                   INTO :tbl-grade-grade-id, :tbl-grade-grade,
                        :tbl-grade-comment
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF wn-grade-id = tbl-grade-grade-id
                    SET grade-id-is-in-table TO TRUE
               MOVE tbl-grade-grade-id TO wn-cur-grade-id
               MOVE tbl-grade-grade TO wc-cur-grade
               MOVE tbl-grade-comment TO wc-cur-comment
               END-IF
               EXEC SQL
                   FETCH cursedit
                       INTO :tbl-grade-grade-id, :tbl-grade-grade,
                            :tbl-grade-comment
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF                 
           EXEC SQL 
               CLOSE cursedit 
           END-EXEC    
           .
       B0220-change-grade-item.
           IF wc-grade NOT = wc-cur-grade
               MOVE wc-grade TO tbl-grade-grade
           ELSE    
               MOVE wc-cur-grade TO tbl-grade-grade
           END-IF
           IF wc-comment NOT = wc-cur-comment
               MOVE wc-comment TO tbl-grade-comment
           ELSE
               MOVE wc-cur-comment TO tbl-grade-comment
           END-IF
           MOVE wn-grade-id TO tbl-grade-grade-id
           EXEC SQL
               UPDATE tbl_grade
                   SET grade_grade = :tbl-grade-grade,
                       grade_comment = :tbl-grade-comment
               WHERE grade_id = :tbl-grade-grade-id
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0230-commit-work
                MOVE 'Betyg data ändrad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string      
           END-IF
           .           
       B0230-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .                    
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           EVALUATE SQLSTATE
               WHEN  ""02000""
                   MOVE 'Data återfinns ej i databasen'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""08003""
              WHEN  ""08001""
                   MOVE 'Anslutning till databas misslyckades'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""23503""
                   MOVE 'Kan ej ta bort data - pga tabellberoenden'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string                              
              WHEN  SPACE
                   MOVE 'Obekant fel - kontakta leverantören'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string  
              WHEN  OTHER
                   CALL 'error-printscr' USING SQLSTATE SQLERRMC
           END-EVALUATE
           .
       Z0200-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
","       working-storage section.
       01   switches-edit.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.             
            03  grade-id-is-in-table-switch         PIC X   VALUE 'N'.
                88  grade-id-is-in-table                    VALUE 'Y'.                             
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.        
       01  wc-pagetitle            PIC X(20) VALUE 'Uppdatera betyg'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.              
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-grade-rec-vars.       
           05  tbl-grade-grade-id       PIC  9(4).
           05  tbl-grade-grade          PIC  X(40).
           05  tbl-grade-comment        PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-grade-id         PIC  9(4) VALUE ZERO.
           05  wc-grade            PIC  X(40) VALUE SPACE.
           05  wc-comment          PIC  X(40) VALUE SPACE.  
       01  wr-cur-rec-vars.
           05  wn-cur-grade-id         PIC  9(4) VALUE ZERO.     
           05  wc-cur-grade        PIC  X(40) VALUE SPACE. 
           05  wc-cur-comment      PIC  X(40) VALUE SPACE.
       EXEC SQL INCLUDE SQLCA END-EXEC.
","['0000-main', 'A0100-init', 'A0110-init-edit-action', 'B0100-connect', 'B0200-edit-grade', 'B0210-does-grade-id-exist', 'B0220-change-grade-item', 'B0230-commit-work', 'C0100-closedown', 'Z0100-error-routine', 'Z0200-disconnect']","Paragraph 0000-main calls paragraph B0100-connect, B0200-edit-grade, C0100-closedown, A0100-init, Z0200-disconnect.
Paragraph A0100-init calls paragraph A0110-init-edit-action.
Paragraph B0100-connect calls paragraph Z0100-error-routine.
Paragraph B0200-edit-grade calls paragraph B0220-change-grade-item, B0210-does-grade-id-exist.
Paragraph B0210-does-grade-id-exist calls paragraph Z0100-error-routine.
Paragraph B0220-change-grade-item calls paragraph Z0100-error-routine, B0230-commit-work.
",215,cgi-edit-betyg: changes existing grade. Finally saves into table tbl_grade,,"['write-post-string', 'wui-print-header', 'stop-printscr', 'ok-printscr', 'get-post-value', 'wui-end-html', 'wui-start-html']",,"1. The COBOL file is used to edit actions for a system. 
2. It connects to a database using the EXEC SQL statement. 
3. It updates records in the database and displays messages based on the success or failure of the operations. 
4. It handles errors by calling subroutines and displaying error messages. 
5. It commits changes to the database and terminates connections when necessary.","The COBOL program facilitates grade editing by initializing the environment, connecting to a database, and handling user input. It starts by initializing actions and proceeding to verify grade IDs and update records accordingly, while also incorporating error handling routines for database interactions. Finally, it closes the HTML output and disconnects from the database, ensuring resources are cleaned up. Each section proceeds sequentially, emphasizing successful connections, edits, and cleanup operations.",1.0,1.0,1
31,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/error-printscr.cbl,"       IDENTIFICATION DIVISION.
       program-id. error-printscr IS INITIAL.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.
           SELECT OPTIONAL ojlogfile
              ASSIGN TO '../data/openjensen.log'
              ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       file section.
       FD  ojlogfile.
       01  fd-ojlogfile-post.
           03  fc-yyyy                    PIC X(4).
           03  fc-sep-1                   PIC X.
           03  fc-monthmonth              PIC X(2).
           03  fc-sep-2                   PIC X.
           03  fc-dd                      PIC X(2).
           03  fc-sep-3                   PIC X.
           03  fc-hh                      PIC X(2).
           03  fc-sep-4                   PIC X.
           03  fc-mm                      PIC X(2).
           03  fc-sep-5                   PIC X.           
           03  fc-ss                      PIC X(2).
           03  fc-sep-6                   PIC X.
           03  fc-tt                      PIC X(2).
           03  fc-sep-7                   PIC X.           
           03  fc-err-state               PIC X(5).
           03  fc-sep-8                   PIC X.      
           03  fc-err-msg                 PIC X(40).
           03  fc-sep-9                   PIC X.       
       working-storage section.       
       01  wr-log-date-time.
           03  wr-yyyymmdd.
               05 wn-year     PIC 9(4) VALUE ZERO.
               05 wn-month    PIC 9(2) VALUE ZERO.
               05 wn-day      PIC 9(2) VALUE ZERO.
           03  wr-hhmmss.
               05 wn-hour     PIC 9(2) VALUE ZERO.
               05 wn-minute   PIC 9(2) VALUE ZERO.
               05 wn-second   PIC 9(2) VALUE ZERO.
               05 wn-hundred  PIC 9(2) VALUE ZERO.               
           03  wc-other       PIC X(5) VALUE SPACE.    
       01  wc-is-debug             PIC X(40) VALUE SPACE.
       01  wc-is-errlog            PIC X(40) VALUE SPACE.       
       linkage section.
       01  lc-err-state         PIC X(5).
       01  lc-err-msg           PIC X(70).
       PROCEDURE DIVISION USING lc-err-state lc-err-msg.
       A000-error-printscr.
           ACCEPT wc-is-debug FROM ENVIRONMENT 'OJ_DBG'
           IF wc-is-debug = '1'
               DISPLAY '<br>ERROR: |' lc-err-state '|' lc-err-msg
           END-IF
           ACCEPT wc-is-errlog FROM ENVIRONMENT 'OJ_LOG'
           IF wc-is-errlog = '1'
               PERFORM A0100-append-msg-to-error-file
           END-IF
           EXIT PROGRAM
           .
       A0100-append-msg-to-error-file.
           MOVE FUNCTION CURRENT-DATE TO wr-log-date-time
           OPEN EXTEND ojlogfile
           MOVE wn-year TO fc-yyyy  
           MOVE '-' TO fc-sep-1   
           MOVE wn-month TO fc-monthmonth   
           MOVE '-' TO fc-sep-2    
           MOVE wn-day TO fc-dd     
           MOVE 'T' TO fc-sep-3     
           MOVE wn-hour TO fc-hh      
           MOVE ':' TO fc-sep-4                 
           MOVE wn-minute TO fc-mm    
           MOVE ':' TO fc-sep-5                  
           MOVE wn-second TO fc-ss
           MOVE ',' TO fc-sep-6
           MOVE wn-hundred TO fc-tt               
           MOVE '|' TO fc-sep-7               
           MOVE lc-err-state TO fc-err-state      
           MOVE '|' TO fc-sep-8          
           MOVE lc-err-msg TO fc-err-msg
           MOVE '|' TO fc-sep-9        
           WRITE fd-ojlogfile-post
           CLOSE ojlogfile
           .
<","       file section.
       FD  ojlogfile.
       01  fd-ojlogfile-post.
           03  fc-yyyy                    PIC X(4).
           03  fc-sep-1                   PIC X.
           03  fc-monthmonth              PIC X(2).
           03  fc-sep-2                   PIC X.
           03  fc-dd                      PIC X(2).
           03  fc-sep-3                   PIC X.
           03  fc-hh                      PIC X(2).
           03  fc-sep-4                   PIC X.
           03  fc-mm                      PIC X(2).
           03  fc-sep-5                   PIC X.           
           03  fc-ss                      PIC X(2).
           03  fc-sep-6                   PIC X.
           03  fc-tt                      PIC X(2).
           03  fc-sep-7                   PIC X.           
           03  fc-err-state               PIC X(5).
           03  fc-sep-8                   PIC X.      
           03  fc-err-msg                 PIC X(40).
           03  fc-sep-9                   PIC X.       
       working-storage section.       
       01  wr-log-date-time.
           03  wr-yyyymmdd.
               05 wn-year     PIC 9(4) VALUE ZERO.
               05 wn-month    PIC 9(2) VALUE ZERO.
               05 wn-day      PIC 9(2) VALUE ZERO.
           03  wr-hhmmss.
               05 wn-hour     PIC 9(2) VALUE ZERO.
               05 wn-minute   PIC 9(2) VALUE ZERO.
               05 wn-second   PIC 9(2) VALUE ZERO.
               05 wn-hundred  PIC 9(2) VALUE ZERO.               
           03  wc-other       PIC X(5) VALUE SPACE.    
       01  wc-is-debug             PIC X(40) VALUE SPACE.
       01  wc-is-errlog            PIC X(40) VALUE SPACE.       
       linkage section.
       01  lc-err-state         PIC X(5).
       01  lc-err-msg           PIC X(70).
","['A000-error-printscr', 'A0100-append-msg-to-error-file']","Paragraph A000-error-printscr calls paragraph A0100-append-msg-to-error-file.
",84,error-printscr: optional display error messages and save to error log file if environment is set,,,,"The COBOL file is used to append messages to an error log file. It retrieves the current date and time, then writes various pieces of information to the error log file including the date and time, program name, user name, and message text. This allows for easy tracking of errors and their associated messages.","This COBOL file is designed for error handling and logging. It first checks if debugging and error logging are enabled; if so, it prints an error message. The subroutine then calls another routine to append error details, including a timestamp and message, to an error log file. This structured approach ensures errors are both displayed and logged effectively, facilitating debugging and system maintenance.",1.0,1.0,1.0
32,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/cgi-add-user.cbl,"       IDENTIFICATION DIVISION.
       program-id. cgi-add-user.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01   switches-add.
            03  is-db-connected-switch         PIC X   VALUE 'N'.
                88  is-db-connected                    VALUE 'Y'.
            03  is-valid-init-switch           PIC X   VALUE 'N'.
                88  is-valid-init                      VALUE 'Y'.
            03  name-is-in-table-switch        PIC X   VALUE 'N'.
                88  name-is-in-table                   VALUE 'Y'.
            03  is-valid-table-position-switch PIC X   VALUE 'N'.
                88  is-valid-table-position            VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.
       01  wc-pagetitle   PIC X(25) VALUE 'Lägg till användare'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  users-rec-vars.
             05  t-user-id             PIC  9(4) VALUE ZERO.
             05  t-user-firstname      PIC  X(40) VALUE SPACE.
             05  t-user-lastname       PIC  X(40) VALUE SPACE.
             05  t-user-email          PIC  X(40) VALUE SPACE.
             05  t-user-phonenumber    PIC  X(40) VALUE SPACE.
             05  t-user-username       PIC  X(40) VALUE SPACE.
             05  t-user-password       PIC  X(40) VALUE SPACE.
             05  t-user-lastlogin      PIC  X(40) VALUE SPACE.
             05  t-user-usertype-id    PIC  9(9) VALUE ZERO.
             05  t-user-program-id     PIC  9(9) VALUE ZERO.
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
             05  wn-user-id           PIC  9(4) VALUE ZERO.
             05  wc-firstname         PIC  x(40) VALUE SPACE.
             05  wc-lastname          PIC  x(40) VALUE SPACE.
             05  wc-user-email        PIC  x(40) VALUE SPACE.
             05  wc-user-phonenumber  PIC  x(40) VALUE SPACE.
             05  wc-user-username     PIC  x(40) VALUE SPACE.
             05  wc-user-password     PIC  x(40) VALUE SPACE.
             05  wn-user-usertype-id  PIC  9(4) VALUE ZERO.
             05  wn-user-program-id   PIC  9(4) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           SET ENVIRONMENT ""OJ_DBG"" TO ""1""
           SET ENVIRONMENT ""OJ_LOG"" TO ""1""           
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-add-dataitem
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
       .
       A0100-init.
           CALL 'wui-print-header' USING wn-rtn-code
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               PERFORM A0110-init-add-action
           END-IF
       .
       A0110-init-add-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'firstname' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wc-firstname
               SET is-valid-init TO TRUE
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'lastname' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wc-lastname
               SET is-valid-init TO true
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'email' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wc-user-email
               SET is-valid-init TO true
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'phone' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wc-user-phonenumber
               SET is-valid-init TO true
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'username' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wc-user-username
               SET is-valid-init TO true
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'password' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wc-user-password
               SET is-valid-init TO true
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'program' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wn-user-program-id
               SET is-valid-init TO true
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'usertype' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value
           IF wn-rtn-code = ZERO
               MOVE wc-post-value TO wn-user-usertype-id
               SET is-valid-init TO true
           END-IF
       .
       B0100-connect.
           MOVE  ""openjensen""    TO   wc-database
           MOVE  ""jensen""        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username identified BY :wc-passwd
                                            USING :wc-database
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO true
           END-IF
       .
       B0200-add-dataitem.
           PERFORM B0210-does-username-exist
           IF not name-is-in-table
               PERFORM B0220-get-new-row-number
               IF is-valid-table-position
                   PERFORM B0230-add-dataitem-to-table
               END-IF
           ELSE
           MOVE 'det finns redan användare med detta användarnamn'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-username-exist.
           EXEC SQL
             DECLARE cursadduser CURSOR FOR
                 SELECT user_id, user_username
                 FROM tbl_user
           END-EXEC
           EXEC SQL
                OPEN cursadduser
           END-EXEC
           EXEC SQL
               FETCH cursadduser
                   INTO :t-user-id,
                        :t-user-username
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF FUNCTION UPPER-CASE (wc-user-username) =
                  FUNCTION UPPER-CASE (t-user-username)
                        SET name-is-in-table TO true
               END-IF
               EXEC SQL
                   FETCH cursadduser
                       INTO :t-user-id, :t-user-username
               END-EXEC
           END-PERFORM
           IF  sqlstate not = '02000'
                PERFORM Z0100-error-routine
           END-IF
           EXEC SQL
               CLOSE cursadduser
           END-EXEC
       .
       B0220-get-new-row-number.
           EXEC SQL
             DECLARE cursaddid cursor FOR
                 SELECT user_id
                 FROM tbl_user
                 ORDER BY user_id DESC
           END-EXEC
           EXEC SQL
                OPEN cursaddid
           END-EXEC
           EXEC SQL
               FETCH cursaddid
                   INTO :t-user-id
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
               SET is-valid-table-position TO TRUE
               COMPUTE wn-user-id  = t-user-id  + 1
           END-IF
           EXEC SQL
               CLOSE cursaddid
           END-EXEC
           .
       B0230-add-dataitem-to-table.
           EXEC SQL
                SELECT current_timestamp
                INTO :t-user-lastlogin
           END-EXEC
           MOVE wn-user-id TO t-user-id
           MOVE wc-firstname TO t-user-firstname
           MOVE wc-lastname TO t-user-lastname
           MOVE wc-user-email TO t-user-email
           MOVE wc-user-phonenumber TO t-user-phonenumber
           MOVE wc-user-username TO t-user-username
           MOVE wc-user-password TO t-user-password
           MOVE wn-user-usertype-id TO t-user-usertype-id
           MOVE wn-user-program-id TO t-user-program-id
           EXEC SQL
               INSERT INTO tbl_user
               VALUES (:t-user-id, :t-user-firstname,
                       :t-user-lastname, :t-user-email,
                       :t-user-phonenumber, :t-user-username,
                       :t-user-password, :t-user-lastlogin,
                       :t-user-usertype-id, :t-user-program-id)
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0240-commit-work
                MOVE 'användare adderad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string
           END-IF
       .
       B0240-commit-work.
           EXEC SQL
               COMMIT WORK
           END-EXEC
       .
       C0100-closedown.
          CALL 'wui-end-html' USING wn-rtn-code
       .
       Z0100-error-routine.
           EVALUATE SQLSTATE
               WHEN  ""02000""
                   MOVE 'Data återfinns ej i databasen'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""08003""
              WHEN  ""08001""
                   MOVE 'Anslutning till databas misslyckades'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""23503""
                   MOVE 'Kan ej ta bort data - pga tabellberoenden'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string                              
              WHEN  SPACE
                   MOVE 'Obekant fel - kontakta leverantören'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string  
              WHEN  OTHER
                   CALL 'error-printscr' USING SQLSTATE SQLERRMC
           END-EVALUATE
       .
       Z0200-disconnect.
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
       .
","       WORKING-STORAGE SECTION.
       01   switches-add.
            03  is-db-connected-switch         PIC X   VALUE 'N'.
                88  is-db-connected                    VALUE 'Y'.
            03  is-valid-init-switch           PIC X   VALUE 'N'.
                88  is-valid-init                      VALUE 'Y'.
            03  name-is-in-table-switch        PIC X   VALUE 'N'.
                88  name-is-in-table                   VALUE 'Y'.
            03  is-valid-table-position-switch PIC X   VALUE 'N'.
                88  is-valid-table-position            VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.
       01  wc-pagetitle   PIC X(25) VALUE 'Lägg till användare'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  users-rec-vars.
             05  t-user-id             PIC  9(4) VALUE ZERO.
             05  t-user-firstname      PIC  X(40) VALUE SPACE.
             05  t-user-lastname       PIC  X(40) VALUE SPACE.
             05  t-user-email          PIC  X(40) VALUE SPACE.
             05  t-user-phonenumber    PIC  X(40) VALUE SPACE.
             05  t-user-username       PIC  X(40) VALUE SPACE.
             05  t-user-password       PIC  X(40) VALUE SPACE.
             05  t-user-lastlogin      PIC  X(40) VALUE SPACE.
             05  t-user-usertype-id    PIC  9(9) VALUE ZERO.
             05  t-user-program-id     PIC  9(9) VALUE ZERO.
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
             05  wn-user-id           PIC  9(4) VALUE ZERO.
             05  wc-firstname         PIC  x(40) VALUE SPACE.
             05  wc-lastname          PIC  x(40) VALUE SPACE.
             05  wc-user-email        PIC  x(40) VALUE SPACE.
             05  wc-user-phonenumber  PIC  x(40) VALUE SPACE.
             05  wc-user-username     PIC  x(40) VALUE SPACE.
             05  wc-user-password     PIC  x(40) VALUE SPACE.
             05  wn-user-usertype-id  PIC  9(4) VALUE ZERO.
             05  wn-user-program-id   PIC  9(4) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
","['0000-main', 'A0100-init', 'A0110-init-add-action', 'B0100-connect', 'B0200-add-dataitem', 'B0210-does-username-exist', 'B0220-get-new-row-number', 'B0230-add-dataitem-to-table', 'B0240-commit-work', 'C0100-closedown', 'Z0100-error-routine', 'Z0200-disconnect']","Paragraph 0000-main calls paragraph B0100-connect, C0100-closedown, A0100-init, B0200-add-dataitem, Z0200-disconnect.
Paragraph A0100-init calls paragraph A0110-init-add-action.
Paragraph B0100-connect calls paragraph Z0100-error-routine.
Paragraph B0200-add-dataitem calls paragraph B0220-get-new-row-number, B0230-add-dataitem-to-table, B0210-does-username-exist.
Paragraph B0210-does-username-exist calls paragraph Z0100-error-routine.
Paragraph B0220-get-new-row-number calls paragraph Z0100-error-routine.
Paragraph B0230-add-dataitem-to-table calls paragraph Z0100-error-routine, B0240-commit-work.
",293,Add a user to the database.,,"['write-post-string', 'wui-print-header', 'stop-printscr', 'ok-printscr', 'get-post-value', 'wui-end-html', 'wui-start-html']",,"1. This COBOL file is used to add a new user to a database. 
2. It initializes variables and performs various tasks related to adding a new user. 
3. It connects to a database using the EXEC SQL statement and moves the database name, username, and password into variables. 
4. It checks if the username already exists in the table and retrieves the next available user ID if necessary. 
5. It adds the data item to the table and commits the work using the ""COMMIT WORK"" statement. 
6. It handles errors using the EVALUATE statement and calls subroutines to print error messages and write information to log files.","This COBOL program initializes an environment for user registration, connects to a database, and manages data insertion. It begins with page setup, user input retrieval, and connection handling, checking for errors throughout. The username is validated, and if successful, the program retrieves a new user ID before inserting data into the user table. After operations, it commits changes, handles errors, and disconnects cleanly. The structured flow ensures accurate data handling and user management.",1.0,1.0,1
35,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/cgi-add-local.cbl,"       IDENTIFICATION DIVISION.
       program-id. cgi-add-local.
       DATA DIVISION.
       working-storage section.
       01   switches-add.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.
            03  name-is-in-table-switch             PIC X   VALUE 'N'.
                88  name-is-in-table                        VALUE 'Y'.
            03  is-valid-table-position-switch      PIC X   VALUE 'N'.
                88  is-valid-table-position                 VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE. 
       01  wc-pagetitle            PIC X(20) VALUE 'Addera lokal'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.             
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  jlocal-rec-vars.       
           05  jlokal-lokal-id      PIC  9(4).
           05  jlokal-lokalnamn     PIC  X(40).
           05  jlokal-vaningsplan   PIC  X(40).
           05  jlokal-maxdeltagare  PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-lokal-id         PIC  9(4) VALUE ZERO.
           05  wc-lokalnamn        PIC  X(40) VALUE SPACE.
           05  wc-vaningsplan      PIC  X(40) VALUE SPACE.
           05  wc-maxdeltagare     PIC  X(40) VALUE SPACE.     
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           SET ENVIRONMENT ""OJ_DBG"" TO ""1""
           SET ENVIRONMENT ""OJ_LOG"" TO ""1""           
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-add-local
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               PERFORM A0110-init-add-action
           END-IF
           . 
       A0110-init-add-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'local-sign-name' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value                           
           MOVE wc-post-value TO wc-lokalnamn
           IF wc-post-value = SPACE
              MOVE ZERO TO wn-rtn-code
              MOVE SPACE TO wc-post-value
              MOVE 'local-alt-name' TO wc-post-name
              CALL 'get-post-value' USING wn-rtn-code
                                  wc-post-name wc-post-value
              MOVE wc-post-value TO wc-lokalnamn
           END-IF
           IF wc-lokalnamn = SPACE
               MOVE 'Saknar namn på lokal' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           ELSE
               SET is-valid-init TO TRUE
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'plan' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                       wc-post-value                                     
           MOVE wc-post-value TO wc-vaningsplan
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'local-max' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value               
           MOVE wc-post-value TO wc-maxdeltagare       
           . 
       B0100-connect.
           MOVE  ""openjensen""    TO   wc-database
           MOVE  ""jensen""        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-add-local.
           PERFORM B0210-does-local-name-exist
           IF NOT name-is-in-table
               PERFORM B0220-get-new-row-number
               IF is-valid-table-position
                   PERFORM B0230-add-local-to-table
               END-IF
           ELSE
               MOVE 'Denna lokal finns redan upplagd'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-local-name-exist.
           EXEC SQL
             DECLARE cursaddlocal CURSOR FOR
                 SELECT Lokal_id, Lokalnamn
                 FROM T_JLOKAL
           END-EXEC      
           EXEC SQL
                OPEN cursaddlocal
           END-EXEC
           MOVE wc-lokalnamn TO jlokal-lokalnamn
           EXEC SQL
               FETCH cursaddlocal
                   INTO :jlokal-lokal-id, :jlokal-lokalnamn
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF FUNCTION UPPER-CASE (wc-lokalnamn) =
                  FUNCTION UPPER-CASE (jlokal-lokalnamn)
                        SET name-is-in-table TO TRUE
               END-IF
               EXEC SQL
                   FETCH cursaddlocal
                       INTO :jlokal-lokal-id, :jlokal-lokalnamn
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF                 
           EXEC SQL 
               CLOSE cursaddlocal 
           END-EXEC 
           .       
       B0220-get-new-row-number.
           EXEC SQL
             DECLARE cursaddid CURSOR FOR
                 SELECT Lokal_id
                 FROM T_JLOKAL
                 ORDER BY Lokal_id DESC
           END-EXEC   
           EXEC SQL
                OPEN cursaddid
           END-EXEC
           EXEC SQL
               FETCH cursaddid
                   INTO :jlokal-lokal-id
           END-EXEC       
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
               SET is-valid-table-position TO TRUE
               COMPUTE wn-lokal-id = jlokal-lokal-id + 1             
           END-IF
           EXEC SQL 
               CLOSE cursaddid 
           END-EXEC            
           .
       B0230-add-local-to-table.
           MOVE wn-lokal-id TO jlokal-lokal-id
           MOVE wc-lokalnamn TO jlokal-lokalnamn
           MOVE wc-vaningsplan TO jlokal-vaningsplan
           MOVE wc-maxdeltagare TO jlokal-maxdeltagare
           EXEC SQL
               INSERT INTO T_JLOKAL
               VALUES (:jlokal-lokal-id, :jlokal-lokalnamn,
                       :jlokal-vaningsplan, :jlokal-maxdeltagare)
           END-EXEC 
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0240-commit-work
                MOVE 'Lokal adderad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string
           END-IF     
           .
       B0240-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .           
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           EVALUATE SQLSTATE
               WHEN  ""02000""
                   MOVE 'Data återfinns ej i databasen'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""08003""
              WHEN  ""08001""
                   MOVE 'Anslutning till databas misslyckades'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""23503""
                   MOVE 'Kan ej ta bort data - pga tabellberoenden'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string                              
              WHEN  SPACE
                   MOVE 'Obekant fel - kontakta leverantören'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string  
              WHEN  OTHER
                   CALL 'error-printscr' USING SQLSTATE SQLERRMC
           END-EVALUATE
           .
       Z0200-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
","       working-storage section.
       01   switches-add.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.
            03  name-is-in-table-switch             PIC X   VALUE 'N'.
                88  name-is-in-table                        VALUE 'Y'.
            03  is-valid-table-position-switch      PIC X   VALUE 'N'.
                88  is-valid-table-position                 VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE. 
       01  wc-pagetitle            PIC X(20) VALUE 'Addera lokal'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.             
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  jlocal-rec-vars.       
           05  jlokal-lokal-id      PIC  9(4).
           05  jlokal-lokalnamn     PIC  X(40).
           05  jlokal-vaningsplan   PIC  X(40).
           05  jlokal-maxdeltagare  PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-lokal-id         PIC  9(4) VALUE ZERO.
           05  wc-lokalnamn        PIC  X(40) VALUE SPACE.
           05  wc-vaningsplan      PIC  X(40) VALUE SPACE.
           05  wc-maxdeltagare     PIC  X(40) VALUE SPACE.     
       EXEC SQL INCLUDE SQLCA END-EXEC.
","['0000-main', 'A0100-init', 'A0110-init-add-action', 'B0100-connect', 'B0200-add-local', 'B0210-does-local-name-exist', 'B0220-get-new-row-number', 'B0230-add-local-to-table', 'B0240-commit-work', 'C0100-closedown', 'Z0100-error-routine', 'Z0200-disconnect']","Paragraph 0000-main calls paragraph B0100-connect, B0200-add-local, C0100-closedown, A0100-init, Z0200-disconnect.
Paragraph A0100-init calls paragraph A0110-init-add-action.
Paragraph B0100-connect calls paragraph Z0100-error-routine.
Paragraph B0200-add-local calls paragraph B0210-does-local-name-exist, B0220-get-new-row-number, B0230-add-local-to-table.
Paragraph B0210-does-local-name-exist calls paragraph Z0100-error-routine.
Paragraph B0220-get-new-row-number calls paragraph Z0100-error-routine.
Paragraph B0230-add-local-to-table calls paragraph Z0100-error-routine, B0240-commit-work.
",230,"cgi-add-local: adds user data related to a local, saves into table T_JLOKAL",,"['write-post-string', 'wui-print-header', 'stop-printscr', 'ok-printscr', 'get-post-value', 'wui-end-html', 'wui-start-html']",,"1. The COBOL file is a program that connects to a database and performs various operations such as initializing variables, reading data from an input file, and performing calculations.

2. The program uses the GET-POST-VALUE function to retrieve data from an input file and store it in variables. It also checks if the retrieved data is valid and sets a flag accordingly.

3. The program also includes subroutines for handling errors, connecting to the database, adding locals to a table, and disconnecting from the database.

4. The program uses the EXEC SQL statement to connect to the database with the specified username and password. If the connection is successful, it sets the is-db-connected flag to true. Otherwise, it calls the Z0100-error-routine subroutine to handle the error.","This COBOL program initializes its environment, connects to a database, adds new local entries, and handles errors throughout the process. It begins with variable initialization and checks for valid inputs, then connects to the database and verifies local names. Upon confirming validity, it retrieves a new row number and adds the entry to the table, committing changes. Finally, it gracefully closes the connection and handles any errors encountered during execution.",0.5,1.0,1.0
36,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/cgi-list-betygelev.cbl,"       IDENTIFICATION DIVISION.
       program-id. cgi-list-betygelev.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.
           SELECT fileout ASSIGN TO
              '../data/betyg-elev.txt'
              ORGANIZATION IS LINE SEQUENTIAL.
           SELECT OPTIONAL statusfile
              ASSIGN TO
              '../data/status'             
              ORGANIZATION IS LINE SEQUENTIAL.  
       DATA DIVISION.
       file section.
       FD  fileout.
       01  fd-fileout-post. 
           03  fc-course-name             PIC X(40).
           03  fc-sep-1                   PIC X.      
           03  fc-course-start            PIC X(10).
           03  fc-sep-2                   PIC X.           
           03  fc-course-end              PIC X(10).
           03  fc-sep-3                   PIC X.     
           03  fc-grade                   PIC X(40).    
           03  fc-sep-4                   PIC X.      
           03  fc-grade-comment           PIC X(40).
           03  fc-sep-5                   PIC X.      
           03  fc-magic-number            PIC X(40).
       FD  statusfile.
       01  fd-fileout-status         PIC  X(1) VALUE SPACE.           
       working-storage section.
       01   switches.
            03  is-db-connected-switch      PIC X   VALUE 'N'.
                88  is-db-connected                 VALUE 'Y'.
            03  is-valid-init-switch        PIC X   VALUE 'N'.
                88  is-valid-init                   VALUE 'Y'.
            03  is-grade-done-switch        PIC X   VALUE 'N'.
                88  is-grade-done                   VALUE 'Y'.
            03  is-sql-error-switch         PIC X   VALUE 'N'.
                88  is-sql-error                    VALUE 'Y'.
       01  sub-init-swithes.        
            03  is-valid-init-user-switch   PIC X   VALUE 'N'.
                88  is-valid-init-user              VALUE 'Y'.
            03  is-valid-init-program-witch PIC X   VALUE 'N'.
                88  is-valid-init-program           VALUE 'Y'.
            03  is-valid-init-magic-switch  PIC X   VALUE 'N'.
                88  is-valid-init-magic             VALUE 'Y'.                
       01   tbl-grade                         VALUE ZERO.
            03 grade OCCURS 25 TIMES.
                05  wn-tbl-user-id          PIC  9(4).
       01   wn-tbl-cnt                      PIC  9(2) VALUE ZERO.                   
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.   
       01  wc-pagetitle            PIC X(20) VALUE 'Lista kurser'.
           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
           EXEC SQL END DECLARE SECTION END-EXEC.       
           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-cource-record.       
           05  tbl_course-course_id        PIC  9(4).
           05  tbl_course-course_name      PIC  X(40).
           05  tbl_course-course_startdate PIC  X(10).
           05  tbl_course-course_enddate   PIC  X(10).
           05  tbl_course-program_id       PIC  9(4).           
       01  wr-course-record.
           05  wn-course_id          PIC  9(4)  VALUE ZERO.          
           05  wc-course_name        PIC  X(40) VALUE SPACE.
           05  wc-course_startdate   PIC  X(10) VALUE SPACE.
           05  wc-course_enddate     PIC  X(10) VALUE SPACE.
           05  wn-course-program_id  PIC  9(4)  VALUE ZERO.  
       01  tbl-grade-record.       
           05  tbl_grade-grade_id         PIC  9(4).
           05  tbl_grade-grade_grade      PIC  X(40).
           05  tbl_grade-grade_comment    PIC  X(40).
           05  tbl_grade-user_id          PIC  9(4).
           05  tbl_grade-course_id        PIC  9(4).             
       01  wr-grade-record.
           05  wn-grade_id           PIC  9(4)  VALUE ZERO.          
           05  wc-grade_grade        PIC  X(40) VALUE SPACE.
           05  wc-grade_comment      PIC  X(40) VALUE SPACE.
           05  wn-grade-user_id      PIC  9(4)  VALUE ZERO.
           05  wn-grade-course_id    PIC  9(4)  VALUE ZERO. 
           EXEC SQL END DECLARE SECTION END-EXEC.    
           EXEC SQL INCLUDE SQLCA END-EXEC.
       01 wn-user_id                 PIC  9(4) VALUE ZERO.
       01 wn-program_id              PIC  9(4) VALUE ZERO.
       01 wc-magic-number              PIC  X(40) VALUE SPACE.
       01 wc-file-name               PIC  X(60) VALUE SPACE.
       01 wc-dest-path               PIC  X(80) VALUE SPACE.
       01 WC-NO-SQLVALUE-TO-PHP      PIC X(1)  VALUE '-'.   
       PROCEDURE DIVISION.
       0000-main.
           SET ENVIRONMENT ""OJ_DBG"" TO ""1""
           SET ENVIRONMENT ""OJ_LOG"" TO ""1""           
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-list-elev-betyg
                    PERFORM B0300-disconnect
                END-IF
           ELSE
                MOVE 'Kunde ej läsa POST data' TO wc-printscr-string
                CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'user_program' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                           wc-post-name wc-post-value
               IF wc-post-value NOT = SPACE
                   SET is-valid-init-program TO TRUE
                   MOVE FUNCTION NUMVAL(wc-post-value) TO wn-program_id
               END-IF                            
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'user_id' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                           wc-post-name wc-post-value
               IF wc-post-value NOT = SPACE
                   SET is-valid-init-user TO TRUE
                   MOVE FUNCTION NUMVAL(wc-post-value) TO wn-user_id
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'magic_number' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                           wc-post-name wc-post-value
               IF wc-post-value NOT = SPACE
                   SET is-valid-init-magic TO TRUE                                                      
                   MOVE wc-post-value TO wc-magic-number               
               END-IF
               IF is-valid-init-program AND is-valid-init-user AND
                  is-valid-init-magic
                  SET is-valid-init TO TRUE
                  OPEN OUTPUT fileout
               END-IF   
           END-IF
           .
       B0100-connect.
           MOVE  ""openjensen""    TO   wc-database.
           MOVE  ""jensen""        TO   wc-username.
           MOVE  SPACE           TO   wc-passwd.
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-list-elev-betyg.
           PERFORM B0210-process-given-grades
           PERFORM B0250-process-all-programs
           .
       B0210-process-given-grades.
           MOVE wn-user_id TO wn-grade-user_id
           MOVE ZERO TO wn-tbl-cnt
           EXEC SQL 
               DECLARE cursgrade CURSOR FOR
               SELECT g.course_id, c.course_name, 
                      c.course_startdate, c.course_enddate,
                      g.grade_grade, g.grade_comment
                      FROM tbl_course c
                      INNER JOIN tbl_grade g
                      ON c.course_id = g.course_id
                      AND g.user_id = :wn-grade-user_id
           END-EXEC
           EXEC SQL
               OPEN cursgrade
           END-EXEC
           EXEC SQL 
                FETCH cursgrade INTO :tbl_grade-course_id,
                                     :tbl_course-course_name,
                                     :tbl_course-course_startdate,
                                     :tbl_course-course_enddate,
                                     :tbl_grade-grade_grade,
                                     :tbl_grade-grade_comment
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
              MOVE  tbl_grade-course_id TO wn-grade-course_id
              MOVE  tbl_course-course_name TO wc-course_name
              MOVE  tbl_course-course_startdate TO wc-course_startdate
              MOVE  tbl_course-course_enddate TO wc-course_enddate
              MOVE  tbl_grade-grade_grade TO wc-grade_grade
              MOVE  tbl_grade-grade_comment TO wc-grade_comment
              PERFORM B0220-write-grade-row
              INITIALIZE wr-grade-record
               EXEC SQL 
                FETCH cursgrade INTO :tbl_course-course_name,
                                     :tbl_course-course_startdate,
                                     :tbl_course-course_enddate,
                                     :tbl_grade-grade_grade,
                                     :tbl_grade-grade_comment
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF              
           EXEC SQL 
               CLOSE cursgrade 
           END-EXEC
           .
       B0220-write-grade-row.            
           MOVE wc-course_name TO fc-course-name
           MOVE ',' TO fc-sep-1
           MOVE wc-course_startdate TO fc-course-start
           MOVE ',' TO fc-sep-2           
           MOVE wc-course_enddate TO fc-course-end
           MOVE ',' TO fc-sep-3           
           MOVE wc-grade_grade TO fc-grade
           MOVE ',' TO fc-sep-4           
           MOVE wc-grade_comment TO fc-grade-comment
           MOVE ',' TO fc-sep-5           
           MOVE wc-magic-number TO fc-magic-number             
           ADD 1 TO wn-tbl-cnt
           MOVE wn-grade-course_id TO wn-tbl-user-id(wn-tbl-cnt)
           WRITE fd-fileout-post
           .    
       B0250-process-all-programs.
           MOVE wn-program_id TO wn-course-program_id
           EXEC SQL 
               DECLARE cursprog CURSOR FOR
               SELECT course_id, course_name, course_startdate,
                      course_enddate
               FROM tbl_course
               WHERE program_id = :wn-course-program_id
           END-EXEC
           EXEC SQL
               OPEN cursprog
           END-EXEC
           EXEC SQL 
               FETCH cursprog INTO :tbl_course-course_id,
                                   :tbl_course-course_name,
                                   :tbl_course-course_startdate,
                                   :tbl_course-course_enddate
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
              MOVE  tbl_course-course_id TO wn-course_id              
              MOVE  tbl_course-course_name TO wc-course_name
              MOVE  tbl_course-course_startdate TO wc-course_startdate
              MOVE  tbl_course-course_enddate TO wc-course_enddate
              PERFORM B0260-write-program-row
              INITIALIZE wr-course-record
               EXEC SQL 
                    FETCH cursprog INTO :tbl_course-course_id,
                                        :tbl_course-course_name,
                                        :tbl_course-course_startdate,
                                        :tbl_course-course_enddate
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF              
           EXEC SQL 
               CLOSE cursprog 
           END-EXEC 
           .
       B0260-write-program-row.            
           MOVE 1 TO wn-tbl-cnt
           PERFORM WITH TEST AFTER
               VARYING wn-tbl-cnt FROM 1 BY 1
               UNTIL wn-tbl-cnt >= 25 OR is-grade-done
               IF wn-tbl-user-id(wn-tbl-cnt) = wn-course_id
                   SET is-grade-done TO TRUE
               END-IF
           END-PERFORM
           IF NOT is-grade-done
               MOVE wc-course_name TO fc-course-name
               MOVE ',' TO fc-sep-1
               MOVE wc-course_startdate TO fc-course-start
               MOVE ',' TO fc-sep-2           
               MOVE wc-course_enddate TO fc-course-end
               MOVE ',' TO fc-sep-3           
               MOVE WC-NO-SQLVALUE-TO-PHP TO fc-grade
               MOVE ',' TO fc-sep-4           
               MOVE WC-NO-SQLVALUE-TO-PHP TO fc-grade-comment
               MOVE ',' TO fc-sep-5           
               MOVE wc-magic-number TO fc-magic-number               
               WRITE fd-fileout-post
           END-IF
           MOVE 'N' TO is-grade-done-switch
           .                
       B0300-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           IF NOT is-sql-error
               PERFORM Z0200-write-status-ok-file
           END-IF
           CLOSE fileout
           .
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           SET is-sql-error TO TRUE
           EVALUATE SQLSTATE
               WHEN  ""02000""
                   MOVE 'Data återfinns ej i databasen'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""08003""
              WHEN  ""08001""
                   MOVE 'Anslutning till databas misslyckades'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""23503""
                   MOVE 'Kan ej ta bort data - pga tabellberoenden'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string                              
              WHEN  SPACE
                   MOVE 'Obekant fel - kontakta leverantören'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string  
              WHEN  OTHER
                   CALL 'error-printscr' USING SQLSTATE SQLERRMC
           END-EVALUATE
           .
       Z0200-write-status-ok-file.
           MOVE wc-magic-number TO wc-file-name
           OPEN EXTEND statusfile           
           CLOSE statusfile
           MOVE SPACE TO wc-dest-path    
           STRING '../data/'   DELIMITED BY SPACE
              wc-file-name DELIMITED BY SPACE 
                      '.'  DELIMITED BY SPACE
                      'OK' DELIMITED BY SPACE
                      INTO wc-dest-path
                      ON OVERFLOW
                      MOVE 'Filnamn för långt' TO wc-printscr-string
                      CALL 'stop-printscr' USING wc-printscr-string
                      NOT ON OVERFLOW
                         CONTINUE
           END-STRING                   
           CALL 'C$COPY' USING '../data/status', wc-dest-path, 0
           CALL 'C$DELETE' USING '../data/status', 0           
           .           
","       file section.
       FD  fileout.
       01  fd-fileout-post. 
           03  fc-course-name             PIC X(40).
           03  fc-sep-1                   PIC X.      
           03  fc-course-start            PIC X(10).
           03  fc-sep-2                   PIC X.           
           03  fc-course-end              PIC X(10).
           03  fc-sep-3                   PIC X.     
           03  fc-grade                   PIC X(40).    
           03  fc-sep-4                   PIC X.      
           03  fc-grade-comment           PIC X(40).
           03  fc-sep-5                   PIC X.      
           03  fc-magic-number            PIC X(40).
       FD  statusfile.
       01  fd-fileout-status         PIC  X(1) VALUE SPACE.           
       working-storage section.
       01   switches.
            03  is-db-connected-switch      PIC X   VALUE 'N'.
                88  is-db-connected                 VALUE 'Y'.
            03  is-valid-init-switch        PIC X   VALUE 'N'.
                88  is-valid-init                   VALUE 'Y'.
            03  is-grade-done-switch        PIC X   VALUE 'N'.
                88  is-grade-done                   VALUE 'Y'.
            03  is-sql-error-switch         PIC X   VALUE 'N'.
                88  is-sql-error                    VALUE 'Y'.
       01  sub-init-swithes.        
            03  is-valid-init-user-switch   PIC X   VALUE 'N'.
                88  is-valid-init-user              VALUE 'Y'.
            03  is-valid-init-program-witch PIC X   VALUE 'N'.
                88  is-valid-init-program           VALUE 'Y'.
            03  is-valid-init-magic-switch  PIC X   VALUE 'N'.
                88  is-valid-init-magic             VALUE 'Y'.                
       01   tbl-grade                         VALUE ZERO.
            03 grade OCCURS 25 TIMES.
                05  wn-tbl-user-id          PIC  9(4).
       01   wn-tbl-cnt                      PIC  9(2) VALUE ZERO.                   
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.   
       01  wc-pagetitle            PIC X(20) VALUE 'Lista kurser'.
           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
           EXEC SQL END DECLARE SECTION END-EXEC.       
           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-cource-record.       
           05  tbl_course-course_id        PIC  9(4).
           05  tbl_course-course_name      PIC  X(40).
           05  tbl_course-course_startdate PIC  X(10).
           05  tbl_course-course_enddate   PIC  X(10).
           05  tbl_course-program_id       PIC  9(4).           
       01  wr-course-record.
           05  wn-course_id          PIC  9(4)  VALUE ZERO.          
           05  wc-course_name        PIC  X(40) VALUE SPACE.
           05  wc-course_startdate   PIC  X(10) VALUE SPACE.
           05  wc-course_enddate     PIC  X(10) VALUE SPACE.
           05  wn-course-program_id  PIC  9(4)  VALUE ZERO.  
       01  tbl-grade-record.       
           05  tbl_grade-grade_id         PIC  9(4).
           05  tbl_grade-grade_grade      PIC  X(40).
           05  tbl_grade-grade_comment    PIC  X(40).
           05  tbl_grade-user_id          PIC  9(4).
           05  tbl_grade-course_id        PIC  9(4).             
       01  wr-grade-record.
           05  wn-grade_id           PIC  9(4)  VALUE ZERO.          
           05  wc-grade_grade        PIC  X(40) VALUE SPACE.
           05  wc-grade_comment      PIC  X(40) VALUE SPACE.
           05  wn-grade-user_id      PIC  9(4)  VALUE ZERO.
           05  wn-grade-course_id    PIC  9(4)  VALUE ZERO. 
           EXEC SQL END DECLARE SECTION END-EXEC.    
           EXEC SQL INCLUDE SQLCA END-EXEC.
       01 wn-user_id                 PIC  9(4) VALUE ZERO.
       01 wn-program_id              PIC  9(4) VALUE ZERO.
       01 wc-magic-number              PIC  X(40) VALUE SPACE.
       01 wc-file-name               PIC  X(60) VALUE SPACE.
       01 wc-dest-path               PIC  X(80) VALUE SPACE.
       01 WC-NO-SQLVALUE-TO-PHP      PIC X(1)  VALUE '-'.   
","['0000-main', 'A0100-init', 'B0100-connect', 'B0200-list-elev-betyg', 'B0210-process-given-grades', 'B0220-write-grade-row', 'B0250-process-all-programs', 'B0260-write-program-row', 'B0300-disconnect', 'C0100-closedown', 'Z0100-error-routine', 'Z0200-write-status-ok-file']","Paragraph 0000-main calls paragraph B0100-connect, B0300-disconnect, B0200-list-elev-betyg, C0100-closedown, A0100-init.
Paragraph B0100-connect calls paragraph Z0100-error-routine.
Paragraph B0200-list-elev-betyg calls paragraph B0250-process-all-programs, B0210-process-given-grades.
Paragraph B0210-process-given-grades calls paragraph Z0100-error-routine, B0220-write-grade-row.
Paragraph B0250-process-all-programs calls paragraph B0260-write-program-row, Z0100-error-routine.
Paragraph B0300-disconnect calls paragraph Z0200-write-status-ok-file.
",352,cgi-list-betygelev: fetch a list of student courses within his program and his grades from table tbl_course and tbl_grade and writes the results back to file.,,"['C$DELETE', 'write-post-string', 'wui-print-header', 'stop-printscr', 'get-post-value', 'wui-end-html', 'C$COPY', 'wui-start-html']",,"1. This COBOL file is designed to perform various tasks related to closing down operations. It initializes variables, reads input from the environment, and opens output files. It also closes the ""postfileout"" file before the program exits.

2. The code checks if the user has provided valid input for the initialization process and sets flags accordingly. If all the required inputs are valid, the code sets a flag to indicate that the initialization process is complete.

3. The code then proceeds to open an output file using the OPEN OUTPUT statement.

4. The code inside <CODE> and </CODE> is part of a larger COBOL program that performs various tasks related to closing down operations.

5. The code initializes variables, reads input from the environment, and opens output files.

6. It also closes the ""postfileout"" file before the program exits.

7. The code checks if the user has provided valid input for the initialization process and sets flags accordingly.

8. If all the required inputs are valid, the code sets a flag to indicate that the initialization process is complete.

9. The code then proceeds to open an output file using the OPEN OUTPUT statement.","This COBOL program initializes an environment and handles database operations related to listing grades. It checks for valid inputs, connects to a database, and processes grades and programs through various subroutines while handling errors appropriately. The program lists each grade and program, writes them to an output file, and ensures a proper disconnect from the database, culminating in a finalization of the HTML output. Throughout, error routines manage potential issues, maintaining robustness.",1.0,1.0,1
45,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/ok-printscr.cbl,"       IDENTIFICATION DIVISION.
       program-id. ok-printscr IS INITIAL.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.
       01  wc-debug         PIC X(40) VALUE SPACE.
       linkage section.
       01  lc-string        PIC X(40).
       PROCEDURE DIVISION USING lc-string.
       000-ok-printscr.
           ACCEPT wc-debug FROM ENVIRONMENT 'OJ_DBG'
           IF wc-debug = '1'
               DISPLAY '<br>OK: ' lc-string
           END-IF
           EXIT PROGRAM
           .
","       working-storage section.
       01  wc-debug         PIC X(40) VALUE SPACE.
       linkage section.
       01  lc-string        PIC X(40).
",['000-ok-printscr'],,17,ok-printscr: optional display ok messages if environment is set,,,,"1. This COBOL file is used for processing data related to customer orders. It includes various paragraphs for inputting, calculating, and outputting information.

2. The ""INPUT-PARAGRAPH"" is responsible for reading data from an external source, such as a file or user input. It initializes variables and performs validation checks on the input data.

3. The ""CALCULATION-PARAGRAPH"" contains the main logic of the program. It calculates various values based on the input data and performs any necessary transformations.

4. The ""OUTPUT-PARAGRAPH"" generates reports or other output formats based on the calculated results. It writes the output to a specified location or device.

5. The ""EXIT-PARAGRAPH"" finalizes the program and performs any necessary cleanup tasks before exiting.

6. The ""MAIN-PROGRAM"" paragraph serves as the entry point of the program. It calls the other paragraphs in the appropriate sequence and handles any errors that may occur during execution.","This COBOL code checks if the environment variable OJ_DBG is set to 1. If it is, it displays the value of the lc-string variable. Then it exits the program.",1.0,1.0,na
49,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/cgi-edit-user.cbl,"       IDENTIFICATION DIVISION.
       program-id. cgi-edit-user.
       DATA DIVISION.
       working-storage section.
       01   switches-edit.
            03  is-db-connected-switch              PIC X  VALUE 'N'.
                88  is-db-connected                        VALUE 'Y'.
            03  is-valid-init-switch                PIC X  VALUE 'N'.
                88  is-valid-init                          VALUE 'Y'.
            03  is-id-in-table-switch               PIC X  VALUE 'N'.
                88  is-id-in-table                         VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.
       01  wc-pagetitle        PIC X(20) VALUE 'Uppdatera användare'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  users-rec-vars.
             05  t-user-id             PIC  9(4) VALUE ZERO.
             05  t-user-firstname      PIC  X(40) VALUE SPACE.
             05  t-user-lastname       PIC  X(40) VALUE SPACE.
             05  t-user-email          PIC  X(40) VALUE SPACE.
             05  t-user-phonenumber    PIC  X(40) VALUE SPACE.
             05  t-user-username       PIC  X(40) VALUE SPACE.
             05  t-user-password       PIC  X(40) VALUE SPACE.
             05  t-user-lastlogin      PIC  X(40) VALUE SPACE.
             05  t-user-program-id     PIC  9(9) VALUE ZERO.
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-users-rec-vars.
             05  wn-user-id            PIC  9(4) VALUE ZERO.
             05  wc-user-firstname     PIC  X(40) VALUE SPACE.
             05  wc-user-lastname      PIC  X(40) VALUE SPACE.
             05  wc-user-email         PIC  X(40) VALUE SPACE.
             05  wc-user-phonenumber   PIC  X(40) VALUE SPACE.
             05  wc-user-username      PIC  X(40) VALUE SPACE.
             05  wc-user-password      PIC  X(40) VALUE SPACE.
             05  wc-user-lastlogin     PIC  X(40) VALUE SPACE.
             05  wn-user-program-id    PIC  9(9) VALUE ZERO.
       01  wr-cur-rec-vars.
             05  wn-cur-user-id           PIC  9(4) VALUE ZERO.
             05  wc-cur-user-firstname    PIC  X(40) VALUE SPACE.
             05  wc-cur-user-lastname     PIC  X(40) VALUE SPACE.
             05  wc-cur-user-email        PIC  X(40) VALUE SPACE.
             05  wc-cur-user-phonenumber  PIC  X(40) VALUE SPACE.
             05  wc-cur-user-username     PIC  X(40) VALUE SPACE.
             05  wc-cur-user-password     PIC  X(40) VALUE SPACE.
             05  wc-cur-user-lastlogin    PIC  X(40) VALUE SPACE.
             05  wn-cur-user-program-id   PIC  9(9) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           SET ENVIRONMENT ""OJ_DBG"" TO ""1""
           SET ENVIRONMENT ""OJ_LOG"" TO ""1""           
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-edit-dataitem
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.
           CALL 'wui-print-header' USING wn-rtn-code
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
                PERFORM A0110-init-edit-action
           END-IF
           .
       A0110-init-edit-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'user_id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                               wc-post-name wc-post-value
           MOVE FUNCTION NUMVAL(wc-post-value) TO wn-user-id
           IF wc-post-value = SPACE
               MOVE 'Saknar ett angivet användar id'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           ELSE
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'firstname' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-firstname
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'lastname' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-lastname
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'email' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-email
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'phone' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-phonenumber
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'username' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-username
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'password' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-password
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'program' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE function numval(wc-post-value)
                        TO wn-user-program-id
                   SET is-valid-init TO true
               END-IF
           END-IF
           .
       B0100-connect.
           MOVE  ""openjensen""    TO   wc-database
           MOVE  ""jensen""        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                            USING :wc-database
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF
           .
       B0200-edit-dataitem.
           PERFORM B0210-does-id-exist
           IF is-id-in-table
               PERFORM B0220-change-dataitem
           ELSE
               MOVE 'Denna användare finns ej'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-id-exist.
           EXEC SQL
            SELECT user_id,
                   user_firstname,
                   user_lastname,
                   user_email,
                   user_phonenumber,
                   user_username,
                   user_password,
                   user_program
             INTO :t-user-id,
                  :t-user-firstname,
                  :t-user-lastname,
                  :t-user-email,
                  :t-user-phonenumber,
                  :t-user-username,
                  :t-user-password,
                  :t-user-program-id
             FROM tbl_user
             WHERE user_id = :wn-user-id
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                IF wn-user-id = t-user-id
                     SET is-id-in-table TO TRUE
                MOVE t-user-id TO wn-cur-user-id
                MOVE t-user-firstname TO wc-cur-user-firstname
                MOVE t-user-lastname TO wc-cur-user-lastname
                MOVE t-user-email TO wc-cur-user-email
                MOVE t-user-phonenumber TO wc-cur-user-phonenumber
                MOVE t-user-username TO wc-cur-user-username
                MOVE t-user-password TO wc-cur-user-password
                MOVE t-user-program-id TO wn-cur-user-program-id
           END-IF
           .
       B0220-change-dataitem.
           IF wc-user-firstname NOT = wc-cur-user-firstname
                MOVE wc-user-firstname TO t-user-firstname
           ELSE
                MOVE wc-cur-user-firstname TO t-user-firstname
           END-IF
           IF wc-user-lastname NOT = wc-cur-user-lastname
                MOVE wc-user-lastname TO t-user-lastname
           ELSE
                MOVE wc-cur-user-lastname TO t-user-lastname
           END-IF
           IF wc-user-email NOT = wc-cur-user-email
                MOVE wc-user-email TO t-user-email
           ELSE
                MOVE wc-cur-user-email TO t-user-email
           END-IF
           IF wc-user-phonenumber NOT = wc-cur-user-phonenumber
                MOVE wc-user-phonenumber TO t-user-phonenumber
           ELSE
                MOVE wc-cur-user-phonenumber TO t-user-phonenumber
           END-IF
           IF wc-user-username NOT = wc-cur-user-username
                MOVE wc-user-username TO t-user-username
           ELSE
                MOVE wc-cur-user-username TO t-user-username
           END-IF
           IF wc-user-password NOT = wc-cur-user-password
                MOVE wc-user-password TO t-user-password
           ELSE
                MOVE wc-cur-user-password TO t-user-password
           END-IF
           IF wn-user-program-id NOT = wn-cur-user-program-id
                MOVE wn-user-program-id TO t-user-program-id
           ELSE
                MOVE wn-cur-user-program-id TO t-user-program-id
           END-IF
           MOVE wn-user-id TO t-user-id
           EXEC SQL
               UPDATE tbl_user
                SET
                    user_firstname = :t-user-firstname,
                    user_lastname = :t-user-lastname,
                    user_email = :t-user-email,
                    user_phonenumber = :t-user-phonenumber,
                    user_username = :t-user-username,
                    user_password = :t-user-password,
                    user_program = :t-user-program-id
               WHERE user_id = :t-user-id
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0230-commit-work
                MOVE 'Användaren ändrad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string
           END-IF
           .
       B0230-commit-work.
           EXEC SQL
               COMMIT WORK
           END-EXEC
           .
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code
           .
       Z0100-error-routine.
           EVALUATE SQLSTATE
               WHEN  ""02000""
                   MOVE 'Data återfinns ej i databasen'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""08003""
              WHEN  ""08001""
                   MOVE 'Anslutning till databas misslyckades'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""23503""
                   MOVE 'Kan ej ta bort data - pga tabellberoenden'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string                              
              WHEN  SPACE
                   MOVE 'Obekant fel - kontakta leverantören'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string  
              WHEN  OTHER
                   CALL 'error-printscr' USING SQLSTATE SQLERRMC
           END-EVALUATE
           .
       Z0200-disconnect.
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
","       working-storage section.
       01   switches-edit.
            03  is-db-connected-switch              PIC X  VALUE 'N'.
                88  is-db-connected                        VALUE 'Y'.
            03  is-valid-init-switch                PIC X  VALUE 'N'.
                88  is-valid-init                          VALUE 'Y'.
            03  is-id-in-table-switch               PIC X  VALUE 'N'.
                88  is-id-in-table                         VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.
       01  wc-pagetitle        PIC X(20) VALUE 'Uppdatera användare'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  users-rec-vars.
             05  t-user-id             PIC  9(4) VALUE ZERO.
             05  t-user-firstname      PIC  X(40) VALUE SPACE.
             05  t-user-lastname       PIC  X(40) VALUE SPACE.
             05  t-user-email          PIC  X(40) VALUE SPACE.
             05  t-user-phonenumber    PIC  X(40) VALUE SPACE.
             05  t-user-username       PIC  X(40) VALUE SPACE.
             05  t-user-password       PIC  X(40) VALUE SPACE.
             05  t-user-lastlogin      PIC  X(40) VALUE SPACE.
             05  t-user-program-id     PIC  9(9) VALUE ZERO.
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-users-rec-vars.
             05  wn-user-id            PIC  9(4) VALUE ZERO.
             05  wc-user-firstname     PIC  X(40) VALUE SPACE.
             05  wc-user-lastname      PIC  X(40) VALUE SPACE.
             05  wc-user-email         PIC  X(40) VALUE SPACE.
             05  wc-user-phonenumber   PIC  X(40) VALUE SPACE.
             05  wc-user-username      PIC  X(40) VALUE SPACE.
             05  wc-user-password      PIC  X(40) VALUE SPACE.
             05  wc-user-lastlogin     PIC  X(40) VALUE SPACE.
             05  wn-user-program-id    PIC  9(9) VALUE ZERO.
       01  wr-cur-rec-vars.
             05  wn-cur-user-id           PIC  9(4) VALUE ZERO.
             05  wc-cur-user-firstname    PIC  X(40) VALUE SPACE.
             05  wc-cur-user-lastname     PIC  X(40) VALUE SPACE.
             05  wc-cur-user-email        PIC  X(40) VALUE SPACE.
             05  wc-cur-user-phonenumber  PIC  X(40) VALUE SPACE.
             05  wc-cur-user-username     PIC  X(40) VALUE SPACE.
             05  wc-cur-user-password     PIC  X(40) VALUE SPACE.
             05  wc-cur-user-lastlogin    PIC  X(40) VALUE SPACE.
             05  wn-cur-user-program-id   PIC  9(9) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
","['0000-main', 'A0100-init', 'A0110-init-edit-action', 'B0100-connect', 'B0200-edit-dataitem', 'B0210-does-id-exist', 'B0220-change-dataitem', 'B0230-commit-work', 'C0100-closedown', 'Z0100-error-routine', 'Z0200-disconnect']","Paragraph 0000-main calls paragraph B0100-connect, B0200-edit-dataitem, C0100-closedown, A0100-init, Z0200-disconnect.
Paragraph A0100-init calls paragraph A0110-init-edit-action.
Paragraph B0100-connect calls paragraph Z0100-error-routine.
Paragraph B0200-edit-dataitem calls paragraph B0220-change-dataitem, B0210-does-id-exist.
Paragraph B0210-does-id-exist calls paragraph Z0100-error-routine.
Paragraph B0220-change-dataitem calls paragraph Z0100-error-routine, B0230-commit-work.
",309,Add a user to the database.,,"['write-post-string', 'wui-print-header', 'stop-printscr', 'ok-printscr', 'get-post-value', 'wui-end-html', 'wui-start-html']",,"1. The COBOL file is a program that initializes variables and reads data from an input file. It also connects to a database and updates records in a table.

2. The program first checks if the user ID is valid and then retrieves various user information from the input file. If any of the required information is missing or invalid, it sets a flag to indicate that the initialization process is not complete.

3. The program then connects to a database using the EXEC SQL statement. It moves the database name, username, and password into variables and attempts to connect to the database using these credentials. If the connection is successful, it sets the variable is-db-connected to TRUE. If there is an error during the connection process, it calls the subroutine Z0100-error-routine.

4. The program also contains a subroutine named Z0100-error-routine that handles database errors. It evaluates the SQLSTATE value returned by a database operation and performs different actions based on the value. For example, if the SQLSTATE value is ""07001"", it moves an error message into the variable WC-PRINTSCR-STRING and calls the subroutine STOP-PRINTSCR.

5. The program also includes a subroutine named Z0900-get-program-id that retrieves the program ID from the database table tbl_program. If the program ID is found, it moves the program information from the database record into working storage variables for later use. If the program ID is not found, it calls an error handling routine.","This COBOL program initializes an environment, connects to a database, edits user data, and safely disconnects. It starts by initializing with subroutines and checks the return codes. It connects using credentials and handles errors, then verifies user ID existence before updating data. If an update is needed, it modifies the data and commits the changes. The program concludes by closing resources and managing any errors that arise during these processes.",1.0,1.0,1.0
51,debinix_openjensen,X-COBOL/X-COBOL/COBOL_Files/debinix_openjensen/cgi-add-betyg.cbl,"       IDENTIFICATION DIVISION.
       program-id. cgi-add-betyg.
       DATA DIVISION.
       working-storage section.
       01   switches-add.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.
            03  grade-is-in-table-switch            PIC X   VALUE 'N'.
                88  grade-is-in-table                       VALUE 'Y'.
            03  is-valid-table-position-switch      PIC X   VALUE 'N'.
                88  is-valid-table-position                 VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE. 
       01  wc-pagetitle            PIC X(20) VALUE 'Addera lokal'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.             
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-grade-rec-vars.       
           05  tbl-grade-grade-id        PIC  9(4).
           05  tbl-grade-grade-grade     PIC  X(40).
           05  tbl-grade-grade-comment   PIC  X(40).
           05  tbl-grade-user-id         PIC  9(4).
           05  tbl-grade-course-id       PIC  9(4).           
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-grade-grade-id         PIC  9(4) VALUE ZERO.
           05  wc-grade-grade-grade      PIC  X(40) VALUE SPACE.
           05  wc-grade-grade-comment    PIC  X(40) VALUE SPACE.
           05  wn-grade-user-id          PIC  9(4) VALUE ZERO.
           05  wn-grade-course-id        PIC  9(4) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           SET ENVIRONMENT ""OJ_DBG"" TO ""1""
           SET ENVIRONMENT ""OJ_LOG"" TO ""1""           
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-add-grade
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               PERFORM A0110-init-add-action
           END-IF
           . 
       A0110-init-add-action.
           SET is-valid-init TO TRUE
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'grade_grade' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value                           
           MOVE wc-post-value TO wc-grade-grade-grade
           IF wc-grade-grade-grade = SPACE
               MOVE 'Saknar betyget för student' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
               MOVE 'N' TO is-valid-init-switch
           END-IF           
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'grade_comment' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                wc-post-name wc-post-value
           MOVE wc-post-value TO wc-grade-grade-comment
           IF wc-grade-grade-comment = SPACE
               MOVE 'Saknar kommentar på betyget' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
               MOVE 'N' TO is-valid-init-switch
           END-IF                   
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'user_id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                       wc-post-value
           IF wc-post-value = SPACE
               MOVE 'Saknar student id (user_id)' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
               MOVE 'N' TO is-valid-init-switch
           ELSE
               MOVE FUNCTION NUMVAL(wc-post-value) TO wn-grade-user-id           
           END-IF                                
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'course_id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                       wc-post-value
           IF wc-post-value = SPACE
              MOVE 'Saknar kurs id' TO wc-printscr-string
              CALL 'stop-printscr' USING wc-printscr-string
              MOVE 'N' TO is-valid-init-switch
           ELSE
              MOVE FUNCTION NUMVAL(wc-post-value) TO wn-grade-course-id           
           END-IF  
           . 
       B0100-connect.
           MOVE  ""openjensen""    TO   wc-database
           MOVE  ""jensen""        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-add-grade.
           PERFORM B0210-does-user-course-exist
           IF NOT grade-is-in-table
               PERFORM B0220-get-new-row-number
               IF is-valid-table-position
                   PERFORM B0230-add-new-grade-to-table
               END-IF
           ELSE
               MOVE 'Denna student har redan ett kursbetyg.'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-user-course-exist.
           EXEC SQL
              DECLARE ADDCHK CURSOR FOR
                 SELECT user_id, course_id
                 FROM tbl_grade
           END-EXEC      
           EXEC SQL
                OPEN ADDCHK
           END-EXEC
           EXEC SQL
               FETCH ADDCHK
                   INTO :tbl-grade-user-id, :tbl-grade-course-id
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF ( tbl-grade-user-id = wn-grade-user-id
                    AND tbl-grade-course-id = wn-grade-course-id )
                    SET grade-is-in-table TO TRUE
               END-IF
              EXEC SQL
                  FETCH ADDCHK
                      INTO :tbl-grade-user-id, :tbl-grade-course-id
              END-EXEC
           END-PERFORM           
           IF  SQLSTATE NOT = '02000'
               PERFORM Z0100-error-routine
           END-IF
           EXEC SQL 
               CLOSE ADDCHK 
           END-EXEC 
           .       
       B0220-get-new-row-number.
           EXEC SQL
             DECLARE NEWROW CURSOR FOR
                 SELECT grade_id
                 FROM tbl_grade
                 ORDER BY grade_id DESC
           END-EXEC   
           EXEC SQL
                OPEN NEWROW
           END-EXEC
           EXEC SQL
               FETCH NEWROW
                   INTO :tbl-grade-grade-id
           END-EXEC       
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
               SET is-valid-table-position TO TRUE
               COMPUTE tbl-grade-grade-id = tbl-grade-grade-id + 1
           END-IF
           EXEC SQL 
               CLOSE NEWROW 
           END-EXEC            
           .
       B0230-add-new-grade-to-table.
           MOVE wc-grade-grade-grade TO tbl-grade-grade-grade
           MOVE wc-grade-grade-comment TO tbl-grade-grade-comment
           MOVE wn-grade-user-id TO tbl-grade-user-id
           MOVE wn-grade-course-id TO tbl-grade-course-id
           EXEC SQL
               INSERT INTO tbl_grade
               VALUES ( :tbl-grade-grade-id,
                        :tbl-grade-grade-grade,
                        :tbl-grade-grade-comment,
                        :tbl-grade-user-id,
                        :tbl-grade-course-id )
           END-EXEC 
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0240-commit-work
                MOVE 'Nytt betyg adderat' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string
           END-IF     
           .
       B0240-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .           
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           EVALUATE SQLSTATE
               WHEN  ""02000""
                   MOVE 'Data återfinns ej i databasen'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""08003""
              WHEN  ""08001""
                   MOVE 'Anslutning till databas misslyckades'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string 
              WHEN  ""23503""
                   MOVE 'Kan ej ta bort data - pga tabellberoenden'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string                              
              WHEN  SPACE
                   MOVE 'Obekant fel - kontakta leverantören'
                       TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string  
              WHEN  OTHER
                   CALL 'error-printscr' USING SQLSTATE SQLERRMC
           END-EVALUATE
           .
       Z0200-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
","       working-storage section.
       01   switches-add.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.
            03  grade-is-in-table-switch            PIC X   VALUE 'N'.
                88  grade-is-in-table                       VALUE 'Y'.
            03  is-valid-table-position-switch      PIC X   VALUE 'N'.
                88  is-valid-table-position                 VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE. 
       01  wc-pagetitle            PIC X(20) VALUE 'Addera lokal'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.             
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-grade-rec-vars.       
           05  tbl-grade-grade-id        PIC  9(4).
           05  tbl-grade-grade-grade     PIC  X(40).
           05  tbl-grade-grade-comment   PIC  X(40).
           05  tbl-grade-user-id         PIC  9(4).
           05  tbl-grade-course-id       PIC  9(4).           
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-grade-grade-id         PIC  9(4) VALUE ZERO.
           05  wc-grade-grade-grade      PIC  X(40) VALUE SPACE.
           05  wc-grade-grade-comment    PIC  X(40) VALUE SPACE.
           05  wn-grade-user-id          PIC  9(4) VALUE ZERO.
           05  wn-grade-course-id        PIC  9(4) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
","['0000-main', 'A0100-init', 'A0110-init-add-action', 'B0100-connect', 'B0200-add-grade', 'B0210-does-user-course-exist', 'B0220-get-new-row-number', 'B0230-add-new-grade-to-table', 'B0240-commit-work', 'C0100-closedown', 'Z0100-error-routine', 'Z0200-disconnect']","Paragraph 0000-main calls paragraph B0100-connect, B0200-add-grade, C0100-closedown, A0100-init, Z0200-disconnect.
Paragraph A0100-init calls paragraph A0110-init-add-action.
Paragraph B0100-connect calls paragraph Z0100-error-routine.
Paragraph B0200-add-grade calls paragraph B0230-add-new-grade-to-table, B0220-get-new-row-number, B0210-does-user-course-exist.
Paragraph B0210-does-user-course-exist calls paragraph Z0100-error-routine.
Paragraph B0220-get-new-row-number calls paragraph Z0100-error-routine.
Paragraph B0230-add-new-grade-to-table calls paragraph Z0100-error-routine, B0240-commit-work.
",249,"cgi-add-betyg: sets the student grade for existing student, saves into table tbl_grade",,"['write-post-string', 'wui-print-header', 'stop-printscr', 'ok-printscr', 'get-post-value', 'wui-end-html', 'wui-start-html']",,"1. This COBOL file is designed to handle database errors and perform various tasks related to initializing variables and processing user input.

2. The file includes paragraphs for connecting to a database, adding grades, checking if a user-course combination exists, getting the next available row number, adding a new grade to the table, committing changes to the database, and disconnecting from the database.

3. The file also includes paragraphs for handling errors and closing down the program.

4. The business purpose of this file is to provide a structured and organized approach to managing database operations and error handling in a COBOL program.","This COBOL program manages the process of adding student grades to a database. It initializes the environment, connects to the database, validates input values, checks for existing grades, retrieves a new row number, and adds the grade. Error handling routines respond to issues that arise during execution. Finally, it commits changes to the database before cleanly disconnecting and shutting down the application. Thorough cleanup ensures a seamless user experience and resource management.",1.0,1.0,1.0
53,Martinfx_Cobol,X-COBOL/X-COBOL/COBOL_Files/Martinfx_Cobol/SelectSort.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. SELECT-SORT.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           78 W-LEN-ARR VALUE 30.
           01 W-ARR PIC 999 OCCURS W-LEN-ARR TIMES.
           01 W-R PIC 999 VALUE 1.
           01 W-I PIC 999 VALUE 1.
           01 W-J PIC 999 VALUE 1.
           01 W-H PIC 999 VALUE 1.
           01 W-MIN  PIC 999 VALUE 0.
           01 W-SWAP PIC 999 VALUE 0.
           01 W-MIN-NUMBER PIC 999 VALUE 1.
           01 W-MAX-NUMBER PIC 999 VALUE 200.
           01 W-RAN-NUMBER PIC 999.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM GENERATE-RANDOM-NUM.
           PERFORM SORTING-ARRAY.
           GOBACK.
       GENERATE-RANDOM-NUM SECTION.
            PERFORM VARYING W-R FROM 1 BY 1 UNTIL W-R > W-LEN-ARR
              PERFORM W-LEN-ARR TIMES
              COMPUTE W-RAN-NUMBER = FUNCTION RANDOM *
                            (W-MAX-NUMBER - W-MIN-NUMBER + 1) +
                             W-MIN-NUMBER
              END-PERFORM
              MOVE W-RAN-NUMBER TO W-ARR(W-R)
              DISPLAY ""POS: "" W-R "" RANDOM NUMBER: "" W-ARR(W-R)
            END-PERFORM.
       SORTING-ARRAY SECTION.
           PERFORM UNTIL W-I > W-LEN-ARR
             MOVE W-LEN-ARR TO W-MIN
             MOVE W-I TO W-J
             PERFORM UNTIL W-J > W-LEN-ARR
               IF W-ARR(W-MIN) > W-ARR(W-J)
                 MOVE W-J TO W-MIN
               END-IF
               ADD 1 TO W-J
             END-PERFORM
             MOVE W-ARR(W-MIN) TO W-SWAP
             MOVE W-ARR(W-I) TO W-ARR(W-MIN)
             MOVE W-SWAP TO W-ARR(W-I)
             ADD 1 TO W-I
           END-PERFORM.
           PERFORM VARYING W-H FROM 1 BY 1 UNTIL W-H > W-LEN-ARR
           DISPLAY ""POS: "" W-H "" SORTED: "" W-ARR(W-H)
           END-PERFORM.
","       FILE SECTION.
       WORKING-STORAGE SECTION.
           78 W-LEN-ARR VALUE 30.
           01 W-ARR PIC 999 OCCURS W-LEN-ARR TIMES.
           01 W-R PIC 999 VALUE 1.
           01 W-I PIC 999 VALUE 1.
           01 W-J PIC 999 VALUE 1.
           01 W-H PIC 999 VALUE 1.
           01 W-MIN  PIC 999 VALUE 0.
           01 W-SWAP PIC 999 VALUE 0.
           01 W-MIN-NUMBER PIC 999 VALUE 1.
           01 W-MAX-NUMBER PIC 999 VALUE 200.
           01 W-RAN-NUMBER PIC 999.
","['GENERATE-RANDOM-NUM', 'SORTING-ARRAY', 'MAIN-PROCEDURE']","Paragraph MAIN-PROCEDURE calls paragraph GENERATE-RANDOM-NUM, SORTING-ARRAY.
",50,Program generates numbers to array which then sorts array,,,,"1. The business purpose of this COBOL file is to generate random numbers between 50 and 700 and store them in an array.

2. The file contains two paragraphs: GENERATE-RANDOM-NUM and SORTING-ARRAY.

3. The GENERATE-RANDOM-NUM paragraph generates random numbers between 60 and 800 and stores them in an array called W-ARR. The array has a length of 30, as specified by the W-LEN-ARR variable.

4. The SORTING-ARRAY paragraph implements the selection sort algorithm in COBOL. The algorithm works by repeatedly finding the minimum element from the unsorted part of an array and swapping it with the first element of the unsorted part. This process is repeated until the entire array is sorted.

5. The file also contains a MAIN-PROCEDURE paragraph that calls the GENERATE-RANDOM-NUM and SORTING-ARRAY paragraphs.","This COBOL program generates 30 random numbers between 1 and 200, stores them in an array, and then sorts the array using the selection sort algorithm. The MAIN-PROCEDURE initiates the process by calling GENERATE-RANDOM-NUM to populate the array, followed by SORTING-ARRAY, which organizes the numbers and displays the sorted result. This structured approach efficiently combines number generation and sorting, culminating in a seamless execution that ends with the GOBACK statement.",1.0,1.0,1
54,Martinfx_Cobol,X-COBOL/X-COBOL/COBOL_Files/Martinfx_Cobol/Struct.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. STRUCT-EXAMPLE.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 W-I PIC 99 VALUE 1.
       01 W-J PIC 99 VALUE 1.
       78 W-LEN-ARR1 VALUE 5.
       78 W-LEN-ARR2 VALUE 10.
       01 W-STRUCT.
          05 W-ARRAY  PIC S99 OCCURS W-LEN-ARR1 TIMES.
          05 W-ARRAY2 PIC S99 OCCURS W-LEN-ARR2 TIMES.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM ARRAY-ONE.
           PERFORM ARRAY-TWO.
           GOBACK.
       ARRAY-ONE SECTION.
           PERFORM UNTIL W-I > W-LEN-ARR1
             MOVE W-I TO W-ARRAY(W-I)
             ADD 1 TO W-I
           END-PERFORM.
           MOVE 1 TO W-I.
           PERFORM UNTIL W-I > W-LEN-ARR1
             DISPLAY ""Array1 contains number: "" W-ARRAY(W-I)
             ADD 1 TO W-I
           END-PERFORM.
       ARRAY-TWO SECTION.
           PERFORM UNTIL W-J > W-LEN-ARR2
             MOVE W-J TO W-ARRAY2(W-J)
             ADD 1 TO W-J
           END-PERFORM.
           DISPLAY ""-------------------------""
           MOVE 1 TO W-J.
           PERFORM UNTIL W-J > W-LEN-ARR2
             DISPLAY ""Array2 contains number: "" W-ARRAY2(W-J)
             ADD 1 TO W-J
           END-PERFORM.
","       WORKING-STORAGE SECTION.
       01 W-I PIC 99 VALUE 1.
       01 W-J PIC 99 VALUE 1.
       78 W-LEN-ARR1 VALUE 5.
       78 W-LEN-ARR2 VALUE 10.
       01 W-STRUCT.
          05 W-ARRAY  PIC S99 OCCURS W-LEN-ARR1 TIMES.
          05 W-ARRAY2 PIC S99 OCCURS W-LEN-ARR2 TIMES.
","['ARRAY-ONE', 'ARRAY-TWO', 'MAIN-PROCEDURE']","Paragraph MAIN-PROCEDURE calls paragraph ARRAY-TWO, ARRAY-ONE.
",38,Program demonstration struct in COBOL with arrays,,,,"The COBOL file is used to fill an array with numbers from 5 to 9, then display each element in the array. The first section of code uses a perform loop to iterate through the array length and assign values from 1 to the array elements. The second section of code also uses a perform loop to iterate through the array length and display the value of each array element.","This COBOL program initializes and manipulates two arrays. The MAIN-PROCEDURE first calls ARRAY-ONE, which populates W-ARRAY with values from 1 to W-LEN-ARR1 and displays them. It then calls ARRAY-TWO to create W-ARRAY2 with a length of 10, filling it with values from 1 to 10, followed by displaying these values. The program uses the PERFORM verb for procedure calls and concludes with a GOBACK statement to terminate execution.",0.5,1.0,1
63,Martinfx_Cobol,X-COBOL/X-COBOL/COBOL_Files/Martinfx_Cobol/SequentialRead.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. SEQUENTIAL-READ.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT DATA-FILE ASSIGN TO ""../database.dat""
           ORGANIZATION IS SEQUENTIAL
           ACCESS IS SEQUENTIAL
           FILE STATUS FILE-STATUS.
       DATA DIVISION.
       FILE SECTION.
           FD DATA-FILE.
           01 DETAILS.
             02 DETAILS-ID PIC 9(7).
             02 DETAILS-NAME.
               03 DETAILS-SURNAME PIC X(8).
               03 INITIALS        PIC XX.
             02 DETAILS-BIRTHDAY  PIC X(8).
             02 SOME-CODE         PIC X(5).
       WORKING-STORAGE SECTION.
           77 FILE-STATUS PIC XX.
           77 EOF PIC X.
             88 EOF-T value ""Y"".
             88 EOF-F value ""N"".
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           OPEN INPUT DATA-FILE.
           IF FILE-STATUS not = ""00""
             DISPLAY ""Error opening the DB file, program will exit.""
             GOBACK
           END-IF.
           READ DATA-FILE
             AT END
               SET EOF-T TO TRUE
             NOT AT END
               SET EOF-F TO TRUE
               PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E
           END-READ
           PERFORM UNTIL EOF-T
             READ DATA-FILE NEXT
               AT END
                 SET EOF-T TO TRUE
               NOT AT END
                 PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E
             END-READ
           END-PERFORM
           CLOSE DATA-FILE.
           GOBACK.
       DISPAY-DET SECTION.
       DISPLAY-DET-S.
               DISPLAY DETAILS.
               DISPLAY ""DETAILS-ID: "" DETAILS-ID
               DISPLAY ""DETAILS-NAME: "" DETAILS-SURNAME.
               DISPLAY ""DETAILS-BIRTHDAY: "" DETAILS-BIRTHDAY.
       DISPLAY-DET-E.
               EXIT.
","       FILE SECTION.
           FD DATA-FILE.
           01 DETAILS.
             02 DETAILS-ID PIC 9(7).
             02 DETAILS-NAME.
               03 DETAILS-SURNAME PIC X(8).
               03 INITIALS        PIC XX.
             02 DETAILS-BIRTHDAY  PIC X(8).
             02 SOME-CODE         PIC X(5).
       WORKING-STORAGE SECTION.
           77 FILE-STATUS PIC XX.
           77 EOF PIC X.
             88 EOF-T value ""Y"".
             88 EOF-F value ""N"".
","['DISPAY-DET', 'MAIN-PROCEDURE', 'DISPLAY-DET-S', 'DISPLAY-DET-E']","Paragraph MAIN-PROCEDURE calls paragraph DISPLAY-DET-S, DISPLAY-DET-E.
",57,Program demonstration sequential reading database,,,,"1. The code is written in COBOL, which is a programming language used for business applications.

2. The code defines a section called ""DISPLAY-DET"" which contains two paragraphs, ""DISPLAY-DET-S"" and ""DISPLAY-DET-E"".

3. The ""DISPLAY-DET-S"" paragraph contains a series of instructions that are used to display information about a person's name and birthday.

4. The ""DISPLAY"" statement is used to output text to the screen, while the ""DETAILS-ID"", ""DETAILS-SURNAME"", and ""DETAILS-BIRTHDAY"" variables are used to retrieve data from elsewhere in the program.

5. The ""DISPLAY-DET-E"" paragraph simply contains an ""EXIT"" statement, which is used to exit the current subroutine or program.

6. The code first checks if there is an error message, and if so, it displays the error message. If there is no error message, it exits the program.","The COBOL program is designed to read data about a person from a file and display the details including the person's ID, name, and birthday. It first ensures the file is opened successfully and displays an error message if it fails. As it reads through the file, it repeatedly displays the details until the end is reached, utilizing the DISPLAY-DET section for output. Finally, it closes the file and exits the program properly.",1.0,1.0,1.0
65,shamrice_COBOL-RSS-Reader,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-RSS-Reader/reset_files.cbl,"       replace ==:BUFFER-SIZE:== by ==32768==.
       identification division.
       program-id. reset-files.
       environment division.
       configuration section.
       repository.
       special-names.
       input-output section.
           file-control.                              
               select optional fd-rss-last-id-file
               assign to dynamic ws-rss-last-id-file-name
               organization is line sequential
               status is ws-last-id-file-status.
               select fd-rss-list-file 
               assign to dynamic ws-rss-list-file-name
               organization is indexed
               access is dynamic
               record key is f-rss-link
               alternate record key is f-rss-feed-id
               status is ws-list-file-status.
               select fd-rss-content-file 
               assign to dynamic ws-rss-dat-file-name
               status is ws-dat-file-status.
               select fd-temp-rss-file
               assign to dynamic ws-rss-working-temp-file-name
               organization is line sequential
               status is ws-temp-file-status.
       data division.
       file section.
           FD fd-rss-list-file.
           01  f-rss-list-record.               
               05 f-rss-feed-id                pic 9(5) value zeros.
               05 f-rss-feed-status            pic 9 value zero.
               05 f-rss-title                  pic x(128) value spaces.               
               05 f-rss-dat-file-name          pic x(128) value spaces.
               05 f-rss-link                   pic x(256) value spaces.
           FD fd-rss-last-id-file.
           01 f-rss-last-id-record               pic 9(5) value zeros.
           FD fd-rss-content-file.
           01  f-rss-content-record.
               05  f-feed-id                  pic 9(5) values zeros.
               05  f-feed-title               pic x(128) value spaces.
               05  f-feed-site-link           pic x(256) value spaces.
               05  f-feed-desc                pic x(256) value spaces.
               05  f-num-items                pic 9(6) value 0.               
               05  f-items                    occurs 0 to 15000 times 
                                              depending on f-num-items.              
                   10  f-item-title          pic x(128) value spaces.
                   10  f-item-link           pic x(256) value spaces.
                   10  f-item-guid           pic x(256) value spaces.
                   10  f-item-pub-date       pic x(128) value spaces.
                   10  f-item-desc           pic x(512) value spaces.
           FD fd-temp-rss-file.
           01 f-temp-rss-file-raw                 pic x(:BUFFER-SIZE:).
       working-storage section.
       01  ws-last-id-record                   pic 9(5) value zeros.
       01  ws-file-status.
           05  ws-last-id-file-status        pic 99.
           05  ws-list-file-status           pic 99.
           05  ws-dat-file-status            pic 99.
           05  ws-temp-file-status           pic 99.
       01  ws-counter                        pic 9(5).
       01  ws-accept-delete                  pic a.
       01  ws-eof-sw                         pic a value 'N'.
           88  ws-eof                        value 'Y'.
           88  ws-not-eof                    value 'N'.     
       01  ws-rss-dat-file-name              pic x(128) value spaces.
       78  ws-rss-last-id-file-name          value ""./feeds/lastid.dat"".
       78  ws-rss-list-file-name             value ""./feeds/list.dat"".
       01  ws-rss-working-temp-file-name     pic x(128).
       78  ws-rss-temp-file-name             value ""./feeds/temp.rss"".
       78  ws-rss-temp-retry-file-name       value ""./feeds/temp1.rss"".
       78  ws-file-status-not-found          value 35.
       local-storage section.
       linkage section.
       procedure division.
       main-procedure.
           display space 
           display ""---------------------------------------------------""
           display "" WARNING: All current feeds will be removed!""
           display ""---------------------------------------------------""
           display 
               ""Are you sure you would like to reset all data files? ""
               ""(Y/N) ""
               with no advancing 
           end-display 
           accept ws-accept-delete
           if ws-accept-delete <> ""Y"" and ""y"" then 
               display ""Aborting data reset and exiting..."" 
               goback
           end-if 
           call ""logger"" using 
               ""Removing all RSS feed related data files.""
           end-call 
           perform load-highest-rss-record
           perform delete-files
           display ""Done.""
           goback.
       load-highest-rss-record.
           set ws-not-eof to true 
           open input fd-rss-last-id-file
               perform until ws-eof
                   read fd-rss-last-id-file into ws-last-id-record
                       at end set ws-eof to true                    
                   end-read
               end-perform
           close fd-rss-last-id-file
           call ""logger"" using function concatenate(
               ""Highest record found: "", ws-last-id-record)
           end-call 
           exit paragraph.
       delete-files.
           call ""logger"" using ""Deleting files.""
           if ws-last-id-record <> zero then
               display ""Deleting RSS data files...""
               perform varying ws-counter 
                   from 1 by 1 until ws-counter > ws-last-id-record
                   move function concatenate(
                       ""./feeds/rss_"", ws-counter, "".dat"") 
                       to ws-rss-dat-file-name 
                   delete file fd-rss-content-file
                   if ws-dat-file-status <> zero 
                   and ws-dat-file-status <> ws-file-status-not-found 
                   then 
                       display ""Error deleting "" 
                           function trim(ws-rss-dat-file-name) 
                           "". Delete status: "" ws-dat-file-status
                       end-display
                       call ""logger"" using function concatenate(
                           ""Failed to delete file: "", 
                           function trim(ws-rss-dat-file-name),
                           "" : Delete status: "" ws-dat-file-status)
                       end-call
                   else
                       call ""logger"" using function concatenate(
                           ""Successfully deleted: "", 
                           function trim(ws-rss-dat-file-name),
                           "" : Delete status: "" ws-dat-file-status)
                       end-call 
                   end-if
               end-perform 
           else
               call ""logger"" using ""No data files to delete. Skipping.""
           end-if 
           display ""Deleting RSS record list data file...""
           delete file fd-rss-list-file
           if ws-list-file-status <> zero 
           and ws-list-file-status <> ws-file-status-not-found then
               display ""Error deleting "" 
                   function trim(ws-rss-list-file-name) 
                   "". Delete status: "" ws-list-file-status
               end-display
               call ""logger"" using function concatenate(
                   ""Failed to delete file: "", 
                   function trim(ws-rss-list-file-name),
                   "" : Delete status: "" ws-list-file-status)
               end-call
           else
               call ""logger"" using function concatenate(
                   ""Successfully deleted: "", 
                   function trim(ws-rss-list-file-name),
                   "" : Delete status: "" ws-list-file-status)
               end-call                
           end-if
           display ""Deleting last id data file...""
           delete file fd-rss-last-id-file
           if ws-last-id-file-status <> zero
           and ws-last-id-file-status <> ws-file-status-not-found then
               display ""Error deleting "" 
                   function trim(ws-rss-last-id-file-name) 
                   "". Delete status: "" ws-last-id-file-status
               end-display
               call ""logger"" using function concatenate(
                   ""Failed to delete file: "", 
                   function trim(ws-rss-last-id-file-name),
                   "" : Delete status: "" ws-last-id-file-status)
               end-call
           else
               call ""logger"" using function concatenate(
                   ""Successfully deleted: "", 
                   function trim(ws-rss-last-id-file-name),
                   "" : Delete status: "" ws-last-id-file-status)
               end-call                
           end-if
           display ""Deleting temp data file(s)...""
           move ws-rss-temp-file-name to ws-rss-working-temp-file-name
           perform delete-temp-files
           move ws-rss-temp-retry-file-name 
               to ws-rss-working-temp-file-name
           perform delete-temp-files
           exit paragraph.
       delete-temp-files.
           if ws-rss-working-temp-file-name = spaces then 
               call ""logger"" using 
                   ""Cannot delete temp file. No file name has been set.""
               end-call 
               exit paragraph
           end-if 
           delete file fd-temp-rss-file
           if ws-temp-file-status <> 0 
           and ws-temp-file-status <> ws-file-status-not-found then
               display ""Error deleting "" 
                   function trim(ws-rss-working-temp-file-name) 
                   "". Delete status: "" ws-temp-file-status
               end-display
               call ""logger"" using function concatenate(
                   ""Failed to delete file: "", 
                   function trim(ws-rss-working-temp-file-name),
                   "" : Delete status: "" ws-temp-file-status)
               end-call
           else
               call ""logger"" using function concatenate(
                   ""Successfully deleted: "", 
                   function trim(ws-rss-working-temp-file-name),
                   "" : Delete status: "" ws-temp-file-status)
               end-call                
           end-if                      
           exit paragraph.
       end program reset-files.
","       file section.
           FD fd-rss-list-file.
           01  f-rss-list-record.               
               05 f-rss-feed-id                pic 9(5) value zeros.
               05 f-rss-feed-status            pic 9 value zero.
               05 f-rss-title                  pic x(128) value spaces.               
               05 f-rss-dat-file-name          pic x(128) value spaces.
               05 f-rss-link                   pic x(256) value spaces.
           FD fd-rss-last-id-file.
           01 f-rss-last-id-record               pic 9(5) value zeros.
           FD fd-rss-content-file.
           01  f-rss-content-record.
               05  f-feed-id                  pic 9(5) values zeros.
               05  f-feed-title               pic x(128) value spaces.
               05  f-feed-site-link           pic x(256) value spaces.
               05  f-feed-desc                pic x(256) value spaces.
               05  f-num-items                pic 9(6) value 0.               
               05  f-items                    occurs 0 to 15000 times 
                                              depending on f-num-items.              
                   10  f-item-title          pic x(128) value spaces.
                   10  f-item-link           pic x(256) value spaces.
                   10  f-item-guid           pic x(256) value spaces.
                   10  f-item-pub-date       pic x(128) value spaces.
                   10  f-item-desc           pic x(512) value spaces.
           FD fd-temp-rss-file.
           01 f-temp-rss-file-raw                 pic x(:BUFFER-SIZE:).
       working-storage section.
       01  ws-last-id-record                   pic 9(5) value zeros.
       01  ws-file-status.
           05  ws-last-id-file-status        pic 99.
           05  ws-list-file-status           pic 99.
           05  ws-dat-file-status            pic 99.
           05  ws-temp-file-status           pic 99.
       01  ws-counter                        pic 9(5).
       01  ws-accept-delete                  pic a.
       01  ws-eof-sw                         pic a value 'N'.
           88  ws-eof                        value 'Y'.
           88  ws-not-eof                    value 'N'.     
       01  ws-rss-dat-file-name              pic x(128) value spaces.
       78  ws-rss-last-id-file-name          value ""./feeds/lastid.dat"".
       78  ws-rss-list-file-name             value ""./feeds/list.dat"".
       01  ws-rss-working-temp-file-name     pic x(128).
       78  ws-rss-temp-file-name             value ""./feeds/temp.rss"".
       78  ws-rss-temp-retry-file-name       value ""./feeds/temp1.rss"".
       78  ws-file-status-not-found          value 35.
       local-storage section.
       linkage section.
","['main-procedure', 'load-highest-rss-record', 'delete-files', 'delete-temp-files']","Paragraph main-procedure calls paragraph load-highest-rss-record, delete-files.
Paragraph delete-files calls paragraph delete-temp-files.
",220,Deletes all feed related data files.,,,,"1. This COBOL file is used to remove all RSS feed related data files. 
2. It displays a warning message asking the user if they are sure they want to reset all data files. 
3. If the user does not respond with ""Y"" or ""y"", the program aborts the data reset and exits. 
4. Otherwise, it calls a logger subroutine to log the removal of all RSS feed related data files. 
5. It then loads the highest RSS record from a file, deletes the files, and displays a message indicating that the process is complete.","This COBOL file facilitates user-driven data management by prompting for a reset of data files. It starts with the main procedure that initiates the loading of the highest RSS record. Upon confirming the action, it proceeds to delete relevant files, including temporary and RSS data files, while logging each step and handling errors. The delete-files paragraph calls delete-temp-files to ensure thorough cleanup of temporary files, maintaining data integrity throughout the process.",1.0,1.0,1.0
67,shamrice_COBOL-RSS-Reader,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-RSS-Reader/browser_launcher.cbl,"       identification division.
       program-id. browser-launcher.
       environment division.
       configuration section.
       repository.
           function get-config 
           function pipe-open
           function pipe-close.
       input-output section.
       data division.
       file section.
       working-storage section.
       01  ws-pipe-record.
           05  ws-pipe-pointer                  usage pointer.
           05  ws-pipe-return                   usage binary-long.
       01  ws-web-cmd.
           05  ws-web-cmd-start                 pic x(32) value spaces.
           05  ws-browser-cmd                   pic x(32) value ""lynx "".
           05  ws-url                           pic x(255) value spaces. 
           05  ws-web-cmd-end                   pic x(10) value spaces.
       77  ws-launch-status                     pic 9 value 9.
       local-storage section.
       01  ls-config-val-temp                   pic x(32) value spaces.
       linkage section.
       01  l-item-link                          pic x any length.
       screen section.
       01  s-blank-screen.
           05 blank screen.
       procedure division using 
           l-item-link.
       main-procedure.
           display spaces blank screen 
           move function get-config(""browser"") to ws-browser-cmd           
           if ws-browser-cmd = ""NOT-SET"" then 
               call ""logger"" using function concatenate(
                   ""browser configuration is currently set to 'NOT-SET'""
                   "". Cannot launch item link: "" l-item-link)
               end-call 
               goback 
           end-if 
           move function trim(l-item-link) to ws-url
           move function substitute(ws-url, ""&"", ""\&"") to ws-url          
           move function get-config(""newwin"") to ls-config-val-temp
           if ls-config-val-temp = ""true"" then 
               move function get-config(""newwin_s"") to ws-web-cmd-start
               move function get-config(""newwin_e"") to ws-web-cmd-end
           end-if 
           call ""logger"" using ws-url 
           call ""logger"" using function concatenate(
               ""Launching item in browser using command: "",
               ws-web-cmd)
           end-call
           move pipe-open(ws-web-cmd, ""w"") to ws-pipe-record
           call ""logger"" using ""pipe open called...""
           if ws-pipe-return not equal 255 then
               call ""logger"" using ""pipe return value check.""
               move pipe-close(ws-pipe-record) to ws-launch-status
               if ws-launch-status is zero then
                   call ""logger"" using function concatenate(
                       ""Web launch success. Status="", ws-launch-status)
                   end-call 
               else
                   call ""logger"" using function concatenate(
                       ""Error launching "", function trim(ws-web-cmd), 
                       "".. Status="", ws-launch-status)
                   end-call
               end-if
           end-if
           display spaces blank screen       
           goback.
       end program browser-launcher.
","       file section.
       working-storage section.
       01  ws-pipe-record.
           05  ws-pipe-pointer                  usage pointer.
           05  ws-pipe-return                   usage binary-long.
       01  ws-web-cmd.
           05  ws-web-cmd-start                 pic x(32) value spaces.
           05  ws-browser-cmd                   pic x(32) value ""lynx "".
           05  ws-url                           pic x(255) value spaces. 
           05  ws-web-cmd-end                   pic x(10) value spaces.
       77  ws-launch-status                     pic 9 value 9.
       local-storage section.
       01  ls-config-val-temp                   pic x(32) value spaces.
       linkage section.
       01  l-item-link                          pic x any length.
       screen section.
       01  s-blank-screen.
           05 blank screen.
",['main-procedure'],,72,Launches url in lynx web browser,,,,"1. The main procedure launches an item in the user's default web browser. It first checks if the browser configuration is set to ""NOT-SET"" and logs an error message if it is. Otherwise, it trims and escapes the URL, gets the new window configuration, and constructs the web command based on the configuration. It then logs the URL and the web command, opens a pipe to execute the command, and checks the status of the launch. Finally, it displays a blank screen and returns.

2. The second paragraph is used to get the new window configuration from the registry. It first checks if the key exists and logs an error message if it does not. Otherwise, it reads the value and sets the new window configuration accordingly.

3. The third paragraph is used to construct the web command based on the new window configuration. It first checks if the new window configuration is set to ""NEW-WINDOW"" and appends the appropriate flag to the command. Then, it appends the URL to the command and returns the constructed command.

4. The fourth paragraph is used to log the URL and the web command. It uses the logging function to log the URL and the web command with the appropriate severity level.

5. The fifth paragraph is used to open a pipe to execute the web command. It first allocates a pipe and sets the input and output units to the pipe. Then, it executes the command and waits for it to complete. Finally, it deallocates the pipe and returns the status of the execution.

6. The sixth paragraph is used to check the status of the launch. It first checks if the status is greater than 0 and logs an error message if it is. Otherwise, it logs a success message and returns.

7. The seventh paragraph is used to display a blank screen. It simply prints a blank line to the console.","This COBOL code is used to launch a web browser and display a URL. It first checks if the browser configuration is set, and if not, it logs an error message and exits. It then trims and escapes the URL, and retrieves the configuration for opening a new window. It constructs the command to launch the browser and logs it. It then opens a pipe to execute the command and checks the return value. If the launch is successful, it logs a success message, otherwise it logs an error message. Finally, it displays a blank screen and exits.",1.0,1.0,na
74,shamrice_COBOL-RSS-Reader,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-RSS-Reader/rss_report_writer.cbl,"       identification division.
       function-id. rss-report-writer.
       environment division.
       configuration section.
       repository.
       special-names.
       input-output section.
           file-control.                              
               select optional fd-rss-list-file
               assign to dynamic ws-rss-list-file-name
               organization is indexed
               access is dynamic
               record key is f-rss-link
               alternate record key is f-rss-feed-id.               
               select fd-rss-content-file
               assign to dynamic ws-rss-content-file-name
               organization is line sequential.
               select fd-report-file
               assign to dynamic ws-report-file-name
               organization is line sequential.
       data division.
       file section.
           FD fd-rss-list-file.
           01  f-rss-list-record.               
               05 f-rss-feed-id                pic 9(5) value zeros.
               05 f-rss-feed-status            pic 9 value zero.
               05 f-rss-title                  pic x(128) value spaces.               
               05 f-rss-dat-file-name          pic x(128) value spaces.
               05 f-rss-link                   pic x(256) value spaces.
           FD fd-rss-content-file.
           01  f-rss-content-record.
               05  f-feed-id                  pic 9(5) values zeros.
               05  f-feed-title               pic x(128) value spaces.
               05  f-feed-site-link           pic x(256) value spaces.
               05  f-feed-desc                pic x(256) value spaces.
               05  f-num-items                pic 9(6) value 0.               
               05  f-items                    occurs 0 to 15000 times 
                                              depending on f-num-items.              
                   10  f-item-title          pic x(128) value spaces.
                   10  f-item-link           pic x(256) value spaces.
                   10  f-item-guid           pic x(256) value spaces.
                   10  f-item-pub-date       pic x(128) value spaces.
                   10  f-item-desc           pic x(512) value spaces.
           fd fd-report-file
           report is r-rss-report.
       working-storage section.
       01  ws-rss-list-record.           
           05  ws-rss-feed-id                  pic 9(5) value zeros. 
           05  ws-rss-feed-status              pic 9 value zero.          
           05  ws-rss-title                    pic x(128) value spaces.           
           05  ws-rss-dat-file-name            pic x(128) value spaces.
           05  ws-rss-link                     pic x(256) value spaces.
       78  ws-max-rss-items                     value 15000.
       77  ws-num-items-disp                    pic 9(6).
       01  ws-rss-record.
           05  ws-feed-id                       pic 9(5) value zeros.
           05  ws-feed-title                    pic x(128) value spaces.
           05  ws-feed-site-link                pic x(256) value spaces.
           05  ws-feed-desc                     pic x(256) value spaces.
           05  ws-num-items                     pic 9(6) value 0.           
           05  ws-items              occurs 0 to ws-max-rss-items times 
                                     depending on ws-num-items.
               10 ws-item-title                 pic x(128) value spaces.
               10 ws-item-link                  pic x(256) value spaces.
               10 ws-item-guid                  pic x(256) value spaces.
               10 ws-item-pub-date              pic x(128) value spaces.
               10 ws-item-desc                  pic x(512) value spaces.
       01  ws-counter                        pic 9(6) comp value zeros.
       01  ws-rss-content-file-found-sw      pic x value 'N'.
           88  ws-content-file-found         value 'Y'.
           88  ws-content-file-not-found     value 'N'.
       01  ws-eof-sw                         pic x value 'N'.
           88  ws-eof                        value 'Y'.
           88  ws-not-eof                    value 'N'.
       01  ws-date-record.
           05  ws-current-date.
               10  ws-year                   pic 9(4).
               10  ws-month                  pic 99.
               10  ws-day                    pic 99.
           05 ws-current-time.
               10  ws-hour                   pic 99.
               10  ws-min                    pic 99.
               10  ws-sec                    pic 99.
               10  ws-milli                  pic 99.
           05  ws-time-offset                pic S9(4).
       77  ws-report-file-name               pic x(512) 
                                             value ""./report.txt"".
       77  ws-rss-content-file-name          pic x(21) 
                                             value ""./feeds/UNSET.dat"".                                            
       78  ws-rss-list-file-name             value ""./feeds/list.dat"".       
       linkage section.
       01  l-rss-link                          pic x any length.
       01  l-report-file-name                  pic x any length.
       01  l-create-report-status                pic 9 value zero.
           88  l-return-status-success           value 1.
           88  l-return-status-bad-param         value 2.  
           88  l-return-status-nothing-to-report value 3.
           88  l-return-status-data-file-missing value 4.          
       report section.
           rd r-rss-report
           page limit is 68
           heading is 2
           first detail 3
           last detail 60
           footing 65. 
           01  r-report-header type report heading.
               05  line 2.
                   10  column 1 
                       pic x(12) value ""RSS REPORT -"".
                   10  column 14 pic x(35) source ws-feed-title. 
               05  line plus 1.
                   10  column 1 pic x(5) value ""DATE:"".
                   10  column 7 pic x(40) source ws-date-record.   
               05  line plus 1.
                   10  column 1 pic x(5) value ""PAGE:"".
                   10  column 7 pic zz9 source page-counter.                   
               05  line plus 1.
                   10  column 1 pic x(50) value 
                   ""--------------------------------------------------"".
           01  r-id-line type detail line plus 1.
               05  column 8 pic x(3) value ""Id:"".
               05  column 12 pic 9(5) source ws-feed-id.
           01  r-title-line type detail line plus 1.
               05  column 5 pic x(6) value ""Title:"".
               05  column 12 pic x(59) source ws-rss-title.
           01  r-site-link-line type detail line plus 1.
               05  column 6 pic x(5) value ""Site:"".
               05  column 12 pic x(55) source ws-feed-site-link.
           01  r-feed-detail-line-1 type detail line plus 1.
               05  column 4 pic x(7) value ""Detail:"".
               05  column 11 pic x(65) source ws-feed-desc(1:65).
           01  r-feed-detail-line-2 type detail line plus 1.
               05  column 12 pic x(65) source ws-feed-desc(66:65).
           01  r-feed-detail-line-3 type detail line plus 1.
               05  column 12 pic x(65) source ws-feed-desc(131:65).  
           01  r-feed-detail-line-4 type detail line plus 1.
               05  column 12 pic x(65) source ws-feed-desc(196:60). 
           01  r-item-line-1 type detail line plus 2.
               05  column 4 pic x(6) value ""Items:"".
           01  r-item-line-2 type detail line plus 1.
               05 column 4 pic x(6) value ""------"".
           01  r-item-title-line type detail line plus 1.
               05  column 4 pic x(6) value ""Title:"".
               05  column 11 pic x(70) source ws-item-title(ws-counter).
           01  r-publish-date-line type detail line plus 1.
               05  column 5 pic x(5) value ""Date:"".
               05  column 11 pic x(70) 
                   source ws-item-pub-date(ws-counter).    
           01  r-item-link-line type detail line plus 1.
               05  column 5 pic x(5) value ""Link:"".
               05  column 11 pic x(70) source ws-item-link(ws-counter).
           01  r-item-guid-line type detail line plus 1.
               05  column 5 pic x(5) value ""Guid:"".
               05  column 11 pic x(70) source ws-item-guid(ws-counter).
           01  r-item-desc-line-title type detail line plus 2.
               05  column 5 pic x(12) value ""Description:"".
           01  r-item-desc-line-1 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(1:70).
           01  r-item-desc-line-2 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(71:70).
           01  r-item-desc-line-3 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(141:70).
           01  r-item-desc-line-4 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(211:70). 
           01  r-item-desc-line-5 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(281:70).
           01  r-item-desc-line-6 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(351:70).
           01  r-item-desc-line-7 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(421:70).       
           01  r-item-desc-line-8 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(491:).   
           01  r-item-end-line type detail line plus 2.    
               05 column 1 pic x(70) value spaces. 
       screen section.        
       procedure division 
           using l-rss-link, l-report-file-name 
           returning l-create-report-status.
       main-procedure.
           if l-rss-link = spaces then 
               call ""logger"" using function concatenate(
                   ""URL is required to create RSS report. No URL "",
                   ""passed to rss-report-writer. Returning status 2."")
               end-call
               set l-return-status-bad-param to true 
               goback 
           end-if
           if l-report-file-name not equal spaces then 
               move l-report-file-name to ws-report-file-name
           else 
               call ""logger"" using function concatenate(
                   ""No output file name passed ot report writer. Using"",
                   "" default file name: "", ws-report-file-name)
               end-call 
           end-if
           call ""logger"" using function concatenate(
               ""Generating report for url: "", function trim(l-rss-link),
               "" :: Output file name: "", 
               function trim(ws-report-file-name))
           end-call 
           perform set-rss-content-file-name
           if ws-content-file-not-found then 
               set l-return-status-data-file-missing to true 
               goback
           end-if 
           open input fd-rss-content-file
               read fd-rss-content-file into ws-rss-record
           close fd-rss-content-file
           if ws-num-items = 0 then 
               set l-return-status-nothing-to-report to true 
               call ""logger"" using function concatenate(
                   ""Nothing to report. Number of items in RSS feed is "",
                   ""currently zero. Exiting report generation with "",
                   ""status code: 3"")
               end-call
               goback 
           end-if 
           perform generate-rss-report
           call ""logger"" using ""Report generation complete.""
           set l-return-status-success to true 
           goback.
       set-rss-content-file-name.
           move l-rss-link to f-rss-link 
           call ""logger"" using function concatenate(
               ""l-rss-link: "", l-rss-link, "" f-rss-link: "", f-rss-link)
           end-call 
           open input fd-rss-list-file
               read fd-rss-list-file into ws-rss-list-record
                   key is f-rss-link
                   invalid key 
                       call ""logger"" using function concatenate(
                           ""Unable to find feed with feed url: "", 
                           f-rss-link, "" : Cannot generate report."")
                       end-call 
                       set ws-content-file-not-found to true
                   not invalid key                            
                       call ""logger"" using function concatenate(
                           ""Report writer found RSS feed :: Title="", 
                           ws-rss-title)
                       end-call                           
                       move f-rss-dat-file-name 
                           to ws-rss-content-file-name
                       set ws-content-file-found to true                            
               end-read
           close fd-rss-list-file               
           call ""logger"" using function concatenate(
               ""ws-rss-list-record: "", ws-rss-list-record)
           end-call 
           exit paragraph.
       generate-rss-report.
           call ""logger"" using ""Report generation started.""
           initiate r-rss-report
           move function current-date to ws-date-record
           move ws-num-items to ws-num-items-disp
           call ""logger"" using function concatenate( 
               ""ws-num-items = "" ws-num-items-disp)
           end-call 
           move 1 to ws-counter
           move function trim(ws-rss-title) to ws-rss-title
           move function trim(ws-feed-site-link) to ws-feed-site-link
           open output fd-report-file
               generate r-id-line 
               generate r-title-line
               generate r-site-link-line
               generate r-feed-detail-line-1
               if ws-feed-desc(66:65) not = spaces then  
                   generate r-feed-detail-line-2
               end-if
               if ws-feed-desc(131:65) not = spaces then  
                   generate r-feed-detail-line-3
               end-if    
               if ws-feed-desc(196:) not = spaces then  
                   generate r-feed-detail-line-4
               end-if    
               generate r-item-line-1
               generate r-item-line-2 
               perform varying ws-counter from 1 by 1 
               until ws-counter > ws-num-items
                   generate r-item-title-line
                   generate r-publish-date-line
                   generate r-item-link-line 
                   generate r-item-guid-line
                   generate r-item-desc-line-title
                   if ws-item-desc(ws-counter)(1:70)
                       not = spaces then 
                       generate r-item-desc-line-1  
                   end-if 
                   if ws-item-desc(ws-counter)(71:70) 
                       not = spaces then
                       generate r-item-desc-line-2
                   end-if
                   if ws-item-desc(ws-counter)(141:70) 
                       not = spaces then     
                       generate r-item-desc-line-3
                   end-if
                   if ws-item-desc(ws-counter)(211:70) 
                       not = spaces then      
                       generate r-item-desc-line-4
                   end-if
                   if ws-item-desc(ws-counter)(281:70) 
                     not = spaces then  
                     generate r-item-desc-line-5
                   end-if
                   if ws-item-desc(ws-counter)(351:70) 
                       not = spaces then  
                       generate r-item-desc-line-6
                   end-if
                   if ws-item-desc(ws-counter)(421:70) 
                       not = spaces then      
                       generate r-item-desc-line-7
                   end-if
                   if ws-item-desc(ws-counter)(491:) 
                       not = spaces then                        
                       generate r-item-desc-line-8
                   end-if
                   generate r-item-end-line 
               end-perform
           close fd-report-file
           terminate r-rss-report
           exit paragraph.
       end function rss-report-writer.
","       file section.
           FD fd-rss-list-file.
           01  f-rss-list-record.               
               05 f-rss-feed-id                pic 9(5) value zeros.
               05 f-rss-feed-status            pic 9 value zero.
               05 f-rss-title                  pic x(128) value spaces.               
               05 f-rss-dat-file-name          pic x(128) value spaces.
               05 f-rss-link                   pic x(256) value spaces.
           FD fd-rss-content-file.
           01  f-rss-content-record.
               05  f-feed-id                  pic 9(5) values zeros.
               05  f-feed-title               pic x(128) value spaces.
               05  f-feed-site-link           pic x(256) value spaces.
               05  f-feed-desc                pic x(256) value spaces.
               05  f-num-items                pic 9(6) value 0.               
               05  f-items                    occurs 0 to 15000 times 
                                              depending on f-num-items.              
                   10  f-item-title          pic x(128) value spaces.
                   10  f-item-link           pic x(256) value spaces.
                   10  f-item-guid           pic x(256) value spaces.
                   10  f-item-pub-date       pic x(128) value spaces.
                   10  f-item-desc           pic x(512) value spaces.
           fd fd-report-file
           report is r-rss-report.
       working-storage section.
       01  ws-rss-list-record.           
           05  ws-rss-feed-id                  pic 9(5) value zeros. 
           05  ws-rss-feed-status              pic 9 value zero.          
           05  ws-rss-title                    pic x(128) value spaces.           
           05  ws-rss-dat-file-name            pic x(128) value spaces.
           05  ws-rss-link                     pic x(256) value spaces.
       78  ws-max-rss-items                     value 15000.
       77  ws-num-items-disp                    pic 9(6).
       01  ws-rss-record.
           05  ws-feed-id                       pic 9(5) value zeros.
           05  ws-feed-title                    pic x(128) value spaces.
           05  ws-feed-site-link                pic x(256) value spaces.
           05  ws-feed-desc                     pic x(256) value spaces.
           05  ws-num-items                     pic 9(6) value 0.           
           05  ws-items              occurs 0 to ws-max-rss-items times 
                                     depending on ws-num-items.
               10 ws-item-title                 pic x(128) value spaces.
               10 ws-item-link                  pic x(256) value spaces.
               10 ws-item-guid                  pic x(256) value spaces.
               10 ws-item-pub-date              pic x(128) value spaces.
               10 ws-item-desc                  pic x(512) value spaces.
       01  ws-counter                        pic 9(6) comp value zeros.
       01  ws-rss-content-file-found-sw      pic x value 'N'.
           88  ws-content-file-found         value 'Y'.
           88  ws-content-file-not-found     value 'N'.
       01  ws-eof-sw                         pic x value 'N'.
           88  ws-eof                        value 'Y'.
           88  ws-not-eof                    value 'N'.
       01  ws-date-record.
           05  ws-current-date.
               10  ws-year                   pic 9(4).
               10  ws-month                  pic 99.
               10  ws-day                    pic 99.
           05 ws-current-time.
               10  ws-hour                   pic 99.
               10  ws-min                    pic 99.
               10  ws-sec                    pic 99.
               10  ws-milli                  pic 99.
           05  ws-time-offset                pic S9(4).
       77  ws-report-file-name               pic x(512) 
                                             value ""./report.txt"".
       77  ws-rss-content-file-name          pic x(21) 
                                             value ""./feeds/UNSET.dat"".                                            
       78  ws-rss-list-file-name             value ""./feeds/list.dat"".       
       linkage section.
       01  l-rss-link                          pic x any length.
       01  l-report-file-name                  pic x any length.
       01  l-create-report-status                pic 9 value zero.
           88  l-return-status-success           value 1.
           88  l-return-status-bad-param         value 2.  
           88  l-return-status-nothing-to-report value 3.
           88  l-return-status-data-file-missing value 4.          
       report section.
           rd r-rss-report
           page limit is 68
           heading is 2
           first detail 3
           last detail 60
           footing 65. 
           01  r-report-header type report heading.
               05  line 2.
                   10  column 1 
                       pic x(12) value ""RSS REPORT -"".
                   10  column 14 pic x(35) source ws-feed-title. 
               05  line plus 1.
                   10  column 1 pic x(5) value ""DATE:"".
                   10  column 7 pic x(40) source ws-date-record.   
               05  line plus 1.
                   10  column 1 pic x(5) value ""PAGE:"".
                   10  column 7 pic zz9 source page-counter.                   
               05  line plus 1.
                   10  column 1 pic x(50) value 
                   ""--------------------------------------------------"".
           01  r-id-line type detail line plus 1.
               05  column 8 pic x(3) value ""Id:"".
               05  column 12 pic 9(5) source ws-feed-id.
           01  r-title-line type detail line plus 1.
               05  column 5 pic x(6) value ""Title:"".
               05  column 12 pic x(59) source ws-rss-title.
           01  r-site-link-line type detail line plus 1.
               05  column 6 pic x(5) value ""Site:"".
               05  column 12 pic x(55) source ws-feed-site-link.
           01  r-feed-detail-line-1 type detail line plus 1.
               05  column 4 pic x(7) value ""Detail:"".
               05  column 11 pic x(65) source ws-feed-desc(1:65).
           01  r-feed-detail-line-2 type detail line plus 1.
               05  column 12 pic x(65) source ws-feed-desc(66:65).
           01  r-feed-detail-line-3 type detail line plus 1.
               05  column 12 pic x(65) source ws-feed-desc(131:65).  
           01  r-feed-detail-line-4 type detail line plus 1.
               05  column 12 pic x(65) source ws-feed-desc(196:60). 
           01  r-item-line-1 type detail line plus 2.
               05  column 4 pic x(6) value ""Items:"".
           01  r-item-line-2 type detail line plus 1.
               05 column 4 pic x(6) value ""------"".
           01  r-item-title-line type detail line plus 1.
               05  column 4 pic x(6) value ""Title:"".
               05  column 11 pic x(70) source ws-item-title(ws-counter).
           01  r-publish-date-line type detail line plus 1.
               05  column 5 pic x(5) value ""Date:"".
               05  column 11 pic x(70) 
                   source ws-item-pub-date(ws-counter).    
           01  r-item-link-line type detail line plus 1.
               05  column 5 pic x(5) value ""Link:"".
               05  column 11 pic x(70) source ws-item-link(ws-counter).
           01  r-item-guid-line type detail line plus 1.
               05  column 5 pic x(5) value ""Guid:"".
               05  column 11 pic x(70) source ws-item-guid(ws-counter).
           01  r-item-desc-line-title type detail line plus 2.
               05  column 5 pic x(12) value ""Description:"".
           01  r-item-desc-line-1 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(1:70).
           01  r-item-desc-line-2 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(71:70).
           01  r-item-desc-line-3 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(141:70).
           01  r-item-desc-line-4 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(211:70). 
           01  r-item-desc-line-5 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(281:70).
           01  r-item-desc-line-6 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(351:70).
           01  r-item-desc-line-7 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(421:70).       
           01  r-item-desc-line-8 type detail line plus 1.
               05  column 7 pic x(70) 
                   source ws-item-desc(ws-counter)(491:).   
           01  r-item-end-line type detail line plus 2.    
               05 column 1 pic x(70) value spaces. 
       screen section.        
","['main-procedure', 'set-rss-content-file-name', 'generate-rss-report']","Paragraph main-procedure calls paragraph set-rss-content-file-name, generate-rss-report.
",330,Generates a report based on url of rss feed to file name provided.,,,,"1. The COBOL file is used to generate an RSS report based on the URL of an RSS link.

2. The program first checks if the RSS link is provided and if the report file name is specified. If not, it logs an error message and returns a status indicating bad parameters.

3. Then, it generates the report by setting the RSS content file name, opening the content file, and reading its records. If the number of items in the RSS feed is zero, it logs an error message and returns a status indicating nothing to report. Otherwise, it generates the report and logs a completion message before returning a success status.","This COBOL file is designed to process RSS feeds by establishing a URL parameter and defaulting the output file name. It first sets the RSS content file name, determining its validity and logging the necessary details. Subsequently, it generates an RSS report, logging the start and details throughout the process while formatting the report based on the feed items. The procedure concludes with logging the completion and successfully generating the report.",1.0,1.0,1
78,shamrice_COBOL-RSS-Reader,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-RSS-Reader/rss_reader_add_feed.cbl,"       identification division.
       program-id. rss-reader-add-feed.
       environment division.
       configuration section.
       repository.
           function rss-downloader.
       special-names.
           crt status is ws-crt-status.
       input-output section.
       data division.
       file section.
       working-storage section.
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-rss-url                        pic x(256) value space.
       01  ws-add-feed-status                pic 9 value zero.
       01  ws-message-screen-fields.
           05  ws-msg-title                  pic x(70) value spaces.
           05  ws-msg-body                   occurs 2 times.
               10  ws-msg-body-text          pic x(70) value spaces.
           05  ws-msg-input                  pic x value space.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       linkage section.
       screen section.
       01  s-blank-screen.
           05 blank screen.
       01  s-rss-add-feed-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-rss-add-feed-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 4 column 1 pic x(80) from ws-empty-line.
                   15  line 4 column 35 value ""Add RSS Feed"". 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 5 column 1 pic x(80) from ws-empty-line.                 
               10  s-message-line
                   foreground-color cob-color-black background-color 7.
                   15  line 6 column 1 pic x(80) from ws-empty-line.
                   15  line 6 column 2 
                   value ""Enter RSS Feed URL to Add or ESC to Cancel:"".   
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 7 column 1 pic x(80) from ws-empty-line.                 
               10  s-input-line
                   foreground-color cob-color-black background-color 7.
                   15  line 8 column 1 pic x(80) from ws-empty-line.                   
                   15  line 8 column 2 pic x(78) to ws-rss-url. 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 9 column 1 pic x(80) from ws-empty-line.                   
       01  s-message-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-message-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 11 column 10 pic x(60) from ws-empty-line.
                   15  line 11 column 12 pic x(50) from ws-msg-title. 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 12 column 10 pic x(60) from ws-empty-line.                   
               10  s-message-line-1
                   foreground-color cob-color-black background-color 7.
                   15  line 13 column 10 pic x(60) from ws-empty-line.                   
                   15  line 13 column 12 
                       pic x(50) from ws-msg-body-text(1). 
               10  s-message-line-2
                   foreground-color cob-color-black background-color 7.
                   15  line 14 column 10 pic x(60) from ws-empty-line.                   
                   15  line 14 column 12 
                       pic x(50) from ws-msg-body-text(2). 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 15 column 10 pic x(60) from ws-empty-line.    
               10  s-input-line
                   foreground-color 7 background-color 7.
                   15  line 15  column 10 pic x to ws-msg-input. 
       procedure division.
       set environment 'COB_SCREEN_EXCEPTIONS' TO 'Y'.
       set environment 'COB_SCREEN_ESC'        TO 'Y'.
       main-procedure.
           move ""Add Feed Status"" to ws-msg-title
           perform handle-user-input
           display s-blank-screen 
           goback.
       handle-user-input.
           perform until ws-exit-true
               accept s-rss-add-feed-screen 
               evaluate true 
                   when ws-key1 = COB-SCR-OK
                       call ""logger"" using ws-rss-url
                       move function rss-downloader(ws-rss-url)
                           to ws-add-feed-status
                       if ws-add-feed-status = 1 then 
                           move ""New RSS feed added successfully."" to
                               ws-msg-body-text(1)
                       else 
                           move function concatenate(
                               ""Downloading and parsing RSS feed "",
                               ""failed."")
                               to ws-msg-body-text(1)
                           move function concatenate(
                               ""Please check logs. Status: "", 
                               ws-add-feed-status)
                               to ws-msg-body-text(2)
                       end-if    
                       accept s-message-screen
                       set ws-exit-true to true 
                   when ws-crt-status = COB-SCR-ESC
                       set ws-exit-true to true 
               end-evaluate
           end-perform
           exit paragraph.
       end program rss-reader-add-feed.
","       file section.
       working-storage section.
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-rss-url                        pic x(256) value space.
       01  ws-add-feed-status                pic 9 value zero.
       01  ws-message-screen-fields.
           05  ws-msg-title                  pic x(70) value spaces.
           05  ws-msg-body                   occurs 2 times.
               10  ws-msg-body-text          pic x(70) value spaces.
           05  ws-msg-input                  pic x value space.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       linkage section.
       screen section.
       01  s-blank-screen.
           05 blank screen.
       01  s-rss-add-feed-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-rss-add-feed-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 4 column 1 pic x(80) from ws-empty-line.
                   15  line 4 column 35 value ""Add RSS Feed"". 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 5 column 1 pic x(80) from ws-empty-line.                 
               10  s-message-line
                   foreground-color cob-color-black background-color 7.
                   15  line 6 column 1 pic x(80) from ws-empty-line.
                   15  line 6 column 2 
                   value ""Enter RSS Feed URL to Add or ESC to Cancel:"".   
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 7 column 1 pic x(80) from ws-empty-line.                 
               10  s-input-line
                   foreground-color cob-color-black background-color 7.
                   15  line 8 column 1 pic x(80) from ws-empty-line.                   
                   15  line 8 column 2 pic x(78) to ws-rss-url. 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 9 column 1 pic x(80) from ws-empty-line.                   
       01  s-message-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-message-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 11 column 10 pic x(60) from ws-empty-line.
                   15  line 11 column 12 pic x(50) from ws-msg-title. 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 12 column 10 pic x(60) from ws-empty-line.                   
               10  s-message-line-1
                   foreground-color cob-color-black background-color 7.
                   15  line 13 column 10 pic x(60) from ws-empty-line.                   
                   15  line 13 column 12 
                       pic x(50) from ws-msg-body-text(1). 
               10  s-message-line-2
                   foreground-color cob-color-black background-color 7.
                   15  line 14 column 10 pic x(60) from ws-empty-line.                   
                   15  line 14 column 12 
                       pic x(50) from ws-msg-body-text(2). 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 15 column 10 pic x(60) from ws-empty-line.    
               10  s-input-line
                   foreground-color 7 background-color 7.
                   15  line 15  column 10 pic x to ws-msg-input. 
","['Top function with no name', 'main-procedure', 'handle-user-input']","Paragraph main-procedure calls paragraph handle-user-input.
",125,RSS Reader Add Feed - Screen sub program to add feeds,,,,"1. This code sets two environment variables, COB_SCREEN_EXCEPTIONS and COB_SCREEN_ESC, to the value ""Y"". These environment variables are likely related to screen handling in COBOL programming. The value ""Y"" indicates that these features should be enabled or turned on.

2. This code is part of a larger program that handles user input for adding an RSS feed. It uses the ACCEPT statement to display a screen for entering the URL of the RSS feed, and then evaluates the user's response based on whether they pressed the OK or ESC key. If the user presses OK, it calls a logger subroutine with the entered URL as an argument, and then calls another subroutine called rss-downloader with the same URL. The status of this subroutine is stored in a variable called ws-add-feed-status, which is used to determine whether the feed was added successfully or not. Depending on the status, it either displays a success message or an error message with additional details. Finally, it accepts a new screen and sets a flag to exit the loop.","This COBOL file manages screen handling by setting environment variables and executing a main procedure that processes user interactions. The main-procedure initializes by preparing the user interface, while the handle-user-input paragraph captures user input and routes actions accordingly, using evaluation and logging. These components work together to ensure that screen exceptions are managed, and user inputs are properly handled, creating an interactive and user-friendly experience within the program.",0.5,1.0,1.0
79,shamrice_COBOL-RSS-Reader,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-RSS-Reader/rss_reader_export_feed.cbl,"       identification division.
       program-id. rss-reader-export-feed.
       environment division.
       configuration section.
       repository.
           function rss-report-writer.
       special-names.
           crt status is ws-crt-status.
       input-output section.
           file-control.                              
               select optional fd-rss-list-file
               assign to dynamic ws-rss-list-file-name
               organization is indexed
               access is dynamic
               record key is f-rss-link
               alternate record key is f-rss-feed-id.               
       data division.
       file section.
           FD fd-rss-list-file.
           01  f-rss-list-record.               
               05 f-rss-feed-id                pic 9(5) value zeros.
               05 f-rss-feed-status            pic 9 value zero.
               05 f-rss-title                  pic x(128) value spaces.               
               05 f-rss-dat-file-name          pic x(128) value spaces.
               05 f-rss-link                   pic x(256) value spaces.
       working-storage section.
       01  ws-rss-list-record.           
           05  ws-rss-feed-id                  pic 9(5) value zeros. 
           05  ws-rss-feed-status              pic 9 value zero.          
           05  ws-rss-title                    pic x(128) value spaces.           
           05  ws-rss-dat-file-name            pic x(128) value spaces.
           05  ws-rss-link                     pic x(256) value spaces.
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-accept                         pic x value zero.
       01  ws-export-name                    pic x(70) value spaces.
       01  ws-export-feed-status             pic 9 value zero.
       01  ws-export-msg.
           05  ws-export-line-1              pic x(70) value spaces.
           05  ws-export-line-2              pic x(70) value spaces.
       01  ws-message-screen-fields.
           05  ws-msg-title                  pic x(70) value spaces.
           05  ws-msg-body                   occurs 2 times.
               10  ws-msg-body-text          pic x(70) value spaces.
           05  ws-msg-input                  pic x value space.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       78  ws-rss-list-file-name             value ""./feeds/list.dat"".
       linkage section.
       01  l-rss-feed-id                     pic 9(5).
       screen section.
       01  s-blank-screen.
           05 blank screen.
       01  s-rss-export-feed-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-rss-export-feed-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 4 column 1 pic x(80) from ws-empty-line.
                   15  line 4 column 35 value ""Export RSS Feed"". 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 5 column 1 pic x(80) from ws-empty-line.                 
               10  s-rss-export-msg-line-1
                   foreground-color cob-color-black background-color 7.
                   15  line 6 column 1 pic x(80) from ws-empty-line.
                   15  line 6 column 2 pic x(70) from ws-export-line-1.   
               10  s-rss-export-msg-line-2
                   foreground-color cob-color-black background-color 7.
                   15  line 7 column 1 pic x(80) from ws-empty-line.
                   15  line 7 column 2 pic x(70) from ws-export-line-2.   
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 8 column 1 pic x(80) from ws-empty-line.                   
               10  s-input-line
                   foreground-color cob-color-black background-color 7.
                   15  line 9 column 1 pic x(80) from ws-empty-line.                   
                   15  line 9 column 2 pic x(78) to ws-export-name. 
                10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 10 column 1 pic x(80) from ws-empty-line.                   
               10  s-message-line
                   foreground-color cob-color-black background-color 7.
                   15  line 11 column 1 pic x(80) from ws-empty-line.
                   15  line 11 column 2 
               value ""Press Enter to Export RSS Feed or ESC to Cancel."".   
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 12 column 1 pic x(80) from ws-empty-line.                   
       01  s-message-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-message-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 11 column 10 pic x(60) from ws-empty-line.
                   15  line 11 column 12 pic x(50) from ws-msg-title. 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 12 column 10 pic x(60) from ws-empty-line.                   
               10  s-message-line-1
                   foreground-color cob-color-black background-color 7.
                   15  line 13 column 10 pic x(60) from ws-empty-line.                   
                   15  line 13 column 12 
                       pic x(50) from ws-msg-body-text(1). 
               10  s-message-line-2
                   foreground-color cob-color-black background-color 7.
                   15  line 14 column 10 pic x(60) from ws-empty-line.                   
                   15  line 14 column 12 
                       pic x(50) from ws-msg-body-text(2). 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 15 column 10 pic x(60) from ws-empty-line.    
               10  s-input-line
                   foreground-color 7 background-color 7.
                   15  line 15  column 10 pic x to ws-msg-input. 
       procedure division using l-rss-feed-id.
       set environment 'COB_SCREEN_EXCEPTIONS' TO 'Y'.
       set environment 'COB_SCREEN_ESC'        TO 'Y'.
       main-procedure.
           if l-rss-feed-id is zeros then 
               call ""logger"" using function concatenate(
                   ""Cannot export RSS feed with ID "", l-rss-feed-id,
                   "". Ignoring export request and returning."")
               end-call
               goback 
           end-if
           move ""Export Feed Status"" to ws-msg-title
           move l-rss-feed-id to f-rss-feed-id   
           perform load-feed-to-export
           move function concatenate(""Please specify file name for "", 
               ""export of feed "", function trim(ws-rss-title)) 
               to ws-export-msg
           perform handle-user-input
           display s-blank-screen 
           goback.
       handle-user-input.
           perform until ws-exit-true
               accept s-rss-export-feed-screen 
               evaluate true 
                   when ws-key1 = COB-SCR-OK
                       perform export-rss-record
                       accept s-message-screen
                       set ws-exit-true to true 
                   when ws-crt-status = COB-SCR-ESC
                       set ws-exit-true to true
               end-evaluate
           end-perform
           exit paragraph.
       load-feed-to-export.
           open input fd-rss-list-file
               read fd-rss-list-file into ws-rss-list-record
               key is f-rss-feed-id
                   invalid key 
                       call ""logger"" using function concatenate( 
                           ""Export RSS feed: Unable to load feed by "",
                           ""rss list id. Invalid key: "", f-rss-feed-id)
                       end-call
                   not invalid key                            
                       call ""logger"" using function concatenate( 
                           ""Found to export :: ID: "", f-rss-feed-id, 
                           "" :: Title: "", ws-rss-title)
                       end-call     
               end-read       
           close fd-rss-list-file      
           exit paragraph.
       export-rss-record.
           if ws-export-name = spaces then 
               call ""logger"" using function concatenate( 
                   ""No export file name specified. Not calling report "",
                   ""writer."")
               end-call 
               move ""No file name specified. Not exporting feed.""
                   to ws-msg-body(1) 
               exit paragraph
           end-if     
           call ""logger"" using function concatenate(
               ""Exporting RSS id: "", f-rss-feed-id)
           end-call 
           move function rss-report-writer(f-rss-link, ws-export-name) 
               to ws-export-feed-status
           if ws-export-feed-status = 1 then 
               call ""logger"" using function concatenate( 
                   ""RSS Record "" f-rss-feed-id "" exported to "", 
                   ws-export-name) 
               end-call 
               move ""Successfully exported RSS Feed from list.""
                   to ws-msg-body-text(1)
           else
               move ""Unable to export RSS feed from list.""
                   to ws-msg-body-text(1)
               move function concatenate(
                   ""Export status code: "", ws-export-feed-status)
                   to ws-msg-body-text(2)
           end-if
           exit paragraph.
       end program rss-reader-export-feed.
","       file section.
           FD fd-rss-list-file.
           01  f-rss-list-record.               
               05 f-rss-feed-id                pic 9(5) value zeros.
               05 f-rss-feed-status            pic 9 value zero.
               05 f-rss-title                  pic x(128) value spaces.               
               05 f-rss-dat-file-name          pic x(128) value spaces.
               05 f-rss-link                   pic x(256) value spaces.
       working-storage section.
       01  ws-rss-list-record.           
           05  ws-rss-feed-id                  pic 9(5) value zeros. 
           05  ws-rss-feed-status              pic 9 value zero.          
           05  ws-rss-title                    pic x(128) value spaces.           
           05  ws-rss-dat-file-name            pic x(128) value spaces.
           05  ws-rss-link                     pic x(256) value spaces.
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-accept                         pic x value zero.
       01  ws-export-name                    pic x(70) value spaces.
       01  ws-export-feed-status             pic 9 value zero.
       01  ws-export-msg.
           05  ws-export-line-1              pic x(70) value spaces.
           05  ws-export-line-2              pic x(70) value spaces.
       01  ws-message-screen-fields.
           05  ws-msg-title                  pic x(70) value spaces.
           05  ws-msg-body                   occurs 2 times.
               10  ws-msg-body-text          pic x(70) value spaces.
           05  ws-msg-input                  pic x value space.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       78  ws-rss-list-file-name             value ""./feeds/list.dat"".
       linkage section.
       01  l-rss-feed-id                     pic 9(5).
       screen section.
       01  s-blank-screen.
           05 blank screen.
       01  s-rss-export-feed-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-rss-export-feed-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 4 column 1 pic x(80) from ws-empty-line.
                   15  line 4 column 35 value ""Export RSS Feed"". 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 5 column 1 pic x(80) from ws-empty-line.                 
               10  s-rss-export-msg-line-1
                   foreground-color cob-color-black background-color 7.
                   15  line 6 column 1 pic x(80) from ws-empty-line.
                   15  line 6 column 2 pic x(70) from ws-export-line-1.   
               10  s-rss-export-msg-line-2
                   foreground-color cob-color-black background-color 7.
                   15  line 7 column 1 pic x(80) from ws-empty-line.
                   15  line 7 column 2 pic x(70) from ws-export-line-2.   
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 8 column 1 pic x(80) from ws-empty-line.                   
               10  s-input-line
                   foreground-color cob-color-black background-color 7.
                   15  line 9 column 1 pic x(80) from ws-empty-line.                   
                   15  line 9 column 2 pic x(78) to ws-export-name. 
                10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 10 column 1 pic x(80) from ws-empty-line.                   
               10  s-message-line
                   foreground-color cob-color-black background-color 7.
                   15  line 11 column 1 pic x(80) from ws-empty-line.
                   15  line 11 column 2 
               value ""Press Enter to Export RSS Feed or ESC to Cancel."".   
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 12 column 1 pic x(80) from ws-empty-line.                   
       01  s-message-screen           
           blank screen 
           foreground-color 7 
           background-color cob-color-black. 
           05 s-message-screen-2. 
               10  s-title-line
                   foreground-color cob-color-white background-color 1. 
                   15  line 11 column 10 pic x(60) from ws-empty-line.
                   15  line 11 column 12 pic x(50) from ws-msg-title. 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 12 column 10 pic x(60) from ws-empty-line.                   
               10  s-message-line-1
                   foreground-color cob-color-black background-color 7.
                   15  line 13 column 10 pic x(60) from ws-empty-line.                   
                   15  line 13 column 12 
                       pic x(50) from ws-msg-body-text(1). 
               10  s-message-line-2
                   foreground-color cob-color-black background-color 7.
                   15  line 14 column 10 pic x(60) from ws-empty-line.                   
                   15  line 14 column 12 
                       pic x(50) from ws-msg-body-text(2). 
               10  s-spacer-line
                   foreground-color cob-color-black background-color 7.
                   15  line 15 column 10 pic x(60) from ws-empty-line.    
               10  s-input-line
                   foreground-color 7 background-color 7.
                   15  line 15  column 10 pic x to ws-msg-input. 
","['Top function with no name', 'main-procedure', 'handle-user-input', 'load-feed-to-export', 'export-rss-record']","Paragraph main-procedure calls paragraph load-feed-to-export, handle-user-input.
Paragraph handle-user-input calls paragraph export-rss-record.
",206,RSS Reader Export Feed - Screen sub program to export selected feed into a report file specified by user.,,,,The COBOL file contains a set of paragraphs that handle various tasks related to loading and exporting RSS feeds. The main-procedure paragraph loads an RSS feed from a file and stores it in memory for further processing. The handle-user-input paragraph is responsible for handling user input in a COBOL application and calling the export-rss-record procedure when the user presses the OK key. The load-feed-to-export paragraph is used to load an RSS feed from a file and store it in memory for further processing. The export-rss-record paragraph exports the loaded RSS feed to a specified location.,"This COBOL program facilitates exporting an RSS feed identified by a specific ID. It initializes screen settings and processes user input while handling feed loading and export tasks. The main procedure orchestrates these operations by loading the feed and invoking the user input handler, which evaluates the input to determine the next steps. The export process checks for a file name, performs the export, and logs the results, ensuring a smooth operation throughout.",1.0,1.0,1.0
85,shamrice_COBOL-Roguelike,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-Roguelike/display_help.cbl,"       identification division.
       program-id. display-help.
       environment division.
       configuration section.
       input-output section.
       file-control.
       data division.
       file section.
       working-storage section.      
       procedure division.
       main-procedure.
           display space blank screen 
           display ""Keyboard Commands:"" at 0107 underline highlight           
           display 
               "" arrows - move cursor"" at 0201
               ""      b - toggle blocking tiles"" at 0301
               ""      c - set tile character"" at 0401
               ""      d - set enemy attributes"" at 0501
               ""    f/g - set fore/background tile color"" at 0601
               ""      h - toggle fg tile highlight"" at 0701
               ""      k - toggle blinking tiles"" at 0801
               ""  esc/q - quit editor"" at 0901
               ""  space - place tile or enemy"" at 1001
               ""    tab - toggle tile/enemy placement mode"" at 1101
               ""     F1 - display this help screen."" at 1201
               ""   o/F2 - save map data"" at 1301               
               ""   l/F3 - load map data"" at 1401               
               ""     F6 - toggle tile effect view on/off."" at 1501
           end-display 
           display ""Press [enter] for next page."" at 1901
           accept omitted at 1950
           display space blank screen 
           display ""Mouse Commands"" at 0107 underline highlight 
           display 
               ""left click - place tile/enemy at mouse cursor position.""
               at 0207
               ""hold left click - continuous tile/enemy draw at cursor.""
               at 0302
           end-display 
           display ""Press [enter] to return to editor."" at 1901
           accept omitted at 1950
           display space blank screen
           goback.
       end program display-help.
","       file section.
       working-storage section.      
",['main-procedure'],,45,Displays the editor help screen,,,,"1. The main procedure is responsible for initializing the program and setting up the environment for subsequent paragraphs to execute.

2. The first paragraph, ""initialize"", is used to set up any necessary initializations or configurations required for the program to run smoothly. This may include opening files, initializing variables, or performing other setup tasks.

3. The second paragraph, ""process-data"", is where the actual processing of data takes place. This may involve reading input from files, performing calculations or transformations on the data, and writing output to files.

4. The third paragraph, ""clean-up"", is responsible for tidying up after the processing is complete. This may include closing files, releasing resources, or performing any other cleanup tasks that are necessary to ensure the program runs smoothly.

5. The fourth paragraph, ""end-program"", is used to terminate the program. This may involve performing any final processing or output, and then exiting the program.

In summary, the main procedure is responsible for initializing the program, while the other paragraphs handle specific tasks such as data processing and cleanup.","This COBOL code is a main procedure that displays various messages and prompts to the user. The first display statement is a blank screen, followed by a list of keyboard commands and their descriptions. The second display statement is another blank screen, followed by a list of mouse commands and their descriptions. The code ends with a goback statement.",0.5,1.0,1.0
91,shamrice_COBOL-Roguelike,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-Roguelike/draw_tile_character.cbl,"       identification division.
       program-id. draw-tile-character.
       environment division.
       data division.
       working-storage section.
       01  black                          constant as 0.
       01  blue                           constant as 1.
       01  green                          constant as 2.
       01  cyan                           constant as 3.
       01  red                            constant as 4.
       01  magenta                        constant as 5.
       01  yellow                         constant as 6.  
       01  white                          constant as 7.
       78  ws-no-tile-effect-id           value 0.    
       78  ws-teleport-effect-id          value 1.
       78  ws-conveyor-right-effect-id    value 2.
       78  ws-conveyor-down-effect-id     value 3.
       78  ws-conveyor-left-effect-id     value 4.
       78  ws-conveyor-up-effect-id       value 5.
       78  ws-conveyor-reverse-effect-id  value 6.
       78  ws-player-start-effect-id      value 98.
       78  ws-load-map-tele-return-code   value 1.
       78  ws-max-view-height             value 20.
       78  ws-max-view-width              value 50.
       78  ws-max-map-height              value 25.
       78  ws-max-map-width               value 80.
       78  ws-max-num-enemies             value 99.      
       78  ws-max-num-teleports           value 999.
       78  ws-max-num-items               value 999.
       78  ws-file-status-ok              value ""00"".
       78  ws-file-status-eof             value ""10"".
       78  ws-load-status-fail            value 9.
       78  ws-load-status-read-fail       value 8.
       78  ws-load-status-bad-data        value 7.
       78  ws-load-status-success         value 0.       
       78  ws-save-status-fail            value 9.
       78  ws-save-status-success         value 0.
       78  ws-data-file-ext               value "".DAT"".
       78  ws-teleport-file-ext           value "".TEL"".
       78  ws-enemy-file-ext              value "".BGS"".
       78  ws-item-file-ext               value "".ITM"".
       linkage section.
           01  l-scr-draw-pos.
               05  l-scr-draw-y            pic 99.
               05  l-scr-draw-x            pic 99.
           01  l-tile-map-data.
               10  l-tile-fg                   pic 9.   
               10  l-tile-bg                   pic 9.
               10  l-tile-char                 pic x.
               10  l-tile-highlight            pic a value 'N'.
                   88  l-tile-is-highlight      value 'Y'.
                   88  l-tile-not-highlight     value 'N'.
               10  l-tile-blocking             pic a value 'N'.
                   88  l-tile-is-blocking      value 'Y'.
                   88  l-tile-not-blocking     value 'N'.  
               10  l-tile-blinking             pic a value 'N'.
                   88  l-tile-is-blinking      value 'Y'.
                   88  l-tile-not-blinking     value 'N'.
               10  l-tile-effect-id            pic 99 comp.      
               10  l-tile-visibility           pic 999 comp.      
           01  l-char-to-draw                  pic x.
       procedure division using  
           l-scr-draw-pos l-tile-map-data l-char-to-draw.
       main-procedure.
           evaluate true 
               when l-tile-is-highlight and l-tile-not-blinking
                   display 
                       l-char-to-draw 
                       at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg
                       highlight
                   end-display
               when l-tile-is-highlight and l-tile-is-blinking
                   display 
                       l-char-to-draw
                       at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg
                       highlight blink 
                   end-display 
               when l-tile-not-highlight and l-tile-is-blinking
                   display 
                       l-char-to-draw
                       at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg
                       blink
                   end-display 
               when other  
                   display 
                       l-char-to-draw at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg 
                   end-display
           end-evaluate
           goback.
       end program draw-tile-character.
","       working-storage section.
       01  black                          constant as 0.
       01  blue                           constant as 1.
       01  green                          constant as 2.
       01  cyan                           constant as 3.
       01  red                            constant as 4.
       01  magenta                        constant as 5.
       01  yellow                         constant as 6.  
       01  white                          constant as 7.
       78  ws-no-tile-effect-id           value 0.    
       78  ws-teleport-effect-id          value 1.
       78  ws-conveyor-right-effect-id    value 2.
       78  ws-conveyor-down-effect-id     value 3.
       78  ws-conveyor-left-effect-id     value 4.
       78  ws-conveyor-up-effect-id       value 5.
       78  ws-conveyor-reverse-effect-id  value 6.
       78  ws-player-start-effect-id      value 98.
       78  ws-load-map-tele-return-code   value 1.
       78  ws-max-view-height             value 20.
       78  ws-max-view-width              value 50.
       78  ws-max-map-height              value 25.
       78  ws-max-map-width               value 80.
       78  ws-max-num-enemies             value 99.      
       78  ws-max-num-teleports           value 999.
       78  ws-max-num-items               value 999.
       78  ws-file-status-ok              value ""00"".
       78  ws-file-status-eof             value ""10"".
       78  ws-load-status-fail            value 9.
       78  ws-load-status-read-fail       value 8.
       78  ws-load-status-bad-data        value 7.
       78  ws-load-status-success         value 0.       
       78  ws-save-status-fail            value 9.
       78  ws-save-status-success         value 0.
       78  ws-data-file-ext               value "".DAT"".
       78  ws-teleport-file-ext           value "".TEL"".
       78  ws-enemy-file-ext              value "".BGS"".
       78  ws-item-file-ext               value "".ITM"".
       linkage section.
           01  l-scr-draw-pos.
               05  l-scr-draw-y            pic 99.
               05  l-scr-draw-x            pic 99.
           01  l-tile-map-data.
               10  l-tile-fg                   pic 9.   
               10  l-tile-bg                   pic 9.
               10  l-tile-char                 pic x.
               10  l-tile-highlight            pic a value 'N'.
                   88  l-tile-is-highlight      value 'Y'.
                   88  l-tile-not-highlight     value 'N'.
               10  l-tile-blocking             pic a value 'N'.
                   88  l-tile-is-blocking      value 'Y'.
                   88  l-tile-not-blocking     value 'N'.  
               10  l-tile-blinking             pic a value 'N'.
                   88  l-tile-is-blinking      value 'Y'.
                   88  l-tile-not-blinking     value 'N'.
               10  l-tile-effect-id            pic 99 comp.      
               10  l-tile-visibility           pic 999 comp.      
           01  l-char-to-draw                  pic x.
",['main-procedure'],,99,Module to draw individual character with correct display attributes.,,,,"1.  The main-procedure is the entry point of the COBOL program. It contains an Evaluate statement that checks four conditions using the ""when"" clauses. Depending on the condition that is met, it will execute different Display statements to output information.

2.  The l-scr-draw-pos variable is used to keep track of the current position when drawing on the screen. It is incremented after each character is drawn.

3.  The l-tile-map-data variable is used to store the data for the tile map. It is initialized with values from the TILE-MAP array.

4.  The l-char-to-draw variable is used to store the character that needs to be drawn. It is initialized with a space character and then updated based on the value of l-tile-map-data.

5.  The loop-draw-screen paragraph contains aPERFORM VARYING statement that iterates over the rows and columns of the screen to draw the characters. It uses the l-scr-draw-pos, l-tile-map-data, and l-char-to-draw variables to determine what character to draw at each position.

6.  The move-cursor paragraph contains a PERFORM statement that moves the cursor to the next line after drawing the entire screen.","The COBOL code is a main procedure that evaluates different conditions and displays a character at a specific position on the screen. The conditions include whether the tile is highlighted, blinking, or neither, and the character to be displayed is determined by the l-char-to-draw variable. The display statement includes the character, position, background color, foreground color, and highlight or blink attributes based on the evaluated conditions. Finally, the code goes back to the previous state.",1.0,1.0,na
95,shamrice_COBOL-Roguelike,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-Roguelike/display_debug.cbl,"       identification division.
       program-id. display-debug.
       environment division.
       data division.
       working-storage section.
       01  black                          constant as 0.
       01  blue                           constant as 1.
       01  green                          constant as 2.
       01  cyan                           constant as 3.
       01  red                            constant as 4.
       01  magenta                        constant as 5.
       01  yellow                         constant as 6.  
       01  white                          constant as 7.
       78  ws-no-tile-effect-id           value 0.    
       78  ws-teleport-effect-id          value 1.
       78  ws-conveyor-right-effect-id    value 2.
       78  ws-conveyor-down-effect-id     value 3.
       78  ws-conveyor-left-effect-id     value 4.
       78  ws-conveyor-up-effect-id       value 5.
       78  ws-conveyor-reverse-effect-id  value 6.
       78  ws-player-start-effect-id      value 98.
       78  ws-load-map-tele-return-code   value 1.
       78  ws-max-view-height             value 20.
       78  ws-max-view-width              value 50.
       78  ws-max-map-height              value 25.
       78  ws-max-map-width               value 80.
       78  ws-max-num-enemies             value 99.      
       78  ws-max-num-teleports           value 999.
       78  ws-max-num-items               value 999.
       78  ws-file-status-ok              value ""00"".
       78  ws-file-status-eof             value ""10"".
       78  ws-load-status-fail            value 9.
       78  ws-load-status-read-fail       value 8.
       78  ws-load-status-bad-data        value 7.
       78  ws-load-status-success         value 0.       
       78  ws-save-status-fail            value 9.
       78  ws-save-status-success         value 0.
       78  ws-data-file-ext               value "".DAT"".
       78  ws-teleport-file-ext           value "".TEL"".
       78  ws-enemy-file-ext              value "".BGS"".
       78  ws-item-file-ext               value "".ITM"".
       local-storage section.
       01  ws-kb-input                  pic x.
       01  ws-exit-sw                   pic a value 'N'.
           88  ws-exit                  value 'Y'.
           88  ws-not-exit              value 'N'.              
       linkage section.
       01  l-player.
           05  l-player-name              pic x(16).
           05  l-player-hp.
               10  l-player-hp-current    pic 999.
               10  l-player-hp-max        pic 999.
           05  l-player-pos.
               10  l-player-y             pic S99.
               10  l-player-x             pic S99.
           05  l-player-pos-delta.    
               10  l-player-pos-delta-y   pic S99.
               10  l-player-pos-delta-x   pic S99.
           05  l-player-scr-pos.  
               10  l-player-scr-y         pic 99 value 10.
               10  l-player-scr-x         pic 99 value 20.
           05  l-player-status              pic 9 value 0.
               88  l-player-status-alive    value 0.
               88  l-player-status-dead     value 1.
               88  l-player-status-attacked value 2.
               88  l-player-status-other    value 3.                   
           05  l-player-attack-damage.    
               10  l-player-atk-cur       pic 999.
               10  l-player-atk-base      pic 999.
           05  l-player-defense-power.
               10  l-player-def-cur       pic 999.
               10  l-player-def-base      pic 999.
           05  l-player-level             pic 999.
           05  l-player-experience.
               10  l-player-exp-total     pic 9(7).                   
               10  l-player-exp-next-lvl  pic 9(7).    
           78  l-player-char              value ""@"".
       01  l-tile-map-table-matrix.
           05  l-tile-map           occurs ws-max-map-height times.
               10  l-tile-map-data  occurs ws-max-map-width times.
                   15  l-tile-fg                   pic 9.   
                   15  l-tile-bg                   pic 9.
                   15  l-tile-char                 pic x.
                   15  l-tile-highlight            pic a value 'N'.
                       88 l-tile-is-highlight      value 'Y'.
                       88 l-tile-not-highlight     value 'N'.
                   15  l-tile-blocking             pic a value 'N'.
                       88  l-tile-is-blocking      value 'Y'.
                       88  l-tile-not-blocking     value 'N'.  
                   15  l-tile-blinking             pic a value 'N'.
                       88  l-tile-is-blinking      value 'Y'.
                       88  l-tile-not-blinking     value 'N'.
                   15  l-tile-effect-id            pic 99 comp.  
                   15  l-tile-visibility           pic 999 comp.     
       01  l-enemy-data.
           05  l-cur-num-enemies           pic 99 comp.
           05  l-enemy           occurs 0 to unbounded times
                                 depending on l-cur-num-enemies.
               10  l-enemy-name            pic x(16).
               10  l-enemy-hp.
                   15  l-enemy-hp-total    pic 999 comp value 10.
                   15  l-enemy-hp-current  pic 999 comp value 10.
               10  l-enemy-attack-damage   pic 999 comp value 1.
               10  l-enemy-pos.
                   15  l-enemy-y           pic 99.
                   15  l-enemy-x           pic 99.
               10  l-enemy-color           pic 9 value red.                                     
               10  l-enemy-char            pic x.
               10  l-enemy-status              pic 9 comp value 0.
                   88  l-enemy-status-alive    value 0.
                   88  l-enemy-status-dead     value 1.
                   88  l-enemy-status-attacked value 2.
                   88  l-enemy-status-other    value 3.
               10  l-enemy-movement-ticks.
                   15  l-enemy-current-ticks   pic 999 comp.
                   15  l-enemy-max-ticks       pic 999 comp value 3.    
               10  l-enemy-exp-worth           pic 9(4) comp.         
       01  l-temp-map-pos.
           05  l-temp-map-pos-y        pic S99.
           05  l-temp-map-pos-x        pic S99.
       procedure division using 
               l-player l-tile-map-table-matrix l-enemy-data
               l-temp-map-pos.
       main-procedure.
           display space blank screen
           display ""Debug Info"" at 0115 with underline highlight 
           display ""pscrpos: "" at 1960 l-player-scr-pos at 1970
           display ""P delta: "" at 2101 l-player-pos-delta at 2110
           display ""Pyx: "" at 2301 l-player-pos at 2305
           display ""MAPyx: "" at 2240 l-temp-map-pos at 2246
           perform with test after until ws-exit 
               accept ws-kb-input at 0125
               if ws-kb-input = 'q' then 
                   set ws-exit to true 
               end-if 
           end-perform 
           goback.
       end program display-debug.
","       working-storage section.
       01  black                          constant as 0.
       01  blue                           constant as 1.
       01  green                          constant as 2.
       01  cyan                           constant as 3.
       01  red                            constant as 4.
       01  magenta                        constant as 5.
       01  yellow                         constant as 6.  
       01  white                          constant as 7.
       78  ws-no-tile-effect-id           value 0.    
       78  ws-teleport-effect-id          value 1.
       78  ws-conveyor-right-effect-id    value 2.
       78  ws-conveyor-down-effect-id     value 3.
       78  ws-conveyor-left-effect-id     value 4.
       78  ws-conveyor-up-effect-id       value 5.
       78  ws-conveyor-reverse-effect-id  value 6.
       78  ws-player-start-effect-id      value 98.
       78  ws-load-map-tele-return-code   value 1.
       78  ws-max-view-height             value 20.
       78  ws-max-view-width              value 50.
       78  ws-max-map-height              value 25.
       78  ws-max-map-width               value 80.
       78  ws-max-num-enemies             value 99.      
       78  ws-max-num-teleports           value 999.
       78  ws-max-num-items               value 999.
       78  ws-file-status-ok              value ""00"".
       78  ws-file-status-eof             value ""10"".
       78  ws-load-status-fail            value 9.
       78  ws-load-status-read-fail       value 8.
       78  ws-load-status-bad-data        value 7.
       78  ws-load-status-success         value 0.       
       78  ws-save-status-fail            value 9.
       78  ws-save-status-success         value 0.
       78  ws-data-file-ext               value "".DAT"".
       78  ws-teleport-file-ext           value "".TEL"".
       78  ws-enemy-file-ext              value "".BGS"".
       78  ws-item-file-ext               value "".ITM"".
       local-storage section.
       01  ws-kb-input                  pic x.
       01  ws-exit-sw                   pic a value 'N'.
           88  ws-exit                  value 'Y'.
           88  ws-not-exit              value 'N'.              
       linkage section.
       01  l-player.
           05  l-player-name              pic x(16).
           05  l-player-hp.
               10  l-player-hp-current    pic 999.
               10  l-player-hp-max        pic 999.
           05  l-player-pos.
               10  l-player-y             pic S99.
               10  l-player-x             pic S99.
           05  l-player-pos-delta.    
               10  l-player-pos-delta-y   pic S99.
               10  l-player-pos-delta-x   pic S99.
           05  l-player-scr-pos.  
               10  l-player-scr-y         pic 99 value 10.
               10  l-player-scr-x         pic 99 value 20.
           05  l-player-status              pic 9 value 0.
               88  l-player-status-alive    value 0.
               88  l-player-status-dead     value 1.
               88  l-player-status-attacked value 2.
               88  l-player-status-other    value 3.                   
           05  l-player-attack-damage.    
               10  l-player-atk-cur       pic 999.
               10  l-player-atk-base      pic 999.
           05  l-player-defense-power.
               10  l-player-def-cur       pic 999.
               10  l-player-def-base      pic 999.
           05  l-player-level             pic 999.
           05  l-player-experience.
               10  l-player-exp-total     pic 9(7).                   
               10  l-player-exp-next-lvl  pic 9(7).    
           78  l-player-char              value ""@"".
       01  l-tile-map-table-matrix.
           05  l-tile-map           occurs ws-max-map-height times.
               10  l-tile-map-data  occurs ws-max-map-width times.
                   15  l-tile-fg                   pic 9.   
                   15  l-tile-bg                   pic 9.
                   15  l-tile-char                 pic x.
                   15  l-tile-highlight            pic a value 'N'.
                       88 l-tile-is-highlight      value 'Y'.
                       88 l-tile-not-highlight     value 'N'.
                   15  l-tile-blocking             pic a value 'N'.
                       88  l-tile-is-blocking      value 'Y'.
                       88  l-tile-not-blocking     value 'N'.  
                   15  l-tile-blinking             pic a value 'N'.
                       88  l-tile-is-blinking      value 'Y'.
                       88  l-tile-not-blinking     value 'N'.
                   15  l-tile-effect-id            pic 99 comp.  
                   15  l-tile-visibility           pic 999 comp.     
       01  l-enemy-data.
           05  l-cur-num-enemies           pic 99 comp.
           05  l-enemy           occurs 0 to unbounded times
                                 depending on l-cur-num-enemies.
               10  l-enemy-name            pic x(16).
               10  l-enemy-hp.
                   15  l-enemy-hp-total    pic 999 comp value 10.
                   15  l-enemy-hp-current  pic 999 comp value 10.
               10  l-enemy-attack-damage   pic 999 comp value 1.
               10  l-enemy-pos.
                   15  l-enemy-y           pic 99.
                   15  l-enemy-x           pic 99.
               10  l-enemy-color           pic 9 value red.                                     
               10  l-enemy-char            pic x.
               10  l-enemy-status              pic 9 comp value 0.
                   88  l-enemy-status-alive    value 0.
                   88  l-enemy-status-dead     value 1.
                   88  l-enemy-status-attacked value 2.
                   88  l-enemy-status-other    value 3.
               10  l-enemy-movement-ticks.
                   15  l-enemy-current-ticks   pic 999 comp.
                   15  l-enemy-max-ticks       pic 999 comp value 3.    
               10  l-enemy-exp-worth           pic 9(4) comp.         
       01  l-temp-map-pos.
           05  l-temp-map-pos-y        pic S99.
           05  l-temp-map-pos-x        pic S99.
",['main-procedure'],,139,Module for engine to display debug information.,,,,"1. This code is part of a COBOL program that simulates a simple game. 
2. The main procedure displays a blank screen, followed by the text ""Debug Info"" in a specific position on the screen. 
3. It then displays various debug information related to the player's position and movement. 
4. The program then enters a loop where it waits for user input. 
5. If the user presses the 'q' key, the program exits. 
6. Otherwise, it continues to wait for input.","This COBOL code is a main procedure that displays information on the screen and accepts keyboard input. The program uses variables to store the player's position, screen position, and keyboard input. The program uses a loop to accept keyboard input and exit the program if the input is 'q'.",1.0,1.0,na
100,ibmdbbdev_Samples,X-COBOL/X-COBOL/COBOL_Files/ibmdbbdev_Samples/epsmpmt.cbl,"   CBL NUMPROC(MIG),FLAG(I,W),RENT
       ID DIVISION.
       PROGRAM-ID. EPSMPMT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. FLEX-ES.
       OBJECT-COMPUTER. FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-STATIC-DATA.
           03 STATIC-MAXIMUM-PRINCIPLE    PIC 9(9)V99
                                VALUE 100000000.01.
           03 STATIC-ERRORS.
              05 FILLER                  PIC 99 VALUE 1.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE AMOUNT IS NEGATIVE'.
              05 FILLER                  PIC 99 VALUE 2.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE EXCEEDED MAXIMUM AMOUNT'.
              05 FILLER                  PIC 99 VALUE 3.
              05 FILLER                  PIC X(80)
              VALUE 'NEGATIVE INTEREST RATE'.
              05 FILLER                  PIC 99 VALUE 4.
              05 FILLER                  PIC X(80)
              VALUE 'YEARS INDICATED, BUT YEARS ZERO OR LESS'.
              05 FILLER                  PIC 99 VALUE 5.
              05 FILLER                  PIC X(80)
              VALUE 'ZERO OR LESS MONTHS'.
              05 FILLER                  PIC 99 VALUE 6.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 7.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 8.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 9.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 10.
              05 FILLER                  PIC X(80)
              VALUE ' '.
           03 STATIC-ERROR-TBL REDEFINES STATIC-ERRORS.
              05 STATIC-ERROR-TABLE OCCURS 10 TIMES.
                07 ERROR-INDICATOR         PIC 99.
                07 ERROR-TEXT              PIC X(80).
       01  WS-INDICATORS-AND-FLAGS.
           03 VALIDATION-INDICATOR   PIC 9.
       01  WS-WORK-AMOUNTS.
           03 WS-NUMBER-OF-MONTHS    PIC 9(9)V99   COMP.
           03 WS-CALC-INTEREST       COMP-1.
       01  Loan             Pic 9(9)V99.
       01  Payment          Pic 9(9)V99.
       01  Interest         Pic 9(9)V9999.
       01  Number-Periods   Pic 999.
       LINKAGE SECTION.
       01  EPSPDATA.
           03 EPSPDATA-PRINCIPLE-DATA   PIC S9(9)V99 COMP.
           03 EPSPDATA-NUMBER-OF-YEARS  PIC S9(4)    COMP.
           03 EPSPDATA-NUMBER-OF-MONTHS PIC S9(4)    COMP.
           03 EPSPDATA-QUOTED-INTEREST-RATE
                                        PIC S9(2)v9(3) COMP.
           03 EPSPDATA-YEAR-MONTH-IND   PIC X.
           03 EPSPDATA-RETURN-MONTH-PAYMENT
                                        PIC S9(7)V99 COMP.
           03 EPSPDATA-RETURN-ERROR     PIC X(80).
       PROCEDURE DIVISION USING EPSPDATA.
       A000-MAINLINE.
           MOVE 0 TO VALIDATION-INDICATOR.
           MOVE 0 TO WS-NUMBER-OF-MONTHS.
           PERFORM A100-VALIDATE-INPUT.
           IF VALIDATION-INDICATOR = 0
              PERFORM A200-CALULATE-MONTH-PAYMENT
           ELSE
              PERFORM A999-RETURN-ERROR-TEXT
           END-IF.
           GOBACK
           .
       A100-VALIDATE-INPUT.
           MOVE SPACES TO EPSPDATA-RETURN-ERROR.
           IF EPSPDATA-PRINCIPLE-DATA > 0
              IF EPSPDATA-PRINCIPLE-DATA > STATIC-MAXIMUM-PRINCIPLE
                 MOVE 2 TO VALIDATION-INDICATOR
              END-IF
           ELSE
              MOVE 1 TO VALIDATION-INDICATOR
           END-IF
           .
           IF VALIDATION-INDICATOR = 0
              IF EPSPDATA-QUOTED-INTEREST-RATE <= 0
                 MOVE 3 TO VALIDATION-INDICATOR
              ELSE
                 IF EPSPDATA-YEAR-MONTH-IND = 'Y'
                    COMPUTE WS-NUMBER-OF-MONTHS =
                               EPSPDATA-NUMBER-OF-YEARS * 12
                 ELSE
                    MOVE EPSPDATA-NUMBER-OF-MONTHS TO
                            WS-NUMBER-OF-MONTHS
                 END-IF
              END-IF
           END-IF
           .
           COMPUTE WS-CALC-INTEREST =
                              (EPSPDATA-QUOTED-INTEREST-RATE / 100) / 12
           .
       A200-CALULATE-MONTH-PAYMENT.
           COMPUTE EPSPDATA-RETURN-MONTH-PAYMENT
                   = EPSPDATA-PRINCIPLE-DATA *
                     (WS-CALC-INTEREST *
                     (1 + WS-CALC-INTEREST) ** WS-NUMBER-OF-MONTHS) /
                     (((1 + WS-CALC-INTEREST )
           .
       A300-TRY2.
           MOVE EPSPDATA-PRINCIPLE-DATA TO Loan.
           COMPUTE Interest = EPSPDATA-QUOTED-INTEREST-RATE / 100.
           MOVE WS-NUMBER-OF-MONTHS TO Number-Periods.
           Compute Payment =
           Loan * Function Annuity((Interest / 12) Number-Periods)
           DISPLAY 'Verify Payment = ' Payment.
       A999-RETURN-ERROR-TEXT.
           MOVE ERROR-TEXT(VALIDATION-INDICATOR) TO
                                                 EPSPDATA-RETURN-ERROR
           GOBACK
           .
","       WORKING-STORAGE SECTION.
       01 WS-STATIC-DATA.
           03 STATIC-MAXIMUM-PRINCIPLE    PIC 9(9)V99
                                VALUE 100000000.01.
           03 STATIC-ERRORS.
              05 FILLER                  PIC 99 VALUE 1.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE AMOUNT IS NEGATIVE'.
              05 FILLER                  PIC 99 VALUE 2.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE EXCEEDED MAXIMUM AMOUNT'.
              05 FILLER                  PIC 99 VALUE 3.
              05 FILLER                  PIC X(80)
              VALUE 'NEGATIVE INTEREST RATE'.
              05 FILLER                  PIC 99 VALUE 4.
              05 FILLER                  PIC X(80)
              VALUE 'YEARS INDICATED, BUT YEARS ZERO OR LESS'.
              05 FILLER                  PIC 99 VALUE 5.
              05 FILLER                  PIC X(80)
              VALUE 'ZERO OR LESS MONTHS'.
              05 FILLER                  PIC 99 VALUE 6.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 7.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 8.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 9.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 10.
              05 FILLER                  PIC X(80)
              VALUE ' '.
           03 STATIC-ERROR-TBL REDEFINES STATIC-ERRORS.
              05 STATIC-ERROR-TABLE OCCURS 10 TIMES.
                07 ERROR-INDICATOR         PIC 99.
                07 ERROR-TEXT              PIC X(80).
       01  WS-INDICATORS-AND-FLAGS.
           03 VALIDATION-INDICATOR   PIC 9.
       01  WS-WORK-AMOUNTS.
           03 WS-NUMBER-OF-MONTHS    PIC 9(9)V99   COMP.
           03 WS-CALC-INTEREST       COMP-1.
       01  Loan             Pic 9(9)V99.
       01  Payment          Pic 9(9)V99.
       01  Interest         Pic 9(9)V9999.
       01  Number-Periods   Pic 999.
       LINKAGE SECTION.
       01  EPSPDATA.
           03 EPSPDATA-PRINCIPLE-DATA   PIC S9(9)V99 COMP.
           03 EPSPDATA-NUMBER-OF-YEARS  PIC S9(4)    COMP.
           03 EPSPDATA-NUMBER-OF-MONTHS PIC S9(4)    COMP.
           03 EPSPDATA-QUOTED-INTEREST-RATE
                                        PIC S9(2)v9(3) COMP.
           03 EPSPDATA-YEAR-MONTH-IND   PIC X.
           03 EPSPDATA-RETURN-MONTH-PAYMENT
                                        PIC S9(7)V99 COMP.
           03 EPSPDATA-RETURN-ERROR     PIC X(80).
","['A000-MAINLINE', 'A100-VALIDATE-INPUT', 'A200-CALULATE-MONTH-PAYMENT', 'A300-TRY2', 'A999-RETURN-ERROR-TEXT']","Paragraph A000-MAINLINE calls paragraph A999-RETURN-ERROR-TEXT, A100-VALIDATE-INPUT, A200-CALULATE-MONTH-PAYMENT.
",126,"THIS PROGRAM WILL BE CALLED BY ANOTHER, RECEIVE THE FOLLOWING INFOMATION AND RETURN A MONTLY PAYMENT AMOUNT INPUT: ORIGINAL PRINCIPLE AMOUNT , YEARS OR MONTH INDICATOR, NUMBER OF YEARS, NUMBER OF MONTHS, INTEREST RATE. OUTPUT: MONTHLY PAYMENT.",,,,"1. This COBOL file contains code for handling error messages in a mortgage calculation program.

2. The code includes three paragraphs: A000-MAINLINE, A500-CHECK-PRINCIPLE, and A999-RETURN-ERROR-TEXT.

3. The A000-MAINLINE paragraph calls the A100-VALIDATE-INPUT and A200-CALCULATE-MONTH-PAYMENT paragraphs to validate the input data and calculate the monthly payment, respectively.

4. The A500-CHECK-PRINCIPLE paragraph is called by the A100-VALIDATE-INPUT paragraph to check the validity of the principle amount.

5. The A999-RETURN-ERROR-TEXT paragraph is called by the A000-MAINLINE paragraph to return the error message associated with the validation indicator.

6. The code also includes a section named ""Variable"" that defines the variables used in the program.","This COBOL program calculates a monthly payment based on user input and handles validation and errors. It begins by initializing variables and validating input (A100-VALIDATE-INPUT). If the input is valid, it calculates the monthly payment (A200-CALULATE-MONTH-PAYMENT); if not, it triggers error handling (A999-RETURN-ERROR-TEXT). The specific computations involve checking the principal and interest rate to ensure they are valid and then applying the formulas necessary to derive the payment.",1.0,1.0,1.0
102,ibmdbbdev_Samples,X-COBOL/X-COBOL/COBOL_Files/ibmdbbdev_Samples/epscmort.cbl,"       ID DIVISION.
       PROGRAM-ID. EPSCMORT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-FLEX-ES.
       OBJECT-COMPUTER. IBM-FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  W-FLAGS.
           10  W-SEND-FLAG                    PIC X.
               88  SEND-ERASE                   VALUE '1'.
               88  SEND-DATAONLY                VALUE '2'.
               88  SEND-MAPONLY                 VALUE '3'.
               88  SEND-DATAONLY-ALARM          VALUE '4'.
               88  SEND-ALL                     VALUE '5'.
       01 W-CONVERSIONS.
           05  W-PMT-CNVRT     PIC X(12).
           05  W-PMT-NUMBER
               REDEFINES W-PMT-CNVRT
                               PIC 9(10)V99.
           05  WS-FORMAT-NUMBER PIC Z,ZZZ,ZZ9.99.
           05  W-PRINC-CNVRT   PIC X(12).
           05  W-PRINC-NUMBER
               REDEFINES W-PRINC-CNVRT
                               PIC 9(10)V99.
       01 W-CALL-PROGRAM                      PIC X(8).
       01 W-RETIREMENT-WA                     PIC 9(4).
       01 W-COMAREA-LENGTH                    PIC 9(4) COMP.
       01  SQL-ERROR-MSG.
           03  FILLER              PIC X(11)      VALUE 'SQL ERROR: '.
           03  SQL-ERROR-CODE      PIC 9(5) DISPLAY.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
           EXEC SQL DECLARE SYSIBM.SYSDUMMY1 TABLE
           ( IBMREQD                        CHAR(1) NOT NULL
           ) END-EXEC.
       01 IBMREQD                           PIC X(1).
       01  END-OF-TRANS-MSG                 PIC X(30)
             VALUE 'END OF TRANSACTION - THANK YOU'.
       01  BLANK-MSG                        PIC X(1) VALUE ' '.
       01  W-COMMUNICATION-AREA.
          10  PROCESS-INDICATOR               PIC X.
          10 EPSPCOM-PRINCIPLE-DATA   PIC S9(9)V99 COMP.
          10 EPSPCOM-NUMBER-OF-YEARS  PIC S9(4)    COMP.
          10 EPSPCOM-NUMBER-OF-MONTHS PIC S9(4)    COMP.
          10 EPSPCOM-QUOTED-INTEREST-RATE
                                        PIC S9(2)v9(3) COMP.
          10 EPSPCOM-YEAR-MONTH-IND   PIC X.
          10 EPSPCOM-RETURN-MONTH-PAYMENT
                                      PIC S9(7)V99 COMP.
          10 EPSPCOM-ERRMSG           PIC X(80).
          10 EPSPCOM-PROGRAM-RETCODE  PIC 9(4).
             88 EPS02-REQUEST-SUCCESS VALUE 0.
          10 EPSPCOM-PROGRAM-RETCODE-RDF
                  REDEFINES EPSPCOM-PROGRAM-RETCODE
                                      PIC X(4).
       01  EPS-NUMBER-VALIDATION.
           03 EPSPARM-VALIDATE-DATA     PIC X(13).
           03 EPSPARM-MAX-LENGTH        PIC 99.
           03 EPSPARM-NUMBER            PIC 9(13).
           03 EPSPARM-DECIMAL           PIC V9(13).
           03 EPSPARM-BINARY-NUMBER     PIC 9(9)V99 COMP.
           03 EPSPARM-RETURN-ERROR      PIC X(80).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          10  PROCESS-INDICATOR               PIC X.
          10 EPSPCOM-PRINCIPLE-DATA   PIC S9(9)V99 COMP.
          10 EPSPCOM-NUMBER-OF-YEARS  PIC S9(4)    COMP.
          10 EPSPCOM-NUMBER-OF-MONTHS PIC S9(4)    COMP.
          10 EPSPCOM-QUOTED-INTEREST-RATE
                                        PIC S9(2)v9(3) COMP.
          10 EPSPCOM-YEAR-MONTH-IND   PIC X.
          10 EPSPCOM-RETURN-MONTH-PAYMENT
                                      PIC S9(7)V99 COMP.
          10 EPSPCOM-ERRMSG           PIC X(80).
          10 EPSPCOM-PROGRAM-RETCODE  PIC 9(4).
             88 EPS02-REQUEST-SUCCESS VALUE 0.
          10 EPSPCOM-PROGRAM-RETCODE-RDF
                  REDEFINES EPSPCOM-PROGRAM-RETCODE
                                      PIC X(4).
       PROCEDURE DIVISION USING DFHCOMMAREA.
       EPSCMORT-MAINLINE.
           PERFORM A805-DUMMY-SQL-CALL
           MOVE LENGTH OF DFHCOMMAREA to W-COMAREA-LENGTH.
           MOVE DFHCOMMAREA to W-COMMUNICATION-AREA.
           EVALUATE TRUE
               WHEN EIBCALEN = ZERO
                   MOVE LOW-VALUES TO EPMENUO
                   SET SEND-ERASE TO TRUE
                   PERFORM A300-SEND-MAP
                   MOVE '3' TO
                      PROCESS-INDICATOR OF W-COMMUNICATION-AREA
               WHEN EIBAID = DFHCLEAR
                   MOVE LOW-VALUES TO EPMENUO
                   SET SEND-ERASE TO TRUE
                   PERFORM A300-SEND-MAP
               WHEN EIBAID = DFHPF3 OR DFHPF12
                  IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      EXEC CICS
                         SEND TEXT FROM (END-OF-TRANS-MSG)
                         ERASE
                         FREEKB
                      END-EXEC
                      EXEC CICS
                           RETURN
                      END-EXEC
                   ELSE
                      SET SEND-ALL TO TRUE
                      EXEC CICS
                         SEND TEXT FROM (BLANK-MSG)
                         ERASE
                         FREEKB
                      END-EXEC
                      PERFORM A300-SEND-MAP
                      MOVE '3' TO
                          PROCESS-INDICATOR OF W-COMMUNICATION-AREA
                   END-IF
               WHEN EIBAID = DFHPF9
                   MOVE '9' TO
                      PROCESS-INDICATOR OF W-COMMUNICATION-AREA
                   EXEC CICS LINK PROGRAM( 'EPSMLIST' )
                          COMMAREA( W-COMMUNICATION-AREA )
                   END-EXEC
               WHEN EIBAID = DFHENTER
                   IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      PERFORM A100-PROCESS-MAP
                   ELSE
                      EXEC CICS LINK PROGRAM('EPSMLIST')
                             COMMAREA( W-COMMUNICATION-AREA )
                      END-EXEC
                   END-IF
               WHEN OTHER
                    IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      PERFORM A600-CALCULATE-MORTGAGE
                      EXEC CICS RETURN END-EXEC
                    END-IF
           END-EVALUATE
           EXEC CICS
               RETURN TRANSID('EPSP')
               COMMAREA(W-COMMUNICATION-AREA)
               LENGTH(W-COMAREA-LENGTH)
           END-EXEC.
       A100-PROCESS-MAP.
           PERFORM A400-RECEIVE-MAP.
           PERFORM A600-CALCULATE-MORTGAGE
           SET SEND-DATAONLY TO TRUE
           PERFORM A300-SEND-MAP
               .
       A300-SEND-MAP.
           EVALUATE TRUE
              WHEN SEND-MAPONLY
                   EXEC CICS
                     SEND MAP ('EPMENU')
                       MAPSET('EPSMORT')
                       MAPONLY
                       CURSOR
                   END-EXEC
              WHEN SEND-ERASE
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                         ERASE
                         CURSOR
                   END-EXEC
              WHEN SEND-DATAONLY
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                         DATAONLY
                         CURSOR
                   END-EXEC
              WHEN SEND-ALL
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                     END-EXEC.
       A400-RECEIVE-MAP.
           EXEC CICS
                RECEIVE MAP('EPMENU')
                   MAPSET('EPSMORT')
                   INTO (EPMENUI)
           END-EXEC.
           MOVE EPLOANI        TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPLOANI
                               TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-PRINCIPLE-DATA
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
           MOVE EPYEARSI             TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPYEARSI   TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-NUMBER-OF-YEARS
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
           MOVE EPRATEI              TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPRATEI    TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-QUOTED-INTEREST-RATE
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
       A600-CALCULATE-MORTGAGE.
           MOVE 'Y' TO EPSPCOM-YEAR-MONTH-IND
                           OF W-COMMUNICATION-AREA.
           MOVE 'EPSCSMRT' TO W-CALL-PROGRAM
           EXEC CICS LINK PROGRAM( W-CALL-PROGRAM )
                          COMMAREA( W-COMMUNICATION-AREA )
           END-EXEC
           .
           MOVE EPSPCOM-RETURN-MONTH-PAYMENT
                             OF W-COMMUNICATION-AREA
                             TO WS-FORMAT-NUMBER.
           MOVE WS-FORMAT-NUMBER
                             TO EPPAYMNTO.
           MOVE EPSPCOM-ERRMSG
                             OF W-COMMUNICATION-AREA
                             TO MSGERRO.
       A805-DUMMY-SQL-CALL.
           EXEC SQL
               SELECT IBMREQD
                    INTO :IBMREQD
                    FROM SYSIBM.SYSDUMMY1
           END-EXEC.
           IF SQLCODE = 100
               MOVE 'No rows found on SYSDUMM1.' TO MSGERRO
           ELSE
               IF SQLCODE NOT = 0
                   MOVE SQLCODE TO SQL-ERROR-CODE
                   MOVE SQL-ERROR-MSG TO MSGERRO
               END-IF
           END-IF.
","       WORKING-STORAGE SECTION.
       01  W-FLAGS.
           10  W-SEND-FLAG                    PIC X.
               88  SEND-ERASE                   VALUE '1'.
               88  SEND-DATAONLY                VALUE '2'.
               88  SEND-MAPONLY                 VALUE '3'.
               88  SEND-DATAONLY-ALARM          VALUE '4'.
               88  SEND-ALL                     VALUE '5'.
       01 W-CONVERSIONS.
           05  W-PMT-CNVRT     PIC X(12).
           05  W-PMT-NUMBER
               REDEFINES W-PMT-CNVRT
                               PIC 9(10)V99.
           05  WS-FORMAT-NUMBER PIC Z,ZZZ,ZZ9.99.
           05  W-PRINC-CNVRT   PIC X(12).
           05  W-PRINC-NUMBER
               REDEFINES W-PRINC-CNVRT
                               PIC 9(10)V99.
       01 W-CALL-PROGRAM                      PIC X(8).
       01 W-RETIREMENT-WA                     PIC 9(4).
       01 W-COMAREA-LENGTH                    PIC 9(4) COMP.
       01  SQL-ERROR-MSG.
           03  FILLER              PIC X(11)      VALUE 'SQL ERROR: '.
           03  SQL-ERROR-CODE      PIC 9(5) DISPLAY.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
           EXEC SQL DECLARE SYSIBM.SYSDUMMY1 TABLE
           ( IBMREQD                        CHAR(1) NOT NULL
           ) END-EXEC.
       01 IBMREQD                           PIC X(1).
       01  END-OF-TRANS-MSG                 PIC X(30)
             VALUE 'END OF TRANSACTION - THANK YOU'.
       01  BLANK-MSG                        PIC X(1) VALUE ' '.
       01  W-COMMUNICATION-AREA.
          10  PROCESS-INDICATOR               PIC X.
          10 EPSPCOM-PRINCIPLE-DATA   PIC S9(9)V99 COMP.
          10 EPSPCOM-NUMBER-OF-YEARS  PIC S9(4)    COMP.
          10 EPSPCOM-NUMBER-OF-MONTHS PIC S9(4)    COMP.
          10 EPSPCOM-QUOTED-INTEREST-RATE
                                        PIC S9(2)v9(3) COMP.
          10 EPSPCOM-YEAR-MONTH-IND   PIC X.
          10 EPSPCOM-RETURN-MONTH-PAYMENT
                                      PIC S9(7)V99 COMP.
          10 EPSPCOM-ERRMSG           PIC X(80).
          10 EPSPCOM-PROGRAM-RETCODE  PIC 9(4).
             88 EPS02-REQUEST-SUCCESS VALUE 0.
          10 EPSPCOM-PROGRAM-RETCODE-RDF
                  REDEFINES EPSPCOM-PROGRAM-RETCODE
                                      PIC X(4).
       01  EPS-NUMBER-VALIDATION.
           03 EPSPARM-VALIDATE-DATA     PIC X(13).
           03 EPSPARM-MAX-LENGTH        PIC 99.
           03 EPSPARM-NUMBER            PIC 9(13).
           03 EPSPARM-DECIMAL           PIC V9(13).
           03 EPSPARM-BINARY-NUMBER     PIC 9(9)V99 COMP.
           03 EPSPARM-RETURN-ERROR      PIC X(80).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          10  PROCESS-INDICATOR               PIC X.
          10 EPSPCOM-PRINCIPLE-DATA   PIC S9(9)V99 COMP.
          10 EPSPCOM-NUMBER-OF-YEARS  PIC S9(4)    COMP.
          10 EPSPCOM-NUMBER-OF-MONTHS PIC S9(4)    COMP.
          10 EPSPCOM-QUOTED-INTEREST-RATE
                                        PIC S9(2)v9(3) COMP.
          10 EPSPCOM-YEAR-MONTH-IND   PIC X.
          10 EPSPCOM-RETURN-MONTH-PAYMENT
                                      PIC S9(7)V99 COMP.
          10 EPSPCOM-ERRMSG           PIC X(80).
          10 EPSPCOM-PROGRAM-RETCODE  PIC 9(4).
             88 EPS02-REQUEST-SUCCESS VALUE 0.
          10 EPSPCOM-PROGRAM-RETCODE-RDF
                  REDEFINES EPSPCOM-PROGRAM-RETCODE
                                      PIC X(4).
","['EPSCMORT-MAINLINE', 'A100-PROCESS-MAP', 'A300-SEND-MAP', 'A400-RECEIVE-MAP', 'A600-CALCULATE-MORTGAGE', 'A805-DUMMY-SQL-CALL']","Paragraph EPSCMORT-MAINLINE calls paragraph A600-CALCULATE-MORTGAGE, A805-DUMMY-SQL-CALL, A300-SEND-MAP, A100-PROCESS-MAP.
Paragraph A100-PROCESS-MAP calls paragraph A600-CALCULATE-MORTGAGE, A300-SEND-MAP, A400-RECEIVE-MAP.
",236,THIS PROGRAM WILL RECEIVE A DATE AND COVERT THE DATE TO AN INTEGER IN A CALLED PROGRAM TO DETERMINE DAYS FROM CURRENT DATE.,"['EPSMLIST', 'W-CALL-PROGRAM']",['EPSNBRVL'],,"1. This COBOL file processes mortgage data using CICS. 
2. It contains three paragraphs: 
   - The mainline paragraph processes a map named EPSMORTF.
   - The A100-PROCESS-MAP paragraph processes the map and sends it using CICS SEND.
   - The A300-SEND-MAP paragraph sends different types of data to a CICS system using the SEND MAP command.
3. The A600-CALCULATE-MORTGAGE paragraph calculates the monthly payment for a loan.
4. The A805-DUMMY-SQL-CALL paragraph calls a dummy SQL statement.","The COBOL program manages mortgage calculations and CICS communications by processing input data, sending and receiving maps, and validating essential values. It encompasses operations for mortgage payment calculations, with the mainline invoking various processes including A100-PROCESS-MAP for data handling, A300-SEND-MAP for transferring information, A400-RECEIVE-MAP for data validation, and A600-CALCULATE-MORTGAGE for computing mortgage payments, while A805-DUMMY-SQL-CALL verifies SQL query results for further actions.",0.0,1.0,1.0
106,brazilofmux_gnucobol,X-COBOL/X-COBOL/COBOL_Files/brazilofmux_gnucobol/floor-div.cbl,"       identification division.
       function-id. floor-div.
       data division.
       working-storage section.
       01  fdm-tmp pic s9(8) comp-5.
       linkage section.
       01  fdm-x   pic s9(8) comp-5.
       01  fdm-y   pic s9(8) comp-5.
       01  fdm-div pic s9(8) comp-5.
       procedure division using fdm-x fdm-y returning fdm-div.
       0100-main.
           if fdm-x >= 0
               divide fdm-y into fdm-x giving fdm-div
           else
               add 1 to fdm-x giving fdm-tmp
               subtract fdm-y from fdm-tmp
               divide fdm-y into fdm-tmp giving fdm-div
           end-if.
           goback.
       end function floor-div.
","       working-storage section.
       01  fdm-tmp pic s9(8) comp-5.
       linkage section.
       01  fdm-x   pic s9(8) comp-5.
       01  fdm-y   pic s9(8) comp-5.
       01  fdm-div pic s9(8) comp-5.
",['0100-main'],,21,"The following ""Floor Division"" routine calculates the proper modulus of a negative number. For negative numbers, a modulus is different than a remainder. The modulus is always positive.",,,,"The COBOL file is used to perform integer division using the FDM (Fixed Decimal Point) method. The algorithm first checks whether the dividend (fdm-x) is greater than or equal to zero. If it is, it performs a simple division operation by dividing fdm-y by fdm-x and storing the result in fdm-div. However, if the dividend is negative, the algorithm adds one to fdm-x and then subtracts fdm-y from the result. This adjusted value is then divided by fdm-y, and the final result is stored in fdm-div. Finally, the program uses the GOBACK statement to return control to the calling program.","The COBOL code is performing a division operation using fixed-point arithmetic. It checks if the value of fdm-x is greater than or equal to zero, and if so, it divides the value of fdm-y into fdm-x and stores the result in fdm-div. If fdm-x is negative, it adds 1 to fdm-x, subtracts the value of fdm-y from the result, and then divides the value of fdm-y into the result and stores the final result in fdm-div. Finally, the code uses the goback statement to return to the calling program.",0.5,1.0,na
109,cicsdev_cics-async-api-credit-card-application-example,X-COBOL/X-COBOL/COBOL_Files/cicsdev_cics-async-api-credit-card-application-example/CSSTATS2.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CSSTATS2.
       AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-IMPORTANCE    PIC X(8)  VALUE '        '.
       LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CSSTATS2-CONTAINER PIC X(16) VALUE 'GETVIPSTATUS    '.
       1 PROG-NAMES.
         2 GETPOL             PIC X(8) VALUE 'GETPOL  '.
         2 GETSPND            PIC X(8) VALUE 'GETSPND '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       1 TRANSIDS.
         2 GET-POLICY-TRAN    PIC X(4) VALUE 'GETP'.
         2 GET-SPEND-TRAN     PIC X(4) VALUE 'SPND'.
       1 CHILD-TOKENS.
         2 GET-POLICY-TKN     PIC X(16).
         2 GET-SPEND-TKN      PIC X(16).
       LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE.
           EXEC CICS GET CONTAINER ( INPUT-CONTAINER )
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RUN TRANSID      (GET-POLICY-TRAN)
                         CHILD        (GET-POLICY-TKN)
           END-EXEC
           EXEC CICS RUN TRANSID      (GET-SPEND-TRAN)
                         CHILD        (GET-SPEND-TKN)
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE 'VERY VIP' TO CUSTOMER-IMPORTANCE
           ELSE
             MOVE 'REGULAR ' TO CUSTOMER-IMPORTANCE
           END-IF
           EXEC CICS PUT CONTAINER ( CSSTATS2-CONTAINER )
                           FROM    ( CUSTOMER-IMPORTANCE )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'CSSTATS2'.
","       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-IMPORTANCE    PIC X(8)  VALUE '        '.
       LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CSSTATS2-CONTAINER PIC X(16) VALUE 'GETVIPSTATUS    '.
       1 PROG-NAMES.
         2 GETPOL             PIC X(8) VALUE 'GETPOL  '.
         2 GETSPND            PIC X(8) VALUE 'GETSPND '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       1 TRANSIDS.
         2 GET-POLICY-TRAN    PIC X(4) VALUE 'GETP'.
         2 GET-SPEND-TRAN     PIC X(4) VALUE 'SPND'.
       1 CHILD-TOKENS.
         2 GET-POLICY-TKN     PIC X(16).
         2 GET-SPEND-TKN      PIC X(16).
       LINKAGE SECTION.
",['MAINLINE'],,55,CSSTATS2 - Get the importance (status) of the customer. The business metrics used to calculate the importance of the customer are the number of policies currently held by the customer and the amount they have spent with the company over the year.,,,,"1. The code is written in COBOL, which is a programming language used for business applications.

2. It contains a mainline program that uses the CICS (Customer Information Control System) interface to interact with a mainframe system.

3. The code retrieves data from an input container using the GET CONTAINER statement, runs two child transactions using the RUN TRANSID statement, and then processes the retrieved data based on the value of the ACCOUNT-NUMBER-IN variable.

4. Finally, it updates a container with the results using the PUT CONTAINER statement and returns control back to the calling program using the RETURN statement.","The COBOL code is a program that uses the CICS (Customer Information Control System) to retrieve and update data. The program first retrieves data from an input container and then runs two transactions, GET-POLICY-TRAN and GET-SPEND-TRAN, as children of the current program. After that, it checks the value of the ACCOUNT-NUMBER-IN variable and sets the CUSTOMER-IMPORTANCE variable accordingly. Finally, it updates a CSSTATS2-CONTAINER with the value of the CUSTOMER-IMPORTANCE variable.",0.5,1.0,na
112,cicsdev_cics-async-api-credit-card-application-example,X-COBOL/X-COBOL/COBOL_Files/cicsdev_cics-async-api-credit-card-application-example/GETADDR.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. GETADDR.
       AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-ADDRESS       PIC X(80) VALUE ' '.
         2 CUSTOMER-POSTCODE      PIC X(8)  VALUE ' '.
       LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETADDR-CONTAINER  PIC X(16) VALUE 'GETADDRCONTAINER'.
         2 GETPOST-CONTAINER  PIC X(16) VALUE 'GETPOSTCODE     '.
       1 PROG-NAMES.
         2 GET-ADDR           PIC X(8) VALUE 'GETADDR '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE.
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE '1 HURSLEY PARK, WINCHESTER, UK' TO CUSTOMER-ADDRESS
             MOVE 'SO21 2JN'                       TO CUSTOMER-POSTCODE
           ELSE
             MOVE '123 HIGH STREET, LONDON, UK'    TO CUSTOMER-ADDRESS
             MOVE 'S14 4WG'                        TO CUSTOMER-POSTCODE
           END-IF
           EXEC CICS DELAY FOR SECONDS(5)
           END-EXEC
           EXEC CICS PUT CONTAINER ( GETADDR-CONTAINER )
                           FROM    ( CUSTOMER-ADDRESS )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS PUT CONTAINER ( GETPOST-CONTAINER )
                           FROM    ( CUSTOMER-POSTCODE )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETADDR'.
","       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-ADDRESS       PIC X(80) VALUE ' '.
         2 CUSTOMER-POSTCODE      PIC X(8)  VALUE ' '.
       LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETADDR-CONTAINER  PIC X(16) VALUE 'GETADDRCONTAINER'.
         2 GETPOST-CONTAINER  PIC X(16) VALUE 'GETPOSTCODE     '.
       1 PROG-NAMES.
         2 GET-ADDR           PIC X(8) VALUE 'GETADDR '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
",['MAINLINE'],,53,"GETADDR - Get the postal address for the customer. An account number is used to retrieve the address for the client as stored locally. The address is then used to call an external address service, via web service, to retrieve a verified and canonicalised address and postcode/zipcode.",,,,"The COBOL file is used to retrieve customer address and postcode from an input container and store them in output containers. It first checks if the account number is '0001', and if so, sets the customer address and postcode accordingly. If not, it sets a different address and postcode. Then, it waits for 5 seconds before storing the address and postcode in their respective output containers. Finally, it returns control back to the calling program.","This COBOL code is a program that retrieves a customer's address and postcode based on their account number. It uses the CICS GET CONTAINER and PUT CONTAINER commands to retrieve and store the data. The program then uses an IF statement to determine which address and postcode to use based on the account number. Finally, it uses the CICS DELAY command to wait for 5 seconds before completing the program.",1.0,1.0,na
114,cicsdev_cics-async-api-credit-card-application-example,X-COBOL/X-COBOL/COBOL_Files/cicsdev_cics-async-api-credit-card-application-example/CRDTCHK.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CRDTCHK.
       AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CREDIT-CHECK-RESULT    PIC X(3)  VALUE '   '.
       LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CRDTCHK-CONTAINER  PIC X(16) VALUE 'CREDITCHECKCONT '.
       1 PROG-NAMES.
         2 CREDIT-CHECK       PIC X(8) VALUE 'CRDTCHK '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE.
           EXEC CICS GET CONTAINER ( INPUT-CONTAINER )
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE '998' TO CREDIT-CHECK-RESULT
           ELSE
             MOVE '537' TO CREDIT-CHECK-RESULT
           END-IF
           EXEC CICS DELAY FOR SECONDS(5)
           END-EXEC
           EXEC CICS PUT CONTAINER ( CRDTCHK-CONTAINER )
                           FROM    ( CREDIT-CHECK-RESULT )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'CRDTCHK'.
","       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CREDIT-CHECK-RESULT    PIC X(3)  VALUE '   '.
       LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CRDTCHK-CONTAINER  PIC X(16) VALUE 'CREDITCHECKCONT '.
       1 PROG-NAMES.
         2 CREDIT-CHECK       PIC X(8) VALUE 'CRDTCHK '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
",['MAINLINE'],,44,CRDTCHK - Credit check for an account. An account number is used to call an external credit check service which returns a three digit crdit score. This example executes a 5 second delay to simulate a credit check being made via a web service to an external service provider.,,,,"The provided COBOL code is responsible for performing a credit check on an input account number and returning a result. The code utilizes various commands and variables to accomplish this task within the CICS (Customer Information Control System) environment. 

The code begins with the MAINLINE paragraph, which serves as the entry point for the program. Within this paragraph, the CICS GET CONTAINER command is used to retrieve data from an input container into the ACCOUNT-NUMBER variable. This variable is then checked against the value '0001' using the IF statement. If the account number matches, the CREDIT-CHECK-RESULT variable is set to '998'; otherwise, it is set to '537'. 

After setting the CREDIT-CHECK-RESULT variable, the code uses the CICS DELAY command to pause execution for 5 seconds. This delay can be useful for implementing any necessary processing or validation steps before proceeding. 

Next, the CICS PUT CONTAINER command is executed to store the value of the CREDIT-CHECK-RESULT variable into a credit check container. This action ensures that the result of the credit check is available for further use or reporting. 

Finally, the CICS RETURN command is used to terminate the program and return control back to the calling process. 

In summary, this COBOL code demonstrates how to perform a credit check using CICS commands and variables. By retrieving the input account number, checking it against a specific value, and storing the resulting credit check outcome, the code effectively handles the credit check process within the CICS environment.",This COBOL code is a program that performs a credit check on an account. It uses the CICS (Customer Information Control System) GET CONTAINER and PUT CONTAINER commands to retrieve and store data in containers. The program checks the account number and sets the credit check result accordingly. It then uses the CICS DELAY command to wait for 5 seconds before executing the CICS RETURN command to end the program.,1.0,1.0,na
117,cicsdev_cics-async-api-redbooks,X-COBOL/X-COBOL/COBOL_Files/cicsdev_cics-async-api-redbooks/GETLOAN.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. GETLOAN.
       AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 LOAN-RATE          PIC X(8) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETLOAN-CONTAINER  PIC X(16) VALUE 'GETLOANCONTAINER'.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE.
           IF FUNCTION CURRENT-DATE(16:1) > 5
           THEN
             DISPLAY 'Loan quote service under heavy load. ETA 7 secs.'
             EXEC CICS DELAY FOR SECONDS(7) END-EXEC
           ELSE
             DISPLAY 'Loan quote service under normal load. ETA 4 secs.'
             EXEC CICS DELAY FOR SECONDS(4) END-EXEC
           END-IF
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE '1.25' TO LOAN-RATE
           ELSE
             MOVE '7.20' TO LOAN-RATE
           END-IF
           EXEC CICS PUT CONTAINER ( GETLOAN-CONTAINER )
                           FROM    ( LOAN-RATE )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETLOAN'.","       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 LOAN-RATE          PIC X(8) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETLOAN-CONTAINER  PIC X(16) VALUE 'GETLOANCONTAINER'.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
",['MAINLINE'],,46,"GETLOAN - Get a personalised loan rate. The customers details form the input for this personalised loan rate lookup service. It has to take a lot of factors into consideration. Coupled with complex logic and the popularity of the application, the response times can vary.",,,,"The code is written in COBOL and it is used to process loan quotes for a banking system. The code first checks the current date and time, and if it is after 5 o'clock, it displays a message indicating that the loan quote service is under heavy load and gives an estimated time of arrival (ETA) of 7 seconds. If the current time is before 5 o'clock, it displays a message indicating that the loan quote service is under normal load and gives an ETA of 4 seconds. 

Next, the code uses the CICS GET CONTAINER statement to retrieve data from an input container named ""INPUT-CONTAINER"" into the variable ACCOUNT-NUMBER-IN. It then checks the value of ACCOUNT-NUMBER-IN and sets the variable LOAN-RATE accordingly. If ACCOUNT-NUMBER-IN is equal to '0001', LOAN-RATE is set to '1.25'; otherwise, it is set to '7.20'. 

Finally, the code uses the CICS PUT CONTAINER statement to store the value of LOAN-RATE into a container named ""GETLOAN-CONTAINER"". After this, the code uses the CICS RETURN statement to end the program.","This COBOL code is a program that checks the current date and time to determine the estimated time of arrival (ETA) for a loan quote service. If the current time is after 5:00, the ETA is set to 7 seconds. Otherwise, the ETA is set to 4 seconds. The program then retrieves an input container containing an account number and based on the account number, it sets the loan rate to either 1.25 or 7.20. Finally, the program puts the loan rate into a getloan container and returns.",1.0,1.0,na
120,cicsdev_cics-async-api-redbooks,X-COBOL/X-COBOL/COBOL_Files/cicsdev_cics-async-api-redbooks/ACCTPTNR.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. ACCTPTNR.
       AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 NUMBER-OF-ACCOUNTS     PIC S9(4) COMP-5 SYNC VALUE 9. 
         2 ACCOUNT-DETAILS OCCURS 5 TIMES.
           3 ACCT-NUMBER     PIC X(8) VALUE ' '.
           3 BALANCE         PIC X(8) VALUE ' '.
           3 OVERDRAFT       PIC X(8) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 ACCTPTNR-CONTAINER PIC X(16) VALUE 'ACCTPTNRCONT    '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE.
           EXEC CICS DELAY FOR SECONDS(4) END-EXEC
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE 3 TO NUMBER-OF-ACCOUNTS
             MOVE '62837456' TO ACCT-NUMBER(1)
             MOVE '234.56  ' TO BALANCE(1)
             MOVE '0.00       ' TO OVERDRAFT(1)
             MOVE '64620987' TO ACCT-NUMBER(2)
             MOVE '3092.60 ' TO BALANCE(2)
             MOVE '1000.00 ' TO OVERDRAFT(2)
             MOVE '64563923' TO ACCT-NUMBER(3)
             MOVE '10123.98' TO BALANCE(3)
             MOVE '0.00    ' TO OVERDRAFT(3)
           ELSE
             MOVE 2 TO NUMBER-OF-ACCOUNTS
             MOVE '67849321' TO ACCT-NUMBER(1)
             MOVE '3.50    ' TO BALANCE(1)
             MOVE '0.00    ' TO OVERDRAFT(1)
             MOVE '63298568' TO ACCT-NUMBER(2)
             MOVE '52.48   ' TO BALANCE(2)
             MOVE '3000.00 ' TO OVERDRAFT(2)
           END-IF
           EXEC CICS PUT CONTAINER ( ACCTPTNR-CONTAINER )
                           FROM    ( RETURN-DATA )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'ACCTPTNR'.","       WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 NUMBER-OF-ACCOUNTS     PIC S9(4) COMP-5 SYNC VALUE 9. 
         2 ACCOUNT-DETAILS OCCURS 5 TIMES.
           3 ACCT-NUMBER     PIC X(8) VALUE ' '.
           3 BALANCE         PIC X(8) VALUE ' '.
           3 OVERDRAFT       PIC X(8) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 ACCTPTNR-CONTAINER PIC X(16) VALUE 'ACCTPTNRCONT    '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       LINKAGE SECTION.
",['MAINLINE'],,58,ACCTPTNR - Get the current account(s) details from the banks partner database. An account number is used to retrieve the account details for a customer. The customer accounts database is hosted on a different system in a different organisation.,,,,"1. The code processes customer account information. 
2. It retrieves the account number from the input container. 
3. It checks if the account number matches a specific value. 
4. If it does, it sets up an array with three accounts and their details. 
5. If not, it sets up an array with two accounts and their details. 
6. Finally, it puts the data into the output container and returns.","This COBOL code is a program that uses CICS (Customer Information Control System) to delay for 4 seconds, retrieve data from an input container, and then put the data into an output container. The program checks the value of the ACCOUNT-NUMBER-IN variable and sets the NUMBER-OF-ACCOUNTS and ACCT-NUMBER, BALANCE, and OVERDRAFT variables accordingly. Finally, the program uses CICS to return the data.",0.75,1.0,na
123,walmartlabs_zECS,X-COBOL/X-COBOL/COBOL_Files/walmartlabs_zECS/ZECSPLT.cbl,"       CBL CICS(SP)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. ZECSPLT.
       AUTHOR.     Randy Frerking and Rich Jackson.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ST-CODE                PIC  X(02) VALUE SPACES.
       01  EOF                    PIC  X(01) VALUE SPACES.
       01  ZC                     PIC  X(02) VALUE 'ZC'.
       01  URI-MAP.
           02  URI-PREFIX         PIC  X(04) VALUE SPACES.
           02  URI-SUFFIX         PIC  X(04) VALUE SPACES.
       01  URI-TRAN               PIC  X(04) VALUE SPACES.
       01  ZC-LENGTH              PIC S9(04) COMP VALUE 4.
       01  ZX-TRANID.
           02  FILLER             PIC  X(02) VALUE 'ZX'.
           02  ZX-SUFFIX          PIC  X(02) VALUE SPACES.
       01  CSSL                   PIC  X(04) VALUE '@tdq@'.
       01  TD-LENGTH              PIC S9(04) COMP VALUE ZEROES.
       01  TD-RECORD.
           02  FILLER             PIC  X(13) VALUE 'zECS start ZX'.
           02  TD-SUFFIX          PIC  X(02) VALUE SPACES.
           02  FILLER             PIC  X(01) VALUE SPACES.
           02  FILLER             PIC  X(04) VALUE 'for '.
           02  TD-TRAN            PIC  X(04) VALUE SPACES.
           02  FILLER             PIC  X(01) VALUE SPACES.
           02  TD-PATH            PIC  X(80) VALUE SPACES.
       01  URI-PATH               PIC X(256) VALUE SPACES.
       LINKAGE SECTION.
       01  DFHCOMMAREA            PIC  X(01).
       PROCEDURE DIVISION.
           PERFORM 1000-INQUIRE-START      THRU 1000-EXIT.
           PERFORM 2000-INQUIRE-NEXT       THRU 2000-EXIT
                   WITH TEST AFTER
                   UNTIL EOF EQUAL 'Y'.
           PERFORM 3000-INQUIRE-END        THRU 3000-EXIT.
           PERFORM 9000-RETURN             THRU 9000-EXIT.
       1000-INQUIRE-START.
           EXEC CICS INQUIRE URIMAP START
                NOHANDLE
           END-EXEC.
       1000-EXIT.
           EXIT.
       2000-INQUIRE-NEXT.
           EXEC CICS INQUIRE URIMAP(URI-MAP)
                PATH(URI-PATH)
                TRANSACTION(URI-TRAN)
                NEXT
                NOHANDLE
           END-EXEC.
           IF  EIBRESP NOT EQUAL DFHRESP(NORMAL)
               MOVE 'Y'    TO EOF.
           IF  EIBRESP     EQUAL DFHRESP(NORMAL)
               PERFORM 2100-CHECK-URIMAP   THRU 2100-EXIT.
       2000-EXIT.
           EXIT.
       2100-CHECK-URIMAP.
           IF  URI-PREFIX(1:2) EQUAL ZC
           AND URI-SUFFIX      EQUAL SPACES
               PERFORM 2200-START          THRU 2200-EXIT.
       2100-EXIT.
           EXIT.
       2200-START.
           MOVE URI-PREFIX(3:2)      TO ZX-SUFFIX
                                        TD-SUFFIX.
           MOVE LENGTH OF TD-RECORD  TO TD-LENGTH.
           EXEC CICS START TRANSID(ZX-TRANID)
                FROM(URI-TRAN)
                LENGTH(4)
                NOHANDLE
           END-EXEC.
           MOVE URI-TRAN             TO TD-TRAN.
           MOVE URI-PATH             TO TD-PATH.
           EXEC CICS WRITEQ TD QUEUE(CSSL)
                FROM  (TD-RECORD)
                LENGTH(TD-LENGTH)
                NOHANDLE
           END-EXEC.
           EXEC CICS WRITE OPERATOR
                TEXT(TD-RECORD)
                NOHANDLE
           END-EXEC.
       2200-EXIT.
           EXIT.
       3000-INQUIRE-END.
           EXEC CICS INQUIRE URIMAP END
                NOHANDLE
           END-EXEC.
       3000-EXIT.
           EXIT.
       9000-RETURN.
           EXEC CICS RETURN
           END-EXEC.
       9000-EXIT.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  ST-CODE                PIC  X(02) VALUE SPACES.
       01  EOF                    PIC  X(01) VALUE SPACES.
       01  ZC                     PIC  X(02) VALUE 'ZC'.
       01  URI-MAP.
           02  URI-PREFIX         PIC  X(04) VALUE SPACES.
           02  URI-SUFFIX         PIC  X(04) VALUE SPACES.
       01  URI-TRAN               PIC  X(04) VALUE SPACES.
       01  ZC-LENGTH              PIC S9(04) COMP VALUE 4.
       01  ZX-TRANID.
           02  FILLER             PIC  X(02) VALUE 'ZX'.
           02  ZX-SUFFIX          PIC  X(02) VALUE SPACES.
       01  CSSL                   PIC  X(04) VALUE '@tdq@'.
       01  TD-LENGTH              PIC S9(04) COMP VALUE ZEROES.
       01  TD-RECORD.
           02  FILLER             PIC  X(13) VALUE 'zECS start ZX'.
           02  TD-SUFFIX          PIC  X(02) VALUE SPACES.
           02  FILLER             PIC  X(01) VALUE SPACES.
           02  FILLER             PIC  X(04) VALUE 'for '.
           02  TD-TRAN            PIC  X(04) VALUE SPACES.
           02  FILLER             PIC  X(01) VALUE SPACES.
           02  TD-PATH            PIC  X(80) VALUE SPACES.
       01  URI-PATH               PIC X(256) VALUE SPACES.
       LINKAGE SECTION.
       01  DFHCOMMAREA            PIC  X(01).
","['Top function with no name', '1000-INQUIRE-START', '1000-EXIT', '2000-INQUIRE-NEXT', '2000-EXIT', '2100-CHECK-URIMAP', '2100-EXIT', '2200-START', '2200-EXIT', '3000-INQUIRE-END', '3000-EXIT', '9000-RETURN', '9000-EXIT']","Paragraph Top function with no name calls paragraph 1000-EXIT, 2000-EXIT, 1000-INQUIRE-START, 9000-EXIT, 3000-INQUIRE-END, 9000-RETURN, 3000-EXIT, 2000-INQUIRE-NEXT.
Paragraph 2000-INQUIRE-NEXT calls paragraph 2100-EXIT, 2100-CHECK-URIMAP.
Paragraph 2100-CHECK-URIMAP calls paragraph 2200-EXIT, 2200-START.
",97,This program executes in the PLT and performs the following: 1).  Browse URIMAP. 2).  Issue START for the zECS expiration task (ZX#) for each zECS URIMAP. 3).  Issue WTO for each START command.,,,"['EXECCICSWRITEOPERATO', 'CSSL']","1. The COBOL file is used for business applications and contains a main program block and a procedure division.
2. The main program block includes an ""EXIT"" statement that is used to terminate the program.
3. The procedure division includes paragraphs such as ""EXIT,"" ""INQUIRE-START,"" ""INQUIRE-NEXT,"" and ""CHECK-URIMAP.""
4. The ""INQUIRE-START"" paragraph is used to perform an inquiry on a URIMAP, while the ""INQUIRE-NEXT"" paragraph is used to check for the next URIMAP in the list.
5. The ""CHECK-URIMAP"" paragraph checks if the URI-PREFIX is ""ZC"" and the URI-SUFFIX is empty, and if so, it performs the ""START"" paragraph.
6. The ""START"" paragraph performs various operations such as starting a transaction, writing data to a queue, and writing data to an operator.
7. The ""EXIT"" paragraph is used to terminate the program or subroutine.","The COBOL code manages inquiries to a URIMAP, initiating with 1000-INQUIRE-START, followed by 2000-INQUIRE-NEXT which retrieves URIMAP details and checks for end conditions, leading to 2100-CHECK-URIMAP for processing. If conditions are met, it transitions to 2200-START, managing transactions. The inquiry concludes at 3000-INQUIRE-END and control is returned via 9000-RETURN, with exits systematically terminating program execution. Each section ensures smooth transitions through various functional layers of inquiry and processing.",1.0,1.0,1.0
133,cicsdev_cics-banking-sample-application-cbsa,cics-banking-sample-application-cbsa/src/base/cobol_src/INQCUST.cbl,"       CBL CICS('SP,EDF')
       IDENTIFICATION DIVISION.
       PROGRAM-ID. INQCUST.
       AUTHOR. Jon Collett.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.  IBM-370.
       OBJECT-COMPUTER.  IBM-370.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       77 SYSIDERR-RETRY               PIC 999.
       77 INQCUST-RETRY                PIC 9999.
       01 WS-CICS-WORK-AREA.
          03 WS-CICS-RESP              PIC S9(8) COMP.
          03 WS-CICS-RESP2             PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       77 SORTCODE           PIC 9(6) VALUE 987654.
       01 OUTPUT-DATA.
           03 CUSTOMER-RECORD.
              05 CUSTOMER-EYECATCHER                 PIC X(4).
                 88 CUSTOMER-EYECATCHER-VALUE        VALUE 'CUST'.
              05 CUSTOMER-KEY.
                 07 CUSTOMER-SORTCODE                PIC 9(6) DISPLAY.
                 07 CUSTOMER-NUMBER                  PIC 9(10) DISPLAY.
              05 CUSTOMER-NAME                       PIC X(60).
              05 CUSTOMER-ADDRESS                    PIC X(160).
              05 CUSTOMER-DATE-OF-BIRTH              PIC 9(8).
              05 CUSTOMER-DOB-GROUP REDEFINES CUSTOMER-DATE-OF-BIRTH.
                 07 CUSTOMER-BIRTH-DAY               PIC 99.
                 07 CUSTOMER-BIRTH-MONTH             PIC 99.
                 07 CUSTOMER-BIRTH-YEAR              PIC 9999.
              05 CUSTOMER-CREDIT-SCORE               PIC 999.
              05 CUSTOMER-CS-REVIEW-DATE             PIC 9(8).
              05 CUSTOMER-CS-GROUP
                 REDEFINES CUSTOMER-CS-REVIEW-DATE.
                 07 CUSTOMER-CS-REVIEW-DAY           PIC 99.
                 07 CUSTOMER-CS-REVIEW-MONTH         PIC 99.
                 07 CUSTOMER-CS-REVIEW-YEAR          PIC 9999.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE        PIC 9(6) VALUE 0.
          03 REQUIRED-CUST-NUMBER      PIC 9(10) VALUE 0.
       01 CUSTOMER-KY2.
          03 REQUIRED-SORT-CODE2       PIC 9(6) VALUE 0.
          03 REQUIRED-CUST-NUMBER2     PIC 9(10) VALUE 0.
       01 RANDOM-CUSTOMER              PIC 9(10) VALUE 0.
       01 HIGHEST-CUST-NUMBER          PIC 9(10) VALUE 0.
       01 EXIT-VSAM-READ               PIC X VALUE 'N'.
       01 EXIT-DB2-READ                PIC X VALUE 'N'.
       01 EXIT-IMS-READ                PIC X VALUE 'N'.
       01 WS-V-RETRIED                 PIC X VALUE 'N'.
       01 WS-D-RETRIED                 PIC X VALUE 'N'.
       01 WS-PROGRAM                   PIC X(8) VALUE SPACES.
       01 NCS-CUST-NO-STUFF.
          03 NCS-CUST-NO-NAME.
             05 NCS-CUST-NO-ACT-NAME   PIC X(8) VALUE 'HBNKCUST'.
             05 NCS-CUST-NO-TEST-SORT  PIC X(6) VALUE '      '.
             05 NCS-CUST-NO-FILL       PIC XX VALUE '  '.
          03 NCS-CUST-NO-INC           PIC 9(16) COMP VALUE 0.
          03 NCS-CUST-NO-VALUE         PIC 9(16) COMP VALUE 0.
          03 NCS-CUST-NO-RESP          PIC XX VALUE '00'.
       01 WS-PASSED-DATA.
          02 WS-TEST-KEY               PIC X(4).
          02 WS-SORT-CODE              PIC 9(6).
          02 WS-CUSTOMER-RANGE.
             07 WS-CUSTOMER-RANGE-TOP             PIC X.
             07 WS-CUSTOMER-RANGE-MIDDLE          PIC X.
             07 WS-CUSTOMER-RANGE-BOTTOM          PIC X.
       01 WS-SORT-DIV.
          03 WS-SORT-DIV1              PIC XX.
          03 WS-SORT-DIV2              PIC XX.
          03 WS-SORT-DIV3              PIC XX.
       01 WS-DISP-CUST-NO-VAL          PIC S9(18) DISPLAY.
       01 VAR-REMIX.
          03 REMIX-SCODE               PIC X(6).
          03 REMIX-NUM REDEFINES REMIX-SCODE.
             05 REMIX-SCODE-NUM        PIC 9(6).
       01 VAR-REMIX2.
          03 REMIX2-CREDIT-SCR         PIC X(3).
          03 REMIX2-NUM REDEFINES REMIX2-CREDIT-SCR.
             05 REMIX2-CREDIT-SCR-NUM  PIC 9(3).
       01 MY-ABEND-CODE                PIC XXXX.
       01 WS-STORM-DRAIN               PIC X VALUE 'N'.
       01 STORM-DRAIN-CONDITION        PIC X(20).
       01 SQLCODE-DISPLAY              PIC S9(8) DISPLAY
           SIGN LEADING SEPARATE.
       01 WS-INVOKING-PROGRAM         PIC X(8).
       01 WS-POINTER USAGE POINTER.
       01 WS-POINTER-BYTES   REDEFINES WS-POINTER PIC X(8).
       01 WS-POINTER-NUMBER  REDEFINES WS-POINTER PIC 9(8) BINARY.
       01 WS-POINTER-NUMBER-DISPLAY    PIC 9(8) DISPLAY.
       01 WS-U-TIME                    PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                 PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-MM           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-YYYY         PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-MM-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X       PIC X(4).
       01 WS-TIME-DATA.
           03 WS-TIME-NOW              PIC 9(6).
           03 WS-TIME-NOW-GRP REDEFINES WS-TIME-NOW.
              05 WS-TIME-NOW-GRP-HH    PIC 99.
              05 WS-TIME-NOW-GRP-MM    PIC 99.
              05 WS-TIME-NOW-GRP-SS    PIC 99.
       01 WS-ABEND-PGM                 PIC X(8) VALUE 'ABNDPROC'.
       01 ABNDINFO-REC.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          03 INQCUST-EYE                  PIC X(4).
          03 INQCUST-SCODE                PIC X(6).
          03 INQCUST-CUSTNO               PIC 9(10).
          03 INQCUST-NAME                 PIC X(60).
          03 INQCUST-ADDR                 PIC X(160).
          03 INQCUST-DOB.
            05 INQCUST-DOB-DD             PIC 99.
            05 INQCUST-DOB-MM             PIC 99.
            05 INQCUST-DOB-YYYY           PIC 9999.
          03 INQCUST-CREDIT-SCORE         PIC 999.
          03 INQCUST-CS-REVIEW-DT.
            05 INQCUST-CS-REVIEW-DD       PIC 99.
            05 INQCUST-CS-REVIEW-MM       PIC 99.
            05 INQCUST-CS-REVIEW-YYYY     PIC 9999.
          03 INQCUST-INQ-SUCCESS          PIC X.
          03 INQCUST-INQ-FAIL-CD          PIC X.
          03 INQCUST-PCB-POINTER          POINTER.
       PROCEDURE DIVISION USING DFHCOMMAREA.
       PREMIERE SECTION.
       P010.
           EXEC CICS HANDLE ABEND
              LABEL(ABEND-HANDLING)
           END-EXEC.
           MOVE 'N' TO INQCUST-INQ-SUCCESS
           MOVE '0' TO INQCUST-INQ-FAIL-CD
           MOVE SORTCODE TO REQUIRED-SORT-CODE.
           MOVE INQCUST-CUSTNO TO REQUIRED-CUST-NUMBER.
           IF INQCUST-CUSTNO = 0000000000 OR INQCUST-CUSTNO = 9999999999
              PERFORM READ-CUSTOMER-NCS
              IF INQCUST-INQ-SUCCESS = 'Y'
                MOVE NCS-CUST-NO-VALUE TO REQUIRED-CUST-NUMBER
              ELSE
                PERFORM GET-ME-OUT-OF-HERE
              END-IF
           END-IF.
           IF INQCUST-CUSTNO = 0000000000
              PERFORM GENERATE-RANDOM-CUSTOMER
              MOVE RANDOM-CUSTOMER TO REQUIRED-CUST-NUMBER
           END-IF.
           MOVE 'N' TO EXIT-VSAM-READ.
           MOVE 'N' TO EXIT-DB2-READ.
           MOVE 'N' TO WS-D-RETRIED.
           MOVE 'N' TO WS-V-RETRIED.
           PERFORM READ-CUSTOMER-VSAM
             UNTIL EXIT-VSAM-READ = 'Y'.
           IF INQCUST-INQ-SUCCESS = 'Y'
             MOVE '0' TO INQCUST-INQ-FAIL-CD
             MOVE CUSTOMER-EYECATCHER OF OUTPUT-DATA
                TO INQCUST-EYE
             MOVE CUSTOMER-SORTCODE OF OUTPUT-DATA
                TO INQCUST-SCODE
             MOVE CUSTOMER-NUMBER OF OUTPUT-DATA
                TO INQCUST-CUSTNO
             MOVE CUSTOMER-NAME OF OUTPUT-DATA
                TO INQCUST-NAME
             MOVE CUSTOMER-ADDRESS OF OUTPUT-DATA
                TO INQCUST-ADDR
             MOVE CUSTOMER-DATE-OF-BIRTH OF OUTPUT-DATA
                TO INQCUST-DOB
             MOVE CUSTOMER-CREDIT-SCORE OF OUTPUT-DATA
                TO INQCUST-CREDIT-SCORE
             MOVE CUSTOMER-CS-REVIEW-DATE OF OUTPUT-DATA
                TO INQCUST-CS-REVIEW-DT
           END-IF.
           PERFORM GET-ME-OUT-OF-HERE.
       P999.
           EXIT.
       READ-CUSTOMER-NCS SECTION.
       RCN010.
           PERFORM GET-LAST-CUSTOMER-VSAM
           IF INQCUST-INQ-SUCCESS = 'Y'
             MOVE REQUIRED-CUST-NUMBER2 TO NCS-CUST-NO-VALUE
           END-IF.
       RCN999.
           EXIT.
       READ-CUSTOMER-VSAM SECTION.
       RCV010.
           INITIALIZE OUTPUT-DATA.
           EXEC CICS READ FILE('CUSTOMER')
                RIDFLD(CUSTOMER-KY)
                INTO(OUTPUT-DATA)
                RESP(WS-CICS-RESP)
                RESP2(WS-CICS-RESP2)
           END-EXEC.
           IF WS-CICS-RESP = DFHRESP(NORMAL)
              MOVE 'Y' TO EXIT-VSAM-READ
              MOVE 'Y' TO INQCUST-INQ-SUCCESS
              GO TO RCV999
           END-IF.
           IF WS-CICS-RESP = DFHRESP(SYSIDERR)
              PERFORM VARYING SYSIDERR-RETRY FROM 1 BY 1
              UNTIL SYSIDERR-RETRY > 100
              OR WS-CICS-RESP IS NOT EQUAL TO DFHRESP(SYSIDERR)
                 EXEC CICS DELAY FOR SECONDS(3)
                 END-EXEC
                 EXEC CICS READ FILE('CUSTOMER')
                    RIDFLD(CUSTOMER-KY)
                    INTO(OUTPUT-DATA)
                    RESP(WS-CICS-RESP)
                    RESP2(WS-CICS-RESP2)
                  END-EXEC
                  IF WS-CICS-RESP = DFHRESP(NORMAL)
                     MOVE 'Y' TO EXIT-VSAM-READ
                     MOVE 'Y' TO INQCUST-INQ-SUCCESS
                     GO TO RCV999
                  END-IF
              END-PERFORM
           END-IF.
           IF WS-CICS-RESP = DFHRESP(NOTFND) AND
              INQCUST-CUSTNO = 0000000000
            IF INQCUST-RETRY < 1000
                PERFORM GENERATE-RANDOM-CUSTOMER-AGAIN
                MOVE RANDOM-CUSTOMER TO REQUIRED-CUST-NUMBER
                GO TO RCV999
              ELSE
                MOVE 'Y' TO EXIT-VSAM-READ
                MOVE 'N' TO INQCUST-INQ-SUCCESS
                MOVE '1' TO INQCUST-INQ-FAIL-CD
                GO TO RCV999
              END-IF
           END-IF.
           IF WS-CICS-RESP = DFHRESP(NOTFND) AND
           INQCUST-CUSTNO = 9999999999 AND
           WS-V-RETRIED = 'N'
              PERFORM GET-LAST-CUSTOMER-VSAM
              MOVE NCS-CUST-NO-VALUE TO REQUIRED-CUST-NUMBER
              MOVE 'Y' TO WS-V-RETRIED
              GO TO RCV999
           END-IF.
           IF (WS-CICS-RESP = DFHRESP(NOTFND)
                AND INQCUST-CUSTNO NOT = 9999999999)
                AND (WS-CICS-RESP = DFHRESP(NOTFND)
                AND INQCUST-CUSTNO NOT = 0000000000)
              MOVE REQUIRED-CUST-NUMBER TO CUSTOMER-NUMBER
                                           OF OUTPUT-DATA
              MOVE 'Y' TO EXIT-VSAM-READ
              MOVE 'N' TO INQCUST-INQ-SUCCESS
              MOVE '1' TO INQCUST-INQ-FAIL-CD
              MOVE SPACES TO INQCUST-ADDR
              MOVE SPACES TO INQCUST-NAME
              GO TO RCV999
           END-IF.
           IF WS-CICS-RESP NOT = DFHRESP(NORMAL)
              INITIALIZE ABNDINFO-REC
              MOVE EIBRESP    TO ABND-RESPCODE
              MOVE EIBRESP2   TO ABND-RESP2CODE
              EXEC CICS ASSIGN APPLID(ABND-APPLID)
              END-EXEC
              MOVE EIBTASKN   TO ABND-TASKNO-KEY
              MOVE EIBTRNID   TO ABND-TRANID
              PERFORM POPULATE-TIME-DATE
              MOVE WS-ORIG-DATE TO ABND-DATE
              STRING WS-TIME-NOW-GRP-HH DELIMITED BY SIZE,
                    ':' DELIMITED BY SIZE,
                     WS-TIME-NOW-GRP-MM DELIMITED BY SIZE,
                     ':' DELIMITED BY SIZE,
                     WS-TIME-NOW-GRP-MM DELIMITED BY SIZE
                     INTO ABND-TIME
              END-STRING
              MOVE WS-U-TIME   TO ABND-UTIME-KEY
              MOVE 'CVR1'      TO ABND-CODE
              EXEC CICS ASSIGN PROGRAM(ABND-PROGRAM)
              END-EXEC
              MOVE ZEROS      TO ABND-SQLCODE
              STRING 'RCV010 - CUSTOMER VSAM RECORD KEY='
                    DELIMITED BY SIZE,
                    CUSTOMER-KY DELIMITED SIZE,
                    ' GAVE VSAM RC=' DELIMITED BY SIZE,
                    ' EIBRESP=' DELIMITED BY SIZE,
                    ABND-RESPCODE DELIMITED BY SIZE,
                    ' RESP2=' DELIMITED BY SIZE,
                    ABND-RESP2CODE DELIMITED BY SIZE
                    INTO ABND-FREEFORM
              END-STRING
              EXEC CICS LINK PROGRAM(WS-ABEND-PGM)
                        COMMAREA(ABNDINFO-REC)
              END-EXEC
              DISPLAY 'CUSTOMER VSAM RECORD KEY='
                  CUSTOMER-KY ' GAVE VSAM RC='
                  WS-CICS-RESP
              IF WS-V-RETRIED = 'Y'
                 DISPLAY 'ON A RETRY'
              END-IF
              EXEC CICS ABEND ABCODE('CVR1')
                 CANCEL
              END-EXEC
           END-IF.
       RCV999.
           EXIT.
       GET-ME-OUT-OF-HERE SECTION.
       GMOFH010.
           EXEC CICS RETURN
           END-EXEC.
       GMOFH999.
           EXIT.
       ABEND-HANDLING SECTION.
       AH010.
           EXEC CICS ASSIGN
              ABCODE(MY-ABEND-CODE)
           END-EXEC.
           EVALUATE MY-ABEND-CODE
             WHEN 'AFCR'
             WHEN 'AFCS'
             WHEN 'AFCT'
               MOVE 'Y' TO WS-STORM-DRAIN
               DISPLAY 'INQCUST: Check-For-Storm-Drain-VSAM: Storm '
                       'Drain condition (Abend ' MY-ABEND-CODE ') '
                       'has been met.'
               EXEC CICS SYNCPOINT ROLLBACK
                   RESP(WS-CICS-RESP)
                   RESP2(WS-CICS-RESP2)
               END-EXEC
               IF WS-CICS-RESP NOT = DFHRESP(NORMAL)
                 INITIALIZE ABNDINFO-REC
                 MOVE EIBRESP    TO ABND-RESPCODE
                 MOVE EIBRESP2   TO ABND-RESP2CODE
                 EXEC CICS ASSIGN APPLID(ABND-APPLID)
                 END-EXEC
                 MOVE EIBTASKN   TO ABND-TASKNO-KEY
                 MOVE EIBTRNID   TO ABND-TRANID
                 PERFORM POPULATE-TIME-DATE
                 MOVE WS-ORIG-DATE TO ABND-DATE
                 STRING WS-TIME-NOW-GRP-HH DELIMITED BY SIZE,
                       ':' DELIMITED BY SIZE,
                        WS-TIME-NOW-GRP-MM DELIMITED BY SIZE,
                        ':' DELIMITED BY SIZE,
                        WS-TIME-NOW-GRP-MM DELIMITED BY SIZE
                        INTO ABND-TIME
                 END-STRING
                 MOVE WS-U-TIME   TO ABND-UTIME-KEY
                 MOVE 'HROL'      TO ABND-CODE
                 EXEC CICS ASSIGN PROGRAM(ABND-PROGRAM)
                 END-EXEC
                 MOVE 0 TO ABND-SQLCODE
                 STRING 'AH010 -Unable to perform SYNCPOINT ROLLBACK.'
                       DELIMITED BY SIZE,
                       ' Possible integrity issue following VSAM RLS '
                       DELIMITED BY SIZE,
                       ' abend.' DELIMITED BY SIZE,
                       ' EIBRESP=' DELIMITED BY SIZE,
                       ABND-RESPCODE DELIMITED BY SIZE,
                       ' RESP2=' DELIMITED BY SIZE,
                       ABND-RESP2CODE DELIMITED BY SIZE
                       INTO ABND-FREEFORM
                 END-STRING
                 EXEC CICS LINK PROGRAM(WS-ABEND-PGM)
                           COMMAREA(ABNDINFO-REC)
                 END-EXEC
                 DISPLAY 'INQCUST: Unable to perform Synpoint Rollback.'
                 ' Possible Integrity issue following VSAM RLS abend'
                 ' RESP CODE=' WS-CICS-RESP ' RESP2 CODE=' WS-CICS-RESP2
                  EXEC CICS ABEND
                     ABCODE ('HROL')
                     CANCEL
                  END-EXEC
               END-IF
               MOVE 'N' TO INQCUST-INQ-SUCCESS
               MOVE '2' TO INQCUST-INQ-FAIL-CD
               EXEC CICS RETURN
               END-EXEC
           END-EVALUATE.
           IF WS-STORM-DRAIN = 'N'
              EXEC CICS ABEND ABCODE( MY-ABEND-CODE)
              NODUMP
              END-EXEC
           END-IF.
       AH999.
           EXIT.
       GET-LAST-CUSTOMER-VSAM SECTION.
       GLCV010.
           INITIALIZE OUTPUT-DATA.
           MOVE HIGH-VALUES TO CUSTOMER-KY2.
           EXEC CICS STARTBR FILE('CUSTOMER')
                RIDFLD(CUSTOMER-KY2)
                RESP(WS-CICS-RESP)
                RESP2(WS-CICS-RESP2)
           END-EXEC.
           IF WS-CICS-RESP = DFHRESP(SYSIDERR)
              PERFORM VARYING SYSIDERR-RETRY FROM 1 BY 1
              UNTIL SYSIDERR-RETRY > 100
              OR WS-CICS-RESP = DFHRESP(NORMAL)
              OR WS-CICS-RESP IS NOT EQUAL TO DFHRESP(SYSIDERR)
                 EXEC CICS DELAY FOR SECONDS(3)
                 END-EXEC
                 EXEC CICS STARTBR FILE('CUSTOMER')
                    RIDFLD(CUSTOMER-KY2)
                    RESP(WS-CICS-RESP)
                    RESP2(WS-CICS-RESP2)
                 END-EXEC
              END-PERFORM
           END-IF.
           IF WS-CICS-RESP IS NOT EQUAL TO DFHRESP(NORMAL)
               MOVE 'N' TO INQCUST-INQ-SUCCESS
               MOVE '9' TO INQCUST-INQ-FAIL-CD
               GO TO GLCVE999
           END-IF.
           EXEC CICS READPREV FILE('CUSTOMER')
                RIDFLD(CUSTOMER-KY2)
                INTO(OUTPUT-DATA)
                RESP(WS-CICS-RESP)
                RESP2(WS-CICS-RESP2)
           END-EXEC.
           IF WS-CICS-RESP = DFHRESP(SYSIDERR)
              PERFORM VARYING SYSIDERR-RETRY FROM 1 BY 1
              UNTIL SYSIDERR-RETRY > 100
              OR WS-CICS-RESP = DFHRESP(NORMAL)
              OR WS-CICS-RESP IS NOT EQUAL TO DFHRESP(SYSIDERR)
                 EXEC CICS DELAY FOR SECONDS(3)
                 END-EXEC
                 EXEC CICS READPREV FILE('CUSTOMER')
                      RIDFLD(CUSTOMER-KY2)
                      INTO(OUTPUT-DATA)
                      RESP(WS-CICS-RESP)
                      RESP2(WS-CICS-RESP2)
                 END-EXEC
              END-PERFORM
           END-IF.
           IF WS-CICS-RESP IS NOT EQUAL TO DFHRESP(NORMAL)
              MOVE 'N' TO INQCUST-INQ-SUCCESS
              MOVE '9' TO INQCUST-INQ-FAIL-CD
              GO TO GLCVE999
           END-IF.
           EXEC CICS ENDBR FILE('CUSTOMER')
                RESP(WS-CICS-RESP)
                RESP2(WS-CICS-RESP2)
           END-EXEC.
           IF WS-CICS-RESP = DFHRESP(SYSIDERR)
              PERFORM VARYING SYSIDERR-RETRY FROM 1 BY 1
              UNTIL SYSIDERR-RETRY > 100
              OR WS-CICS-RESP = DFHRESP(NORMAL)
              OR WS-CICS-RESP IS NOT EQUAL TO DFHRESP(SYSIDERR)
                 EXEC CICS DELAY FOR SECONDS(3)
                 END-EXEC
                 EXEC CICS ENDBR FILE('CUSTOMER')
                      RESP(WS-CICS-RESP)
                      RESP2(WS-CICS-RESP2)
                 END-EXEC
              END-PERFORM
           IF WS-CICS-RESP IS NOT EQUAL TO DFHRESP(NORMAL)
              MOVE 'N' TO INQCUST-INQ-SUCCESS
              MOVE '9' TO INQCUST-INQ-FAIL-CD
              GO TO GLCVE999
           END-IF.
           MOVE 'Y' TO INQCUST-INQ-SUCCESS.
       GLCVE999.
           EXIT.
       POPULATE-TIME-DATE SECTION.
       PTD010.
           EXEC CICS ASKTIME
              ABSTIME(WS-U-TIME)
           END-EXEC.
           EXEC CICS FORMATTIME
                     ABSTIME(WS-U-TIME)
                     DDMMYYYY(WS-ORIG-DATE)
                     TIME(WS-TIME-NOW)
                     DATESEP
           END-EXEC.
       PTD999.
           EXIT.
       GENERATE-RANDOM-CUSTOMER SECTION.
       GRC010.
           MOVE ZERO TO INQCUST-RETRY.
           COMPUTE RANDOM-CUSTOMER = ((NCS-CUST-NO-VALUE - 1)
       GRC999.
           EXIT.
       GENERATE-RANDOM-CUSTOMER-AGAIN SECTION.
       GRCA10.
           ADD 1 TO INQCUST-RETRY GIVING INQCUST-RETRY.
           COMPUTE RANDOM-CUSTOMER = ((NCS-CUST-NO-VALUE - 1)
       GRCA99.
            EXIT.
","       FILE SECTION.
       WORKING-STORAGE SECTION.
       77 SYSIDERR-RETRY               PIC 999.
       77 INQCUST-RETRY                PIC 9999.
       01 WS-CICS-WORK-AREA.
          03 WS-CICS-RESP              PIC S9(8) COMP.
          03 WS-CICS-RESP2             PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       77 SORTCODE           PIC 9(6) VALUE 987654.
       01 OUTPUT-DATA.
           03 CUSTOMER-RECORD.
              05 CUSTOMER-EYECATCHER                 PIC X(4).
                 88 CUSTOMER-EYECATCHER-VALUE        VALUE 'CUST'.
              05 CUSTOMER-KEY.
                 07 CUSTOMER-SORTCODE                PIC 9(6) DISPLAY.
                 07 CUSTOMER-NUMBER                  PIC 9(10) DISPLAY.
              05 CUSTOMER-NAME                       PIC X(60).
              05 CUSTOMER-ADDRESS                    PIC X(160).
              05 CUSTOMER-DATE-OF-BIRTH              PIC 9(8).
              05 CUSTOMER-DOB-GROUP REDEFINES CUSTOMER-DATE-OF-BIRTH.
                 07 CUSTOMER-BIRTH-DAY               PIC 99.
                 07 CUSTOMER-BIRTH-MONTH             PIC 99.
                 07 CUSTOMER-BIRTH-YEAR              PIC 9999.
              05 CUSTOMER-CREDIT-SCORE               PIC 999.
              05 CUSTOMER-CS-REVIEW-DATE             PIC 9(8).
              05 CUSTOMER-CS-GROUP
                 REDEFINES CUSTOMER-CS-REVIEW-DATE.
                 07 CUSTOMER-CS-REVIEW-DAY           PIC 99.
                 07 CUSTOMER-CS-REVIEW-MONTH         PIC 99.
                 07 CUSTOMER-CS-REVIEW-YEAR          PIC 9999.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE        PIC 9(6) VALUE 0.
          03 REQUIRED-CUST-NUMBER      PIC 9(10) VALUE 0.
       01 CUSTOMER-KY2.
          03 REQUIRED-SORT-CODE2       PIC 9(6) VALUE 0.
          03 REQUIRED-CUST-NUMBER2     PIC 9(10) VALUE 0.
       01 RANDOM-CUSTOMER              PIC 9(10) VALUE 0.
       01 HIGHEST-CUST-NUMBER          PIC 9(10) VALUE 0.
       01 EXIT-VSAM-READ               PIC X VALUE 'N'.
       01 EXIT-DB2-READ                PIC X VALUE 'N'.
       01 EXIT-IMS-READ                PIC X VALUE 'N'.
       01 WS-V-RETRIED                 PIC X VALUE 'N'.
       01 WS-D-RETRIED                 PIC X VALUE 'N'.
       01 WS-PROGRAM                   PIC X(8) VALUE SPACES.
       01 NCS-CUST-NO-STUFF.
          03 NCS-CUST-NO-NAME.
             05 NCS-CUST-NO-ACT-NAME   PIC X(8) VALUE 'HBNKCUST'.
             05 NCS-CUST-NO-TEST-SORT  PIC X(6) VALUE '      '.
             05 NCS-CUST-NO-FILL       PIC XX VALUE '  '.
          03 NCS-CUST-NO-INC           PIC 9(16) COMP VALUE 0.
          03 NCS-CUST-NO-VALUE         PIC 9(16) COMP VALUE 0.
          03 NCS-CUST-NO-RESP          PIC XX VALUE '00'.
       01 WS-PASSED-DATA.
          02 WS-TEST-KEY               PIC X(4).
          02 WS-SORT-CODE              PIC 9(6).
          02 WS-CUSTOMER-RANGE.
             07 WS-CUSTOMER-RANGE-TOP             PIC X.
             07 WS-CUSTOMER-RANGE-MIDDLE          PIC X.
             07 WS-CUSTOMER-RANGE-BOTTOM          PIC X.
       01 WS-SORT-DIV.
          03 WS-SORT-DIV1              PIC XX.
          03 WS-SORT-DIV2              PIC XX.
          03 WS-SORT-DIV3              PIC XX.
       01 WS-DISP-CUST-NO-VAL          PIC S9(18) DISPLAY.
       01 VAR-REMIX.
          03 REMIX-SCODE               PIC X(6).
          03 REMIX-NUM REDEFINES REMIX-SCODE.
             05 REMIX-SCODE-NUM        PIC 9(6).
       01 VAR-REMIX2.
          03 REMIX2-CREDIT-SCR         PIC X(3).
          03 REMIX2-NUM REDEFINES REMIX2-CREDIT-SCR.
             05 REMIX2-CREDIT-SCR-NUM  PIC 9(3).
       01 MY-ABEND-CODE                PIC XXXX.
       01 WS-STORM-DRAIN               PIC X VALUE 'N'.
       01 STORM-DRAIN-CONDITION        PIC X(20).
       01 SQLCODE-DISPLAY              PIC S9(8) DISPLAY
           SIGN LEADING SEPARATE.
       01 WS-INVOKING-PROGRAM         PIC X(8).
       01 WS-POINTER USAGE POINTER.
       01 WS-POINTER-BYTES   REDEFINES WS-POINTER PIC X(8).
       01 WS-POINTER-NUMBER  REDEFINES WS-POINTER PIC 9(8) BINARY.
       01 WS-POINTER-NUMBER-DISPLAY    PIC 9(8) DISPLAY.
       01 WS-U-TIME                    PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                 PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-MM           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-YYYY         PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-MM-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X       PIC X(4).
       01 WS-TIME-DATA.
           03 WS-TIME-NOW              PIC 9(6).
           03 WS-TIME-NOW-GRP REDEFINES WS-TIME-NOW.
              05 WS-TIME-NOW-GRP-HH    PIC 99.
              05 WS-TIME-NOW-GRP-MM    PIC 99.
              05 WS-TIME-NOW-GRP-SS    PIC 99.
       01 WS-ABEND-PGM                 PIC X(8) VALUE 'ABNDPROC'.
       01 ABNDINFO-REC.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          03 INQCUST-EYE                  PIC X(4).
          03 INQCUST-SCODE                PIC X(6).
          03 INQCUST-CUSTNO               PIC 9(10).
          03 INQCUST-NAME                 PIC X(60).
          03 INQCUST-ADDR                 PIC X(160).
          03 INQCUST-DOB.
            05 INQCUST-DOB-DD             PIC 99.
            05 INQCUST-DOB-MM             PIC 99.
            05 INQCUST-DOB-YYYY           PIC 9999.
          03 INQCUST-CREDIT-SCORE         PIC 999.
          03 INQCUST-CS-REVIEW-DT.
            05 INQCUST-CS-REVIEW-DD       PIC 99.
            05 INQCUST-CS-REVIEW-MM       PIC 99.
            05 INQCUST-CS-REVIEW-YYYY     PIC 9999.
          03 INQCUST-INQ-SUCCESS          PIC X.
          03 INQCUST-INQ-FAIL-CD          PIC X.
          03 INQCUST-PCB-POINTER          POINTER.
","['PREMIERE', 'READ-CUSTOMER-NCS', 'READ-CUSTOMER-VSAM', 'GET-ME-OUT-OF-HERE', 'ABEND-HANDLING', 'GET-LAST-CUSTOMER-VSAM', 'POPULATE-TIME-DATE', 'GENERATE-RANDOM-CUSTOMER', 'GENERATE-RANDOM-CUSTOMER-AGAIN', 'P010', 'P999', 'RCN010', 'RCN999', 'RCV010', 'RCV999', 'GMOFH010', 'GMOFH999', 'AH010', 'AH999', 'GLCV010', 'GLCVE999', 'PTD010', 'PTD999', 'GRC010', 'GRC999', 'GRCA10', 'GRCA99']","Paragraph PREMIERE calls paragraph READ-CUSTOMER-NCS, GET-ME-OUT-OF-HERE, READ-CUSTOMER-VSAM, GENERATE-RANDOM-CUSTOMER.
Paragraph READ-CUSTOMER-NCS calls paragraph GET-LAST-CUSTOMER-VSAM.
Paragraph READ-CUSTOMER-VSAM calls paragraph GENERATE-RANDOM-CUSTOMER-AGAIN, POPULATE-TIME-DATE, GET-LAST-CUSTOMER-VSAM, RCV999.
Paragraph ABEND-HANDLING calls paragraph POPULATE-TIME-DATE.
Paragraph GET-LAST-CUSTOMER-VSAM calls paragraph GLCVE999.
",504,This program takes customer number as input and returns to the calling program a commarea containing all of the customer information for that record. What gets returned is the CUSTOMER data if the CUSTOMER is found or a CUSTOMER record set to low values if a matching CUSTOMER record could not be found. If there is any kind of problem then an appropriate abend is issued.,['WS-ABEND-PGM'],,['CUSTOMER'],"1. The COBOL file is a program that handles customer data and performs various operations such as reading customer information, generating random customer numbers, and handling errors.

2. The program consists of multiple sections and paragraphs, each with its own specific functionality.

3. The file includes subroutines for reading customer data from different sources, such as VSAM files and NCS (Network Common Services).

4. The program also includes error handling logic to handle exceptions and ensure the integrity of the data.

5. The file uses various CICS (Customer Information Control System) verbs to interact with the underlying operating system and perform tasks such as returning control to the system and formatting time values.

6. The program includes a subroutine for generating random customer numbers, which involves computing a random value based on the maximum customer number and retrying if necessary.

7. The file also includes a subroutine for populating time and date values into variables, which involves retrieving the current system time and formatting it according to specific requirements.

8. Overall, the COBOL file is designed to efficiently manage customer data and perform various operations related to customer management.","The COBOL program manages customer inquiries and retrieves customer data. It begins by validating customer numbers and fetching customer details from a VSAM file. If a standard inquiry fails, it generates a random customer number. It handles errors, particularly abnormal conditions through a dedicated subroutine, while ensuring time and date are populated for accurate logging. Successful retrievals lead to data completion processes and program termination as necessary, ensuring robust customer data management.",1.0,1.0,0.75
137,cicsdev_cics-banking-sample-application-cbsa,cics-banking-sample-application-cbsa/src/base/cobol_src/UPDACC.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       CBL CICS('SP,EDF,DLI')
       CBL SQL
       IDENTIFICATION DIVISION.
       PROGRAM-ID. UPDACC.
       AUTHOR. Jon Collett.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.  IBM-370.
       OBJECT-COMPUTER.  IBM-370.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 SORTCODE           PIC 9(6) VALUE 987654.
       77 SYSIDERR-RETRY                PIC 999.
           EXEC SQL
              INCLUDE ACCDB2
           END-EXEC.
       01 HOST-ACCOUNT-ROW.
          03 HV-ACCOUNT-EYECATCHER      PIC X(4).
          03 HV-ACCOUNT-CUST-NO         PIC X(10).
          03 HV-ACCOUNT-KEY.
             05 HV-ACCOUNT-SORTCODE     PIC X(6).
             05 HV-ACCOUNT-ACC-NO       PIC X(8).
          03 HV-ACCOUNT-ACC-TYPE        PIC X(8).
          03 HV-ACCOUNT-INT-RATE        PIC S9(4)V99 COMP-3.
          03 HV-ACCOUNT-OPENED          PIC X(10).
          03 HV-ACCOUNT-OVERDRAFT-LIM   PIC S9(9) COMP.
          03 HV-ACCOUNT-LAST-STMT       PIC X(10).
          03 HV-ACCOUNT-NEXT-STMT       PIC X(10).
          03 HV-ACCOUNT-AVAIL-BAL       PIC S9(10)V99 COMP-3.
          03 HV-ACCOUNT-ACTUAL-BAL      PIC S9(10)V99 COMP-3.
       EXEC SQL
          INCLUDE SQLCA
       END-EXEC.
       01 SQLCODE-DISPLAY             PIC S9(8) DISPLAY
            SIGN LEADING SEPARATE.
       01 WS-CICS-WORK-AREA.
          05 WS-CICS-RESP               PIC S9(8) COMP.
          05 WS-CICS-RESP2              PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       01 DB2-DATE-REFORMAT.
          03 DB2-DATE-REF-YR            PIC 9(4).
          03 FILLER                     PIC X.
          03 DB2-DATE-REF-MNTH          PIC 99.
          03 FILLER                     PIC X.
          03 DB2-DATE-REF-DAY           PIC 99.
       01 WS-ACC-DATA.
              03 ACCOUNT-DATA.
                 05 ACCOUNT-EYE-CATCHER        PIC X(4).
                 88 ACCOUNT-EYECATCHER-VALUE        VALUE 'ACCT'.
                 05 ACCOUNT-CUST-NO            PIC 9(10).
                 05 ACCOUNT-KEY.
                    07 ACCOUNT-SORT-CODE       PIC 9(6).
                    07 ACCOUNT-NUMBER          PIC 9(8).
                 05 ACCOUNT-TYPE               PIC X(8).
                 05 ACCOUNT-INTEREST-RATE      PIC 9(4)V99.
                 05 ACCOUNT-OPENED             PIC 9(8).
                 05 ACCOUNT-OPENED-GROUP REDEFINES ACCOUNT-OPENED.
                    07 ACCOUNT-OPENED-DAY       PIC 99.
                    07 ACCOUNT-OPENED-MONTH     PIC 99.
                    07 ACCOUNT-OPENED-YEAR      PIC 9999.
                 05 ACCOUNT-OVERDRAFT-LIMIT    PIC 9(8).
                 05 ACCOUNT-LAST-STMT-DATE     PIC 9(8).
                 05 ACCOUNT-LAST-STMT-GROUP
                    REDEFINES ACCOUNT-LAST-STMT-DATE.
                    07 ACCOUNT-LAST-STMT-DAY   PIC 99.
                    07 ACCOUNT-LAST-STMT-MONTH PIC 99.
                    07 ACCOUNT-LAST-STMT-YEAR  PIC 9999.
                 05 ACCOUNT-NEXT-STMT-DATE     PIC 9(8).
                 05 ACCOUNT-NEXT-STMT-GROUP
                   REDEFINES ACCOUNT-NEXT-STMT-DATE.
                    07 ACCOUNT-NEXT-STMT-DAY   PIC 99.
                    07 ACCOUNT-NEXT-STMT-MONTH PIC 99.
                    07 ACCOUNT-NEXT-STMT-YEAR  PIC 9999.
                 05 ACCOUNT-AVAILABLE-BALANCE  PIC S9(10)V99.
                 05 ACCOUNT-ACTUAL-BALANCE     PIC S9(10)V99.
       01 WS-EIBTASKN12                 PIC 9(12)     VALUE 0.
       01 WS-SQLCODE-DISP               PIC 9(9)      VALUE 0.
       01 DESIRED-ACC-KEY.
          03 DESIRED-SORT-CODE          PIC 9(6).
          03 DESIRED-ACC-NO             PIC 9(8).
       01 NEW-ACCOUNT-AVAILABLE-BALANCE PIC S9(10)V99 VALUE 0.
       01 NEW-ACCOUNT-ACTUAL-BALANCE    PIC S9(10)V99 VALUE 0.
       01 WS-ACC-REC-LEN                PIC S9(4) COMP
                                                      VALUE 0.
       01 WS-U-TIME                     PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                  PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD            PIC 99.
          03 FILLER                     PIC X.
          03 WS-ORIG-DATE-MM            PIC 99.
          03 FILLER                     PIC X.
          03 WS-ORIG-DATE-YYYY          PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X          PIC XX.
          03 FILLER                     PIC X         VALUE '.'.
          03 WS-ORIG-DATE-MM-X          PIC XX.
          03 FILLER                     PIC X         VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X        PIC X(4).
       01 REJ-REASON                    PIC XX        VALUE SPACES.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE         PIC 9(6)      VALUE 0.
          03 REQUIRED-ACC-NUM           PIC 9(8)      VALUE 0.
       01 STORM-DRAIN-CONDITION         PIC X(20).
       01 WS-TIME-DATA.
          03 WS-TIME-NOW                PIC 9(6).
          03 WS-TIME-NOW-GRP REDEFINES WS-TIME-NOW.
             05 WS-TIME-NOW-GRP-HH      PIC 99.
             05 WS-TIME-NOW-GRP-MM      PIC 99.
             05 WS-TIME-NOW-GRP-SS      PIC 99.
       01 WS-ABEND-PGM                  PIC X(8)      VALUE 'ABNDPROC'.
       01 ABNDINFO-REC.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          03 COMM-EYE                  PIC X(4).
          03 COMM-CUSTNO               PIC X(10).
          03 COMM-SCODE                PIC X(6).
          03 COMM-ACCNO                PIC 9(8).
          03 COMM-ACC-TYPE             PIC X(8).
          03 COMM-INT-RATE             PIC 9(4)V99.
          03 COMM-OPENED               PIC 9(8).
          03 COMM-OPENED-GROUP REDEFINES COMM-OPENED.
             05 COMM-OPENED-DAY              PIC 99.
             05 COMM-OPENED-MONTH            PIC 99.
             05 COMM-OPENED-YEAR             PIC 9999.
          03 COMM-OVERDRAFT            PIC 9(8).
          03 COMM-LAST-STMT-DT         PIC 9(8).
          03 COMM-LAST-STMNT-GROUP REDEFINES COMM-LAST-STMT-DT.
             05 COMM-LASTST-DAY               PIC 99.
             05 COMM-LASTST-MONTH             PIC 99.
             05 COMM-LASTST-YEAR              PIC 9999.
          03 COMM-NEXT-STMT-DT         PIC 9(8).
          03 COMM-NEXT-STMNT-GROUP REDEFINES COMM-NEXT-STMT-DT.
             05 COMM-NEXTST-DAY               PIC 99.
             05 COMM-NEXTST-MONTH             PIC 99.
             05 COMM-NEXTST-YEAR              PIC 9999.
          03 COMM-AVAIL-BAL            PIC S9(10)V99.
          03 COMM-ACTUAL-BAL           PIC S9(10)V99.
          03 COMM-SUCCESS              PIC X.
       PROCEDURE DIVISION.
       PREMIERE SECTION.
       A010.
           MOVE SORTCODE TO COMM-SCODE.
           MOVE SORTCODE TO DESIRED-SORT-CODE.
           PERFORM UPDATE-ACCOUNT-DB2
           PERFORM GET-ME-OUT-OF-HERE.
       A999.
           EXIT.
       UPDATE-ACCOUNT-DB2 SECTION.
       UAD010.
           MOVE COMM-ACCNO TO DESIRED-ACC-NO.
           MOVE DESIRED-SORT-CODE TO HV-ACCOUNT-SORTCODE.
           MOVE DESIRED-ACC-NO TO HV-ACCOUNT-ACC-NO.
           EXEC SQL
              SELECT ACCOUNT_EYECATCHER,
                     ACCOUNT_CUSTOMER_NUMBER,
                     ACCOUNT_SORTCODE,
                     ACCOUNT_NUMBER,
                     ACCOUNT_TYPE,
                     ACCOUNT_INTEREST_RATE,
                     ACCOUNT_OPENED,
                     ACCOUNT_OVERDRAFT_LIMIT,
                     ACCOUNT_LAST_STATEMENT,
                     ACCOUNT_NEXT_STATEMENT,
                     ACCOUNT_AVAILABLE_BALANCE,
                     ACCOUNT_ACTUAL_BALANCE
              INTO  :HV-ACCOUNT-EYECATCHER,
                    :HV-ACCOUNT-CUST-NO,
                    :HV-ACCOUNT-SORTCODE,
                    :HV-ACCOUNT-ACC-NO,
                    :HV-ACCOUNT-ACC-TYPE,
                    :HV-ACCOUNT-INT-RATE,
                    :HV-ACCOUNT-OPENED,
                    :HV-ACCOUNT-OVERDRAFT-LIM,
                    :HV-ACCOUNT-LAST-STMT,
                    :HV-ACCOUNT-NEXT-STMT,
                    :HV-ACCOUNT-AVAIL-BAL,
                    :HV-ACCOUNT-ACTUAL-BAL
              FROM ACCOUNT
              WHERE  (ACCOUNT_SORTCODE = :HV-ACCOUNT-SORTCODE AND
                      ACCOUNT_NUMBER = :HV-ACCOUNT-ACC-NO)
           END-EXEC.
           IF SQLCODE NOT = 0
              MOVE 'N' TO COMM-SUCCESS
              MOVE SQLCODE TO SQLCODE-DISPLAY
              DISPLAY 'ERROR: UPDACC returned ' SQLCODE-DISPLAY
              ' on SELECT'
              GO TO UAD999
           END-IF.
           IF (COMM-ACC-TYPE = SPACES OR COMM-ACC-TYPE(1:1) = ' ')
              MOVE 'N' TO COMM-SUCCESS
              DISPLAY 'ERROR: UPDACC has invalid account-type'
              GO TO UAD999
           END-IF.
           MOVE COMM-ACC-TYPE  TO HV-ACCOUNT-ACC-TYPE.
           MOVE COMM-OVERDRAFT TO HV-ACCOUNT-OVERDRAFT-LIM.
           MOVE COMM-INT-RATE  TO HV-ACCOUNT-INT-RATE.
           EXEC SQL
              UPDATE ACCOUNT
              SET ACCOUNT_TYPE = :HV-ACCOUNT-ACC-TYPE,
                  ACCOUNT_INTEREST_RATE = :HV-ACCOUNT-INT-RATE,
                  ACCOUNT_OVERDRAFT_LIMIT = :HV-ACCOUNT-OVERDRAFT-LIM
              WHERE (ACCOUNT_SORTCODE = :HV-ACCOUNT-SORTCODE AND
                     ACCOUNT_NUMBER = :HV-ACCOUNT-ACC-NO)
           END-EXEC.
           IF SQLCODE NOT = 0
              MOVE 'N' TO COMM-SUCCESS
              MOVE SQLCODE TO SQLCODE-DISPLAY
              DISPLAY 'ERROR: UPDACC returned ' SQLCODE-DISPLAY
              ' on UPDATE'
              GO TO UAD999
           END-IF.
           MOVE HV-ACCOUNT-EYECATCHER TO COMM-EYE.
           MOVE HV-ACCOUNT-CUST-NO    TO COMM-CUSTNO.
           MOVE HV-ACCOUNT-SORTCODE   TO COMM-SCODE.
           MOVE HV-ACCOUNT-ACC-NO     TO COMM-ACCNO.
           MOVE HV-ACCOUNT-ACC-TYPE   TO COMM-ACC-TYPE.
           MOVE HV-ACCOUNT-INT-RATE   TO COMM-INT-RATE.
           INITIALIZE DB2-DATE-REFORMAT.
           MOVE HV-ACCOUNT-OPENED     TO DB2-DATE-REFORMAT.
           MOVE DB2-DATE-REF-YR       TO COMM-OPENED-YEAR.
           MOVE DB2-DATE-REF-MNTH     TO COMM-OPENED-MONTH.
           MOVE DB2-DATE-REF-DAY      TO COMM-OPENED-DAY.
           MOVE HV-ACCOUNT-OVERDRAFT-LIM TO COMM-OVERDRAFT.
           INITIALIZE DB2-DATE-REFORMAT.
           MOVE HV-ACCOUNT-LAST-STMT  TO DB2-DATE-REFORMAT.
           MOVE DB2-DATE-REF-YR       TO COMM-LASTST-YEAR.
           MOVE DB2-DATE-REF-MNTH     TO COMM-LASTST-MONTH.
           MOVE DB2-DATE-REF-DAY      TO COMM-LASTST-DAY.
           INITIALIZE DB2-DATE-REFORMAT.
           MOVE HV-ACCOUNT-NEXT-STMT  TO DB2-DATE-REFORMAT.
           MOVE DB2-DATE-REF-YR       TO COMM-NEXTST-YEAR.
           MOVE DB2-DATE-REF-MNTH     TO COMM-NEXTST-MONTH.
           MOVE DB2-DATE-REF-DAY      TO COMM-NEXTST-DAY.
           MOVE HV-ACCOUNT-AVAIL-BAL  TO COMM-AVAIL-BAL.
           MOVE HV-ACCOUNT-ACTUAL-BAL TO COMM-ACTUAL-BAL.
           MOVE 'Y' TO COMM-SUCCESS.
       UAD999.
           EXIT.
       GET-ME-OUT-OF-HERE SECTION.
       GMOOH010.
           EXEC CICS RETURN
           END-EXEC.
       GMOOH999.
           EXIT.
       POPULATE-TIME-DATE SECTION.
       PTD010.
           EXEC CICS ASKTIME
              ABSTIME(WS-U-TIME)
           END-EXEC.
           EXEC CICS FORMATTIME
                     ABSTIME(WS-U-TIME)
                     DDMMYYYY(WS-ORIG-DATE)
                     TIME(WS-TIME-NOW)
                     DATESEP
           END-EXEC.
       PTD999.
           EXIT.
","       WORKING-STORAGE SECTION.
       77 SORTCODE           PIC 9(6) VALUE 987654.
       77 SYSIDERR-RETRY                PIC 999.
           EXEC SQL
              INCLUDE ACCDB2
           END-EXEC.
       01 HOST-ACCOUNT-ROW.
          03 HV-ACCOUNT-EYECATCHER      PIC X(4).
          03 HV-ACCOUNT-CUST-NO         PIC X(10).
          03 HV-ACCOUNT-KEY.
             05 HV-ACCOUNT-SORTCODE     PIC X(6).
             05 HV-ACCOUNT-ACC-NO       PIC X(8).
          03 HV-ACCOUNT-ACC-TYPE        PIC X(8).
          03 HV-ACCOUNT-INT-RATE        PIC S9(4)V99 COMP-3.
          03 HV-ACCOUNT-OPENED          PIC X(10).
          03 HV-ACCOUNT-OVERDRAFT-LIM   PIC S9(9) COMP.
          03 HV-ACCOUNT-LAST-STMT       PIC X(10).
          03 HV-ACCOUNT-NEXT-STMT       PIC X(10).
          03 HV-ACCOUNT-AVAIL-BAL       PIC S9(10)V99 COMP-3.
          03 HV-ACCOUNT-ACTUAL-BAL      PIC S9(10)V99 COMP-3.
       EXEC SQL
          INCLUDE SQLCA
       END-EXEC.
       01 SQLCODE-DISPLAY             PIC S9(8) DISPLAY
            SIGN LEADING SEPARATE.
       01 WS-CICS-WORK-AREA.
          05 WS-CICS-RESP               PIC S9(8) COMP.
          05 WS-CICS-RESP2              PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       01 DB2-DATE-REFORMAT.
          03 DB2-DATE-REF-YR            PIC 9(4).
          03 FILLER                     PIC X.
          03 DB2-DATE-REF-MNTH          PIC 99.
          03 FILLER                     PIC X.
          03 DB2-DATE-REF-DAY           PIC 99.
       01 WS-ACC-DATA.
              03 ACCOUNT-DATA.
                 05 ACCOUNT-EYE-CATCHER        PIC X(4).
                 88 ACCOUNT-EYECATCHER-VALUE        VALUE 'ACCT'.
                 05 ACCOUNT-CUST-NO            PIC 9(10).
                 05 ACCOUNT-KEY.
                    07 ACCOUNT-SORT-CODE       PIC 9(6).
                    07 ACCOUNT-NUMBER          PIC 9(8).
                 05 ACCOUNT-TYPE               PIC X(8).
                 05 ACCOUNT-INTEREST-RATE      PIC 9(4)V99.
                 05 ACCOUNT-OPENED             PIC 9(8).
                 05 ACCOUNT-OPENED-GROUP REDEFINES ACCOUNT-OPENED.
                    07 ACCOUNT-OPENED-DAY       PIC 99.
                    07 ACCOUNT-OPENED-MONTH     PIC 99.
                    07 ACCOUNT-OPENED-YEAR      PIC 9999.
                 05 ACCOUNT-OVERDRAFT-LIMIT    PIC 9(8).
                 05 ACCOUNT-LAST-STMT-DATE     PIC 9(8).
                 05 ACCOUNT-LAST-STMT-GROUP
                    REDEFINES ACCOUNT-LAST-STMT-DATE.
                    07 ACCOUNT-LAST-STMT-DAY   PIC 99.
                    07 ACCOUNT-LAST-STMT-MONTH PIC 99.
                    07 ACCOUNT-LAST-STMT-YEAR  PIC 9999.
                 05 ACCOUNT-NEXT-STMT-DATE     PIC 9(8).
                 05 ACCOUNT-NEXT-STMT-GROUP
                   REDEFINES ACCOUNT-NEXT-STMT-DATE.
                    07 ACCOUNT-NEXT-STMT-DAY   PIC 99.
                    07 ACCOUNT-NEXT-STMT-MONTH PIC 99.
                    07 ACCOUNT-NEXT-STMT-YEAR  PIC 9999.
                 05 ACCOUNT-AVAILABLE-BALANCE  PIC S9(10)V99.
                 05 ACCOUNT-ACTUAL-BALANCE     PIC S9(10)V99.
       01 WS-EIBTASKN12                 PIC 9(12)     VALUE 0.
       01 WS-SQLCODE-DISP               PIC 9(9)      VALUE 0.
       01 DESIRED-ACC-KEY.
          03 DESIRED-SORT-CODE          PIC 9(6).
          03 DESIRED-ACC-NO             PIC 9(8).
       01 NEW-ACCOUNT-AVAILABLE-BALANCE PIC S9(10)V99 VALUE 0.
       01 NEW-ACCOUNT-ACTUAL-BALANCE    PIC S9(10)V99 VALUE 0.
       01 WS-ACC-REC-LEN                PIC S9(4) COMP
                                                      VALUE 0.
       01 WS-U-TIME                     PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                  PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD            PIC 99.
          03 FILLER                     PIC X.
          03 WS-ORIG-DATE-MM            PIC 99.
          03 FILLER                     PIC X.
          03 WS-ORIG-DATE-YYYY          PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X          PIC XX.
          03 FILLER                     PIC X         VALUE '.'.
          03 WS-ORIG-DATE-MM-X          PIC XX.
          03 FILLER                     PIC X         VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X        PIC X(4).
       01 REJ-REASON                    PIC XX        VALUE SPACES.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE         PIC 9(6)      VALUE 0.
          03 REQUIRED-ACC-NUM           PIC 9(8)      VALUE 0.
       01 STORM-DRAIN-CONDITION         PIC X(20).
       01 WS-TIME-DATA.
          03 WS-TIME-NOW                PIC 9(6).
          03 WS-TIME-NOW-GRP REDEFINES WS-TIME-NOW.
             05 WS-TIME-NOW-GRP-HH      PIC 99.
             05 WS-TIME-NOW-GRP-MM      PIC 99.
             05 WS-TIME-NOW-GRP-SS      PIC 99.
       01 WS-ABEND-PGM                  PIC X(8)      VALUE 'ABNDPROC'.
       01 ABNDINFO-REC.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          03 COMM-EYE                  PIC X(4).
          03 COMM-CUSTNO               PIC X(10).
          03 COMM-SCODE                PIC X(6).
          03 COMM-ACCNO                PIC 9(8).
          03 COMM-ACC-TYPE             PIC X(8).
          03 COMM-INT-RATE             PIC 9(4)V99.
          03 COMM-OPENED               PIC 9(8).
          03 COMM-OPENED-GROUP REDEFINES COMM-OPENED.
             05 COMM-OPENED-DAY              PIC 99.
             05 COMM-OPENED-MONTH            PIC 99.
             05 COMM-OPENED-YEAR             PIC 9999.
          03 COMM-OVERDRAFT            PIC 9(8).
          03 COMM-LAST-STMT-DT         PIC 9(8).
          03 COMM-LAST-STMNT-GROUP REDEFINES COMM-LAST-STMT-DT.
             05 COMM-LASTST-DAY               PIC 99.
             05 COMM-LASTST-MONTH             PIC 99.
             05 COMM-LASTST-YEAR              PIC 9999.
          03 COMM-NEXT-STMT-DT         PIC 9(8).
          03 COMM-NEXT-STMNT-GROUP REDEFINES COMM-NEXT-STMT-DT.
             05 COMM-NEXTST-DAY               PIC 99.
             05 COMM-NEXTST-MONTH             PIC 99.
             05 COMM-NEXTST-YEAR              PIC 9999.
          03 COMM-AVAIL-BAL            PIC S9(10)V99.
          03 COMM-ACTUAL-BAL           PIC S9(10)V99.
          03 COMM-SUCCESS              PIC X.
","['PREMIERE', 'UPDATE-ACCOUNT-DB2', 'GET-ME-OUT-OF-HERE', 'POPULATE-TIME-DATE', 'A010', 'A999', 'UAD010', 'UAD999', 'GMOOH010', 'GMOOH999', 'PTD010', 'PTD999']","Paragraph PREMIERE calls paragraph GET-ME-OUT-OF-HERE, UPDATE-ACCOUNT-DB2.
Paragraph UPDATE-ACCOUNT-DB2 calls paragraph UAD999.
",276,"This program gets called when someone updates the account details (this excludes the balance which must be updated by crediting or debitting money to/from the account). The program receives as input all of the fields which make up the Account record. It then accesses DB2 datastore & updates the associated Account record. Because it is only permissible to change a limited number of fields on the Account record, and it is NOT possible to amend the balance, no record needs to be written to PR0CTRAN (as the the balance cannot be amended using this method). At the current time, no details of the change are recorded (all that can be amended is the Account Type, the Interest Rate, the overdraft limit and the last and next statement dates). The presentation layer is responsible for ensuring that the fields are validated. If the Account cannot be updated then a failure flag is returned to the calling program.",,,,"1. This code is written in COBOL, a programming language used for business applications.

2. The code is part of a larger program that contains several sections.

3. The ""GET-ME-OUT-OF-HERE"" section is the last section in the program. It contains a single statement, ""EXEC CICS RETURN"", which causes the program to exit and return control to the operating system.

4. The ""GMOOH999"" section is also part of the program but is not executed because it is unreachable code - it can never be reached due to the ""RETURN"" statement in the previous section.

5. The ""UPDATE-ACCOUNT-DB2"" section defines a program called ""UAD999"" and contains an ""EXIT"" statement, which is used to exit the program.

6. The ""POPULATE-TIME-DATE"" section declares the variables that will hold the time and date values.

7. The ""PTD010"" section uses the CICS ASKTIME verb to retrieve the current system time and store it in the variable WS-U-TIME.

8. The CICS FORMATTIME verb is used to format the time value as a date and time, and store them in the variables WS-ORIG-DATE and WS-TIME-NOW respectively.

9. The code exits with the ""EXIT"" statement.","The COBOL program manages account updates in a DB2 database while handling time and date information. It first populates the current time and formatted date before updating account details based on the provided codes. After executing the update, which involves error handling, the program terminates and returns control to the CICS server. The overall process ensures accurate account management and program termination while adhering to CICS operational requirements.",1.0,1.0,1.0
138,cicsdev_cics-banking-sample-application-cbsa,cics-banking-sample-application-cbsa/src/base/cobol_src/UPDCUST.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       CBL CICS('SP,EDF,DLI')
       IDENTIFICATION DIVISION.
       PROGRAM-ID. UPDCUST.
       AUTHOR. Jon Collett.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.  IBM-370.
       OBJECT-COMPUTER.  IBM-370.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 SORTCODE           PIC 9(6) VALUE 987654.
       77 SYSIDERR-RETRY               PIC 999.
       01 WS-CICS-WORK-AREA.
          03 WS-CICS-RESP              PIC S9(8) COMP.
          03 WS-CICS-RESP2             PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       01 DB2-DATE-REFORMAT.
          03 DB2-DATE-REF-YR           PIC 9(4).
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-MNTH         PIC 99.
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-DAY          PIC 99.
       01 WS-CUST-DATA.
           03 CUSTOMER-RECORD.
              05 CUSTOMER-EYECATCHER                 PIC X(4).
                 88 CUSTOMER-EYECATCHER-VALUE        VALUE 'CUST'.
              05 CUSTOMER-KEY.
                 07 CUSTOMER-SORTCODE                PIC 9(6) DISPLAY.
                 07 CUSTOMER-NUMBER                  PIC 9(10) DISPLAY.
              05 CUSTOMER-NAME                       PIC X(60).
              05 CUSTOMER-ADDRESS                    PIC X(160).
              05 CUSTOMER-DATE-OF-BIRTH              PIC 9(8).
              05 CUSTOMER-DOB-GROUP REDEFINES CUSTOMER-DATE-OF-BIRTH.
                 07 CUSTOMER-BIRTH-DAY               PIC 99.
                 07 CUSTOMER-BIRTH-MONTH             PIC 99.
                 07 CUSTOMER-BIRTH-YEAR              PIC 9999.
              05 CUSTOMER-CREDIT-SCORE               PIC 999.
              05 CUSTOMER-CS-REVIEW-DATE             PIC 9(8).
              05 CUSTOMER-CS-GROUP
                 REDEFINES CUSTOMER-CS-REVIEW-DATE.
                 07 CUSTOMER-CS-REVIEW-DAY           PIC 99.
                 07 CUSTOMER-CS-REVIEW-MONTH         PIC 99.
                 07 CUSTOMER-CS-REVIEW-YEAR          PIC 9999.
       01 WS-EIBTASKN12                PIC 9(12) VALUE 0.
       01 WS-SQLCODE-DISP              PIC 9(9)  VALUE 0.
       01 DESIRED-CUST-KEY.
          03 DESIRED-SORT-CODE         PIC 9(6).
          03 DESIRED-CUSTNO            PIC 9(10).
       01 WS-CUST-REC-LEN              PIC S9(4) COMP VALUE 0.
       01 WS-U-TIME                    PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                 PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-MM           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-YYYY         PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-MM-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X       PIC X(4).
       01 REJ-REASON                   PIC XX VALUE SPACES.
       01 WS-PASSED-DATA.
          02 WS-TEST-KEY               PIC X(4).
          02 WS-SORT-CODE              PIC 9(6).
          02 WS-CUSTOMER-RANGE.
             07 WS-CUSTOMER-RANGE-TOP     PIC X.
             07 WS-CUSTOMER-RANGE-MIDDLE  PIC X.
             07 WS-CUSTOMER-RANGE-BOTTOM  PIC X.
       01 WS-SORT-DIV.
          03 WS-SORT-DIV1              PIC XX.
          03 WS-SORT-DIV2              PIC XX.
          03 WS-SORT-DIV3              PIC XX.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE        PIC 9(6)  VALUE 0.
          03 REQUIRED-ACC-NUM          PIC 9(8)  VALUE 0.
       01 STORM-DRAIN-CONDITION        PIC X(20).
       01 WS-UNSTR-TITLE               PIC X(9)  VALUE ' '.
       01 WS-TITLE-VALID               PIC X.
       01 WS-TIME-DATA.
           03 WS-TIME-NOW              PIC 9(6).
           03 WS-TIME-NOW-GRP REDEFINES WS-TIME-NOW.
              05 WS-TIME-NOW-GRP-HH    PIC 99.
              05 WS-TIME-NOW-GRP-MM    PIC 99.
              05 WS-TIME-NOW-GRP-SS    PIC 99.
       01 WS-ABEND-PGM                 PIC X(8) VALUE 'ABNDPROC'.
       01 ABNDINFO-REC.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          03 COMM-EYE                  PIC X(4).
          03 COMM-SCODE                PIC X(6).
          03 COMM-CUSTNO               PIC X(10).
          03 COMM-NAME                 PIC X(60).
          03 COMM-ADDR                 PIC X(160).
          03 COMM-DOB                  PIC 9(8).
          03 COMM-DOB-GROUP REDEFINES COMM-DOB.
             05 COMM-BIRTH-DAY               PIC 99.
             05 COMM-BIRTH-MONTH             PIC 99.
             05 COMM-BIRTH-YEAR              PIC 9999.
          03 COMM-CREDIT-SCORE         PIC 9(3).
          03 COMM-CS-REVIEW-DATE       PIC 9(8).
          03 COMM-CS-GROUP REDEFINES COMM-CS-REVIEW-DATE.
             05 COMM-CS-DAY                  PIC 99.
             05 COMM-CS-MONTH                PIC 99.
             05 COMM-CS-YEAR                 PIC 9999.
          03 COMM-UPD-SUCCESS          PIC X.
          03 COMM-UPD-FAIL-CD          PIC X.
       PROCEDURE DIVISION.
       PREMIERE SECTION.
       A010.
           MOVE SORTCODE TO COMM-SCODE
                            DESIRED-SORT-CODE.
           MOVE SPACES TO WS-UNSTR-TITLE.
           UNSTRING COMM-NAME DELIMITED BY SPACE
              INTO WS-UNSTR-TITLE.
           MOVE ' ' TO WS-TITLE-VALID.
           EVALUATE WS-UNSTR-TITLE
              WHEN 'Professor'
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Mr       '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Mrs      '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Miss     '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Ms       '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Dr       '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Drs      '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Lord     '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Sir      '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN 'Lady     '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN '         '
                 MOVE 'Y' TO WS-TITLE-VALID
              WHEN OTHER
                 MOVE 'N' TO WS-TITLE-VALID
           END-EVALUATE.
           IF WS-TITLE-VALID = 'N'
             MOVE 'N' TO COMM-UPD-SUCCESS
             MOVE 'T' TO COMM-UPD-FAIL-CD
             GOBACK
           END-IF
           PERFORM UPDATE-CUSTOMER-VSAM
           PERFORM GET-ME-OUT-OF-HERE.
       A999.
           EXIT.
       UPDATE-CUSTOMER-VSAM SECTION.
       UCV010.
           MOVE COMM-CUSTNO TO DESIRED-CUSTNO.
           EXEC CICS READ FILE('CUSTOMER')
                RIDFLD(DESIRED-CUST-KEY)
                INTO(WS-CUST-DATA)
                UPDATE
                RESP(WS-CICS-RESP)
                RESP2(WS-CICS-RESP2)
           END-EXEC.
           IF WS-CICS-RESP NOT = DFHRESP(NORMAL)
              MOVE 'N' TO COMM-UPD-SUCCESS
              IF WS-CICS-RESP = DFHRESP(NOTFND)
                 MOVE '1' TO COMM-UPD-FAIL-CD
              ELSE
                 MOVE '2' TO COMM-UPD-FAIL-CD
              END-IF
              GO TO UCV999
           END-IF.
           IF (COMM-NAME = SPACES OR COMM-NAME(1:1) = ' ') AND
           (COMM-ADDR = SPACES OR COMM-ADDR(1:1) = ' ')
              MOVE 'N' TO COMM-UPD-SUCCESS
              MOVE '4' TO COMM-UPD-FAIL-CD
              GO TO UCV999
           END-IF.
           IF (COMM-NAME = SPACES OR COMM-NAME(1:1) = ' ') AND
           (COMM-ADDR NOT = SPACES OR COMM-ADDR(1:1) NOT = ' ')
              MOVE COMM-ADDR TO CUSTOMER-ADDRESS OF WS-CUST-DATA
           END-IF.
           IF (COMM-ADDR = SPACES OR COMM-ADDR(1:1) = ' ') AND
           (COMM-NAME NOT = SPACES OR COMM-NAME(1:1) NOT = ' ')
              MOVE COMM-NAME TO CUSTOMER-NAME OF WS-CUST-DATA
           END-IF.
           IF COMM-ADDR(1:1) NOT = ' ' AND COMM-NAME(1:1) NOT = ' '
              MOVE COMM-ADDR TO CUSTOMER-ADDRESS OF WS-CUST-DATA
              MOVE COMM-NAME TO CUSTOMER-NAME OF WS-CUST-DATA
           END-IF.
           COMPUTE WS-CUST-REC-LEN = LENGTH OF WS-CUST-DATA.
           EXEC CICS REWRITE
              FILE ('CUSTOMER')
              FROM (WS-CUST-DATA)
              LENGTH(WS-CUST-REC-LEN)
              RESP(WS-CICS-RESP)
              RESP2(WS-CICS-RESP2)
           END-EXEC.
           IF WS-CICS-RESP NOT = DFHRESP(NORMAL)
              MOVE 'N' TO COMM-UPD-SUCCESS
              MOVE '3' TO COMM-UPD-FAIL-CD
              GO TO UCV999
           END-IF.
           MOVE CUSTOMER-EYECATCHER OF WS-CUST-DATA
              TO COMM-EYE.
           MOVE CUSTOMER-SORTCODE OF WS-CUST-DATA
              TO COMM-SCODE.
           MOVE CUSTOMER-NUMBER OF WS-CUST-DATA
              TO COMM-CUSTNO.
           MOVE CUSTOMER-NAME OF WS-CUST-DATA
              TO COMM-NAME.
           MOVE CUSTOMER-ADDRESS OF WS-CUST-DATA
              TO COMM-ADDR.
           MOVE CUSTOMER-DATE-OF-BIRTH OF WS-CUST-DATA
              TO COMM-DOB.
           MOVE CUSTOMER-CREDIT-SCORE OF WS-CUST-DATA
              TO COMM-CREDIT-SCORE.
           MOVE CUSTOMER-CS-REVIEW-DATE OF WS-CUST-DATA
              TO COMM-CS-REVIEW-DATE.
           MOVE 'Y' TO COMM-UPD-SUCCESS.
       UCV999.
           EXIT.
       GET-ME-OUT-OF-HERE SECTION.
       GMOOH010.
           EXEC CICS RETURN
           END-EXEC.
       GMOOH999.
           EXIT.
       POPULATE-TIME-DATE SECTION.
       PTD010.
           EXEC CICS ASKTIME
              ABSTIME(WS-U-TIME)
           END-EXEC.
           EXEC CICS FORMATTIME
                     ABSTIME(WS-U-TIME)
                     DDMMYYYY(WS-ORIG-DATE)
                     TIME(WS-TIME-NOW)
                     DATESEP
           END-EXEC.
       PTD999.
           EXIT.
","       WORKING-STORAGE SECTION.
       77 SORTCODE           PIC 9(6) VALUE 987654.
       77 SYSIDERR-RETRY               PIC 999.
       01 WS-CICS-WORK-AREA.
          03 WS-CICS-RESP              PIC S9(8) COMP.
          03 WS-CICS-RESP2             PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       01 DB2-DATE-REFORMAT.
          03 DB2-DATE-REF-YR           PIC 9(4).
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-MNTH         PIC 99.
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-DAY          PIC 99.
       01 WS-CUST-DATA.
           03 CUSTOMER-RECORD.
              05 CUSTOMER-EYECATCHER                 PIC X(4).
                 88 CUSTOMER-EYECATCHER-VALUE        VALUE 'CUST'.
              05 CUSTOMER-KEY.
                 07 CUSTOMER-SORTCODE                PIC 9(6) DISPLAY.
                 07 CUSTOMER-NUMBER                  PIC 9(10) DISPLAY.
              05 CUSTOMER-NAME                       PIC X(60).
              05 CUSTOMER-ADDRESS                    PIC X(160).
              05 CUSTOMER-DATE-OF-BIRTH              PIC 9(8).
              05 CUSTOMER-DOB-GROUP REDEFINES CUSTOMER-DATE-OF-BIRTH.
                 07 CUSTOMER-BIRTH-DAY               PIC 99.
                 07 CUSTOMER-BIRTH-MONTH             PIC 99.
                 07 CUSTOMER-BIRTH-YEAR              PIC 9999.
              05 CUSTOMER-CREDIT-SCORE               PIC 999.
              05 CUSTOMER-CS-REVIEW-DATE             PIC 9(8).
              05 CUSTOMER-CS-GROUP
                 REDEFINES CUSTOMER-CS-REVIEW-DATE.
                 07 CUSTOMER-CS-REVIEW-DAY           PIC 99.
                 07 CUSTOMER-CS-REVIEW-MONTH         PIC 99.
                 07 CUSTOMER-CS-REVIEW-YEAR          PIC 9999.
       01 WS-EIBTASKN12                PIC 9(12) VALUE 0.
       01 WS-SQLCODE-DISP              PIC 9(9)  VALUE 0.
       01 DESIRED-CUST-KEY.
          03 DESIRED-SORT-CODE         PIC 9(6).
          03 DESIRED-CUSTNO            PIC 9(10).
       01 WS-CUST-REC-LEN              PIC S9(4) COMP VALUE 0.
       01 WS-U-TIME                    PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                 PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-MM           PIC 99.
          03 FILLER                    PIC X.
          03 WS-ORIG-DATE-YYYY         PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-MM-X         PIC XX.
          03 FILLER                    PIC X VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X       PIC X(4).
       01 REJ-REASON                   PIC XX VALUE SPACES.
       01 WS-PASSED-DATA.
          02 WS-TEST-KEY               PIC X(4).
          02 WS-SORT-CODE              PIC 9(6).
          02 WS-CUSTOMER-RANGE.
             07 WS-CUSTOMER-RANGE-TOP     PIC X.
             07 WS-CUSTOMER-RANGE-MIDDLE  PIC X.
             07 WS-CUSTOMER-RANGE-BOTTOM  PIC X.
       01 WS-SORT-DIV.
          03 WS-SORT-DIV1              PIC XX.
          03 WS-SORT-DIV2              PIC XX.
          03 WS-SORT-DIV3              PIC XX.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE        PIC 9(6)  VALUE 0.
          03 REQUIRED-ACC-NUM          PIC 9(8)  VALUE 0.
       01 STORM-DRAIN-CONDITION        PIC X(20).
       01 WS-UNSTR-TITLE               PIC X(9)  VALUE ' '.
       01 WS-TITLE-VALID               PIC X.
       01 WS-TIME-DATA.
           03 WS-TIME-NOW              PIC 9(6).
           03 WS-TIME-NOW-GRP REDEFINES WS-TIME-NOW.
              05 WS-TIME-NOW-GRP-HH    PIC 99.
              05 WS-TIME-NOW-GRP-MM    PIC 99.
              05 WS-TIME-NOW-GRP-SS    PIC 99.
       01 WS-ABEND-PGM                 PIC X(8) VALUE 'ABNDPROC'.
       01 ABNDINFO-REC.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          03 COMM-EYE                  PIC X(4).
          03 COMM-SCODE                PIC X(6).
          03 COMM-CUSTNO               PIC X(10).
          03 COMM-NAME                 PIC X(60).
          03 COMM-ADDR                 PIC X(160).
          03 COMM-DOB                  PIC 9(8).
          03 COMM-DOB-GROUP REDEFINES COMM-DOB.
             05 COMM-BIRTH-DAY               PIC 99.
             05 COMM-BIRTH-MONTH             PIC 99.
             05 COMM-BIRTH-YEAR              PIC 9999.
          03 COMM-CREDIT-SCORE         PIC 9(3).
          03 COMM-CS-REVIEW-DATE       PIC 9(8).
          03 COMM-CS-GROUP REDEFINES COMM-CS-REVIEW-DATE.
             05 COMM-CS-DAY                  PIC 99.
             05 COMM-CS-MONTH                PIC 99.
             05 COMM-CS-YEAR                 PIC 9999.
          03 COMM-UPD-SUCCESS          PIC X.
          03 COMM-UPD-FAIL-CD          PIC X.
","['PREMIERE', 'UPDATE-CUSTOMER-VSAM', 'GET-ME-OUT-OF-HERE', 'POPULATE-TIME-DATE', 'A010', 'A999', 'UCV010', 'UCV999', 'GMOOH010', 'GMOOH999', 'PTD010', 'PTD999']","Paragraph PREMIERE calls paragraph GET-ME-OUT-OF-HERE, UPDATE-CUSTOMER-VSAM.
Paragraph UPDATE-CUSTOMER-VSAM calls paragraph UCV999.
",260,"This program gets called when someone updates the customer details. The program receives as input all of the fields which make up the Customer record. It then accesses the VSAM datastore. Because it is only permissible to change a limited number of fields on the Customer record, no record needs to be written to PROCTRAN. The presentation layer is responsible for ensuring that the fields are validated. If the Customer cannot be updated a failure flag is returned to the calling program.",,,['CUSTOMER'],"1. The COBOL file is used to update customer information in a VSAM file called ""CUSTOMER"".

2. The file has two main paragraphs: PREMIERE and UPDATE-CUSTOMER-VSAM.

3. The PREMIERE paragraph reads and updates customer records in the ""CUSTOMER"" file based on certain conditions.

4. The UPDATE-CUSTOMER-VSAM paragraph performs similar functions but also includes additional logic for handling specific error cases.

5. Both paragraphs use CICS statements such as READ, REWRITE, and ASKTIME to interact with the system and VSAM files.

6. The file may be used to ensure data integrity and maintain accurate customer records within the system.","This COBOL program updates customer information in a VSAM file, starting with moving the sort code and unstringing the customer name. It then reads the customer data; if valid, it updates the details, setting success or failure flags accordingly. The program also populates the current time and date. Finally, it terminates the transaction and exits the system. Overall, the program efficiently manages customer updates and ensures accurate data processing before completion.",1.0,1.0,1
139,cicsdev_cics-banking-sample-application-cbsa,cics-banking-sample-application-cbsa/src/base/cobol_src/ABNDPROC.cbl,"       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       CBL CICS('SP,EDF,DLI')
       IDENTIFICATION DIVISION.
       PROGRAM-ID. ABNDPROC.
       AUTHOR. JONCOLLETT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.  IBM-370.
       OBJECT-COMPUTER.  IBM-370.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-CICS-WORK-AREA.
          05 WS-CICS-RESP      PIC S9(8) COMP.
          05 WS-CICS-RESP2     PIC S9(8) COMP.
       01 WS-ABND-AREA.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       01 WS-ABND-KEY-LEN      PIC S9(8) COMP VALUE +12.
       LOCAL-STORAGE SECTION.
       01 DB2-DATE-REFORMAT.
          03 DB2-DATE-REF-YR           PIC 9(4).
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-MNTH         PIC 99.
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-DAY          PIC 99.
       01 DATA-STORE-TYPE      PIC X.
          88 DATASTORE-TYPE-DLI     VALUE '1'.
          88 DATASTORE-TYPE-DB2     VALUE '2'.
          88 DATASTORE-TYPE-VSAM    VALUE 'V'.
       01 WS-EIBTASKN12                PIC 9(12) VALUE 0.
       01 WS-SQLCODE-DISP              PIC 9(9) VALUE 0.
       01 WS-U-TIME                      PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                   PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD             PIC 99.
          03 FILLER                      PIC X.
          03 WS-ORIG-DATE-MM             PIC 99.
          03 FILLER                      PIC X.
          03 WS-ORIG-DATE-YYYY           PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X           PIC XX.
          03 FILLER                      PIC X VALUE '.'.
          03 WS-ORIG-DATE-MM-X           PIC XX.
          03 FILLER                      PIC X VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X         PIC X(4).
       01 WS-PASSED-DATA.
          02 WS-TEST-KEY                             PIC X(4).
          02 WS-SORT-CODE                            PIC 9(6).
          02 WS-CUSTOMER-RANGE.
             07 WS-CUSTOMER-RANGE-TOP                PIC X.
             07 WS-CUSTOMER-RANGE-MIDDLE             PIC X.
             07 WS-CUSTOMER-RANGE-BOTTOM             PIC X.
       01 WS-SORT-DIV.
          03 WS-SORT-DIV1                         PIC XX.
          03 WS-SORT-DIV2                         PIC XX.
          03 WS-SORT-DIV3                         PIC XX.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE       PIC 9(6)  VALUE 0.
          03 REQUIRED-ACC-NUM         PIC 9(8)  VALUE 0.
       01 PROCTRAN-RIDFLD             PIC S9(8) COMP.
       01 SQLCODE-DISPLAY             PIC S9(8) DISPLAY
           SIGN LEADING SEPARATE.
       01 MY-ABEND-CODE               PIC XXXX.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
           03 COMM-VSAM-KEY.
              05 COMM-UTIME-KEY                  PIC S9(15) COMP-3.
              05 COMM-TASKNO-KEY                 PIC 9(4).
           03 COMM-APPLID                        PIC X(8).
           03 COMM-TRANID                        PIC X(4).
           03 COMM-DATE                          PIC X(10).
           03 COMM-TIME                          PIC X(8).
           03 COMM-CODE                          PIC X(4).
           03 COMM-PROGRAM                       PIC X(8).
           03 COMM-RESPCODE                      PIC S9(8) DISPLAY
              SIGN LEADING SEPARATE.
           03 COMM-RESP2CODE                     PIC S9(8) DISPLAY
              SIGN LEADING SEPARATE.
           03 COMM-SQLCODE                       PIC S9(8) DISPLAY
              SIGN LEADING SEPARATE.
           03 COMM-FREEFORM                      PIC X(600).
       PROCEDURE DIVISION USING DFHCOMMAREA.
       PREMIERE SECTION.
       A010.
           MOVE DFHCOMMAREA TO WS-ABND-AREA.
           EXEC CICS WRITE
              FILE('ABNDFILE')
              FROM(WS-ABND-AREA)
              RIDFLD(ABND-VSAM-KEY)
              RESP(WS-CICS-RESP)
              RESP2(WS-CICS-RESP2)
           END-EXEC.
           IF WS-CICS-RESP NOT= DFHRESP(NORMAL)
              DISPLAY '*********************************************'
              DISPLAY '**** Unable to write to the file ABNDFILE !!!'
              DISPLAY 'RESP=' WS-CICS-RESP ' RESP2=' WS-CICS-RESP2
              DISPLAY '*********************************************'
              EXEC CICS RETURN
              END-EXEC
           END-IF.
           PERFORM GET-ME-OUT-OF-HERE.
       A999.
           EXIT.
      /
       GET-ME-OUT-OF-HERE SECTION.
       GMOOH010.
           EXEC CICS RETURN
           END-EXEC.
           GOBACK.
       GMOOH999.
           EXIT.
","       WORKING-STORAGE SECTION.
       01 WS-CICS-WORK-AREA.
          05 WS-CICS-RESP      PIC S9(8) COMP.
          05 WS-CICS-RESP2     PIC S9(8) COMP.
       01 WS-ABND-AREA.
           03 ABND-VSAM-KEY.
              05 ABND-UTIME-KEY                  PIC S9(15) COMP-3.
              05 ABND-TASKNO-KEY                 PIC 9(4).
           03 ABND-APPLID                        PIC X(8).
           03 ABND-TRANID                        PIC X(4).
           03 ABND-DATE                          PIC X(10).
           03 ABND-TIME                          PIC X(8).
           03 ABND-CODE                          PIC X(4).
           03 ABND-PROGRAM                       PIC X(8).
           03 ABND-RESPCODE                      PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-RESP2CODE                     PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-SQLCODE                       PIC S9(8) DISPLAY
                  SIGN LEADING SEPARATE.
           03 ABND-FREEFORM                      PIC X(600).
       01 WS-ABND-KEY-LEN      PIC S9(8) COMP VALUE +12.
       LOCAL-STORAGE SECTION.
       01 DB2-DATE-REFORMAT.
          03 DB2-DATE-REF-YR           PIC 9(4).
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-MNTH         PIC 99.
          03 FILLER                    PIC X.
          03 DB2-DATE-REF-DAY          PIC 99.
       01 DATA-STORE-TYPE      PIC X.
          88 DATASTORE-TYPE-DLI     VALUE '1'.
          88 DATASTORE-TYPE-DB2     VALUE '2'.
          88 DATASTORE-TYPE-VSAM    VALUE 'V'.
       01 WS-EIBTASKN12                PIC 9(12) VALUE 0.
       01 WS-SQLCODE-DISP              PIC 9(9) VALUE 0.
       01 WS-U-TIME                      PIC S9(15) COMP-3.
       01 WS-ORIG-DATE                   PIC X(10).
       01 WS-ORIG-DATE-GRP REDEFINES WS-ORIG-DATE.
          03 WS-ORIG-DATE-DD             PIC 99.
          03 FILLER                      PIC X.
          03 WS-ORIG-DATE-MM             PIC 99.
          03 FILLER                      PIC X.
          03 WS-ORIG-DATE-YYYY           PIC 9999.
       01 WS-ORIG-DATE-GRP-X.
          03 WS-ORIG-DATE-DD-X           PIC XX.
          03 FILLER                      PIC X VALUE '.'.
          03 WS-ORIG-DATE-MM-X           PIC XX.
          03 FILLER                      PIC X VALUE '.'.
          03 WS-ORIG-DATE-YYYY-X         PIC X(4).
       01 WS-PASSED-DATA.
          02 WS-TEST-KEY                             PIC X(4).
          02 WS-SORT-CODE                            PIC 9(6).
          02 WS-CUSTOMER-RANGE.
             07 WS-CUSTOMER-RANGE-TOP                PIC X.
             07 WS-CUSTOMER-RANGE-MIDDLE             PIC X.
             07 WS-CUSTOMER-RANGE-BOTTOM             PIC X.
       01 WS-SORT-DIV.
          03 WS-SORT-DIV1                         PIC XX.
          03 WS-SORT-DIV2                         PIC XX.
          03 WS-SORT-DIV3                         PIC XX.
       01 CUSTOMER-KY.
          03 REQUIRED-SORT-CODE       PIC 9(6)  VALUE 0.
          03 REQUIRED-ACC-NUM         PIC 9(8)  VALUE 0.
       01 PROCTRAN-RIDFLD             PIC S9(8) COMP.
       01 SQLCODE-DISPLAY             PIC S9(8) DISPLAY
           SIGN LEADING SEPARATE.
       01 MY-ABEND-CODE               PIC XXXX.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
           03 COMM-VSAM-KEY.
              05 COMM-UTIME-KEY                  PIC S9(15) COMP-3.
              05 COMM-TASKNO-KEY                 PIC 9(4).
           03 COMM-APPLID                        PIC X(8).
           03 COMM-TRANID                        PIC X(4).
           03 COMM-DATE                          PIC X(10).
           03 COMM-TIME                          PIC X(8).
           03 COMM-CODE                          PIC X(4).
           03 COMM-PROGRAM                       PIC X(8).
           03 COMM-RESPCODE                      PIC S9(8) DISPLAY
              SIGN LEADING SEPARATE.
           03 COMM-RESP2CODE                     PIC S9(8) DISPLAY
              SIGN LEADING SEPARATE.
           03 COMM-SQLCODE                       PIC S9(8) DISPLAY
              SIGN LEADING SEPARATE.
           03 COMM-FREEFORM                      PIC X(600).
","['PREMIERE', 'GET-ME-OUT-OF-HERE', 'A010', 'A999', 'GMOOH010', 'GMOOH999']","Paragraph PREMIERE calls paragraph GET-ME-OUT-OF-HERE.
",127,"This program processes application abends and writes them to a centralised CF (KSDS) datastore - this is so that they can be viewed from one place, without having to go hunting for them.",,,['EXECCICSWRIT'],"1. The code inside <CODE> and </CODE> is written in COBOL, a programming language used for business applications.

2. The code is part of a larger program that contains various sections and paragraphs.

3. The section named ""GET-ME-OUT-OF-HERE"" contains a single statement, ""EXEC CICS RETURN"". This statement is used to return control to the CICS (Customer Information Control System) system, which is a middleware platform used for managing transactions between an application and an operating system.

4. The next two statements, ""END-EXEC"" and ""GOBACK"", are also part of the same section but are not executed when this section is called. They are likely included as placeholders or as part of a larger program structure.

5. The final section, ""GMOOH999"", contains a single statement, ""EXIT"". This statement is used to exit the program and terminate its execution.","This COBOL program is designed to write data to a VSAM file named ABNDFILE by moving data from DFHCOMMAREA to WS-ABND-AREA and executing a CICS WRITE. If an error occurs during this process, it displays an error message. Following the write operation, it calls the GET-ME-OUT-OF-HERE paragraph, which handles program termination by executing the CICS RETURN statement and the GOBACK statement, effectively returning control to the operating system.",1.0,1.0,1
155,cicsdev_cics-genapp,cics-genapp/base/src/lgipvs01.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. LGIPVS01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-FLAG-TSQE              PIC X.
       01  WS-FLAG-TSQH              PIC X.
       01  WS-FLAG-TSQL              PIC X.
       01  WS-FLAG                   PIC X.
       01  WS-RANDOM-Seed            PIC S9(4) Comp.
       01  WS-RANDOM-Number          PIC 9(8) Comp.
       01  WS-RESP                   PIC S9(8) COMP.
       01  WS-STARTCODE              PIC XX Value spaces.
       01  WS-SYSID                  PIC X(4) Value spaces.
       01  WS-Invokeprog             PIC X(8) Value spaces.
       01  WS-COMMAREA               PIC X(80).
       01  WS-RECV.
         03 WS-RECV-TRANID           PIC X(5).
         03 WS-RECV-DATA             PIC X(74).
       01  WS-RECV-LEN               PIC S9(4) COMP Value 80.
       01  WRITE-MSG.
         03 WRITE-MSG-Text           PIC X(11) Value 'Policy Key='.
         03 WRITE-MSG-Key.
           05  WRITE-Msg-Type        Pic X Value 'X'.
           05  WRITE-Msg-CustNum     Pic 9(10).
           05  WRITE-Msg-PolNum      Pic 9(10).
         03 Filler                   PIC X(48) Value Spaces.
       01 PART-KEY.
          03 PART-KEY-Type           PIC X.
          03 PART-KEY-Num            PIC 9(10).
       01 CA-AREA.
         03  CA-POLICY-TYPE          Pic X.
         03  CA-CUSTOMER-NUM         Pic X(10).
         03  CA-POLICY-NUM           Pic X(10).
         03  Filler                  Pic X(43).
       77 MSGEND                     PIC X(24) VALUE
                                        'Transaction ended      '.
       77 F64                        Pic S9(4) Comp Value 64.
       77 F11                        Pic S9(4) Comp Value 11.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
         03  COMMA-DATA.
           05  Comma-Data-Text      Pic X(11).
           05  Comma-Data-Key       Pic X(21).
           05  FILLER               Pic X(58).
       PROCEDURE DIVISION.
       MAINLINE.
           MOVE SPACES TO WS-RECV.
           EXEC CICS ASSIGN SYSID(WS-SYSID)
                RESP(WS-RESP)
           END-EXEC.
           EXEC CICS ASSIGN STARTCODE(WS-STARTCODE)
                RESP(WS-RESP)
           END-EXEC.
           EXEC CICS ASSIGN Invokingprog(WS-Invokeprog)
                RESP(WS-RESP)
           END-EXEC.
           IF WS-STARTCODE(1:1) = 'D' or
              WS-Invokeprog Not = Spaces
              MOVE 'C' To WS-FLAG
              MOVE COMMA-DATA  TO WS-COMMAREA
              MOVE EIBCALEN    TO WS-RECV-LEN
              MOVE 11          TO WS-RECV-LEN
              SUBTRACT 1 FROM WS-RECV-LEN
           ELSE
              EXEC CICS RECEIVE INTO(WS-RECV)
                  LENGTH(WS-RECV-LEN)
                  RESP(WS-RESP)
              END-EXEC
              MOVE 'R' To WS-FLAG
              MOVE WS-RECV-DATA  TO WS-COMMAREA
              SUBTRACT 6 FROM WS-RECV-LEN
           END-IF.
           Move Spaces                      To CA-Area
           Move WS-Commarea(1:1)            To Part-Key-Type
           Move WS-Commarea(2:WS-RECV-LEN)  To Part-Key-Num
           Exec CICS Read File('KSDSPOLY')
                     Into(CA-AREA)
                     Length(F64)
                     Ridfld(PART-KEY)
                     KeyLength(F11)
                     Generic
                     RESP(WS-RESP)
                     GTEQ
           End-Exec.
           If CA-Policy-Type   Not = Part-Key-Type Or
              WS-RESP NOT          = DFHRESP(NORMAL)
             Move 'Policy Bad='   To Write-Msg-Text
             Move 13              To WRITE-Msg-CustNum
             Move 13              To WRITE-Msg-PolNum
           Else
             Move CA-Area to WRITE-MSG-Key
           End-If
           If WS-FLAG = 'R' Then
             EXEC CICS SEND TEXT FROM(WRITE-MSG)
              WAIT
              ERASE
              LENGTH(80)
              FREEKB
             END-EXEC
           Else
             Move Spaces          To COMMA-Data
             Move Write-Msg-Text  To COMMA-Data-Text
             Move Write-Msg-Key   To COMMA-Data-Key
           End-If.
           EXEC CICS RETURN
           END-EXEC.
       A-EXIT.
           EXIT.
           GOBACK.
","       WORKING-STORAGE SECTION.
       01  WS-FLAG-TSQE              PIC X.
       01  WS-FLAG-TSQH              PIC X.
       01  WS-FLAG-TSQL              PIC X.
       01  WS-FLAG                   PIC X.
       01  WS-RANDOM-Seed            PIC S9(4) Comp.
       01  WS-RANDOM-Number          PIC 9(8) Comp.
       01  WS-RESP                   PIC S9(8) COMP.
       01  WS-STARTCODE              PIC XX Value spaces.
       01  WS-SYSID                  PIC X(4) Value spaces.
       01  WS-Invokeprog             PIC X(8) Value spaces.
       01  WS-COMMAREA               PIC X(80).
       01  WS-RECV.
         03 WS-RECV-TRANID           PIC X(5).
         03 WS-RECV-DATA             PIC X(74).
       01  WS-RECV-LEN               PIC S9(4) COMP Value 80.
       01  WRITE-MSG.
         03 WRITE-MSG-Text           PIC X(11) Value 'Policy Key='.
         03 WRITE-MSG-Key.
           05  WRITE-Msg-Type        Pic X Value 'X'.
           05  WRITE-Msg-CustNum     Pic 9(10).
           05  WRITE-Msg-PolNum      Pic 9(10).
         03 Filler                   PIC X(48) Value Spaces.
       01 PART-KEY.
          03 PART-KEY-Type           PIC X.
          03 PART-KEY-Num            PIC 9(10).
       01 CA-AREA.
         03  CA-POLICY-TYPE          Pic X.
         03  CA-CUSTOMER-NUM         Pic X(10).
         03  CA-POLICY-NUM           Pic X(10).
         03  Filler                  Pic X(43).
       77 MSGEND                     PIC X(24) VALUE
                                        'Transaction ended      '.
       77 F64                        Pic S9(4) Comp Value 64.
       77 F11                        Pic S9(4) Comp Value 11.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
         03  COMMA-DATA.
           05  Comma-Data-Text      Pic X(11).
           05  Comma-Data-Key       Pic X(21).
           05  FILLER               Pic X(58).
","['MAINLINE', 'A-EXIT']",,112,This program will return a random Policy/customer number from the VSAM KSDS Policy file. Input parm of policy type will determine the key.,,,['KSDSPOLY'],"1. The code is written in COBOL, which is a programming language used for business applications.

2. The code snippet provided is part of a larger program that includes the ""A-EXIT"" section.

3. Within the ""A-EXIT"" section, there are two statements: ""EXIT"" and ""GOBACK.""

4. The ""EXIT"" statement is used to exit from the current program or procedure. When this statement is executed, it terminates the program's execution and returns control to the calling program or operating system.

5. The ""GOBACK"" statement is used to transfer control back to the calling program or procedure. It is similar to using the ""RETURN"" statement in other programming languages.","<Code>
MAINLINE: This COBOL code is a program that reads data from a file and sends a message based on the data read. It uses CICS (Customer Information Control System) to interact with the mainframe system. The program first assigns values to some variables and then checks the value of another variable to determine which action to take. If the value of the variable is 'D' or if another variable is not empty, the program sets a flag and moves some data to another variable. Otherwise, it receives data from the mainframe system and moves it to another variable. It then moves some data to a message and sends the message. If the flag is set to 'R', it sends the message and erases the data. Otherwise, it moves some data to a variable and continues. Finally, it returns.
A-EXIT: The COBOL code above is a program that terminates execution and returns control to the operating system. The ""A-EXIT"" is a section of the program, and the ""EXIT"" and ""GOBACK"" are instructions that cause the program to exit. The ""GOBACK"" instruction is used to return control to the operating system. The ""nan"" variable is not defined in the given code snippet, so its purpose is unclear.
</Code>
MAINLINE coordinates data processing via CICS and generates messages based on conditions, allowing various responses. It concludes with A-EXIT, ensuring execution termination and control return to the operating system. The unexplained ""nan"" variable may indicate incomplete handling, representing potential gaps in the program’s logic.",0.5,1.0,na
156,cicsdev_cics-genapp,cics-genapp/base/src/lgacdb02.cbl,"       PROCESS SQL
       IDENTIFICATION DIVISION.
       PROGRAM-ID. LGACDB02.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'LGACDB02------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01  LastCustNum               PIC S9(8) COMP.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGACDB02'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01  CA-ERROR-MSG.
           03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA                  PIC X(90) VALUE SPACES.
       01  WS-POLICY-LENGTHS.
           03 WS-CUSTOMER-LEN          PIC S9(4) COMP VALUE +72.
           03 WS-POLICY-LEN            PIC S9(4) COMP VALUE +72.
           03 WS-ENDOW-LEN             PIC S9(4) COMP VALUE +52.
           03 WS-HOUSE-LEN             PIC S9(4) COMP VALUE +58.
           03 WS-MOTOR-LEN             PIC S9(4) COMP VALUE +65.
           03 WS-COMM-LEN              PIC S9(4) COMP VALUE +1102.
           03 WS-CLAIM-LEN             PIC S9(4) COMP VALUE +546.
           03 WS-FULL-ENDOW-LEN        PIC S9(4) COMP VALUE +124.
           03 WS-FULL-HOUSE-LEN        PIC S9(4) COMP VALUE +130.
           03 WS-FULL-MOTOR-LEN        PIC S9(4) COMP VALUE +137.
           03 WS-FULL-COMM-LEN         PIC S9(4) COMP VALUE +1174.
           03 WS-FULL-CLAIM-LEN        PIC S9(4) COMP VALUE +618.
           03 WS-SUMRY-ENDOW-LEN       PIC S9(4) COMP VALUE +25.
       01  DB2-CUSTOMER.
           03 DB2-FIRSTNAME            PIC X(10).
           03 DB2-LASTNAME             PIC X(20).
           03 DB2-DATEOFBIRTH          PIC X(10).
           03 DB2-HOUSENAME            PIC X(20).
           03 DB2-HOUSENUMBER          PIC X(4).
           03 DB2-POSTCODE             PIC X(8).
           03 DB2-PHONE-MOBILE         PIC X(20).
           03 DB2-PHONE-HOME           PIC X(20).
           03 DB2-EMAIL-ADDRESS        PIC X(100).
       01  DB2-POLICY.
           03 DB2-POLICYTYPE           PIC X.
           03 DB2-POLICYNUMBER         PIC 9(10).
           03 DB2-POLICY-COMMON.
              05 DB2-ISSUEDATE         PIC X(10).
              05 DB2-EXPIRYDATE        PIC X(10).
              05 DB2-LASTCHANGED       PIC X(26).
              05 DB2-BROKERID          PIC 9(10).
              05 DB2-BROKERSREF        PIC X(10).
              05 DB2-PAYMENT           PIC 9(6).
       01  DB2-ENDOWMENT.
           03 DB2-ENDOW-FIXED.
              05 DB2-E-WITHPROFITS      PIC X.
              05 DB2-E-EQUITIES         PIC X.
              05 DB2-E-MANAGEDFUND      PIC X.
              05 DB2-E-FUNDNAME         PIC X(10).
              05 DB2-E-TERM             PIC 9(2).
              05 DB2-E-SUMASSURED       PIC 9(6).
              05 DB2-E-LIFEASSURED      PIC X(31).
           03 DB2-E-PADDINGDATA         PIC X(32611).
       01  DB2-HOUSE.
           03 DB2-H-PROPERTYTYPE       PIC X(15).
           03 DB2-H-BEDROOMS           PIC 9(3).
           03 DB2-H-VALUE              PIC 9(8).
           03 DB2-H-HOUSENAME          PIC X(20).
           03 DB2-H-HOUSENUMBER        PIC X(4).
           03 DB2-H-POSTCODE           PIC X(8).
       01  DB2-MOTOR.
           03 DB2-M-MAKE               PIC X(15).
           03 DB2-M-MODEL              PIC X(15).
           03 DB2-M-VALUE              PIC 9(6).
           03 DB2-M-REGNUMBER          PIC X(7).
           03 DB2-M-COLOUR             PIC X(8).
           03 DB2-M-CC                 PIC 9(4).
           03 DB2-M-MANUFACTURED       PIC X(10).
           03 DB2-M-PREMIUM            PIC 9(6).
           03 DB2-M-ACCIDENTS          PIC 9(6).
       01  DB2-COMMERCIAL.
           03 DB2-B-Address            PIC X(255).
           03 DB2-B-Postcode           PIC X(8).
           03 DB2-B-Latitude           PIC X(11).
           03 DB2-B-Longitude          PIC X(11).
           03 DB2-B-Customer           PIC X(255).
           03 DB2-B-PropType           PIC X(255).
           03 DB2-B-FirePeril          PIC 9(4).
           03 DB2-B-FirePremium        PIC 9(8).
           03 DB2-B-CrimePeril         PIC 9(4).
           03 DB2-B-CrimePremium       PIC 9(8).
           03 DB2-B-FloodPeril         PIC 9(4).
           03 DB2-B-FloodPremium       PIC 9(8).
           03 DB2-B-WeatherPeril       PIC 9(4).
           03 DB2-B-WeatherPremium     PIC 9(8).
           03 DB2-B-Status             PIC 9(4).
           03 DB2-B-RejectReason       PIC X(255).
       01  DB2-CLAIM.
           03 DB2-C-Num                PIC 9(10).
           03 DB2-C-Date               PIC X(10).
           03 DB2-C-Paid               PIC 9(8).
           03 DB2-C-Value              PIC 9(8).
           03 DB2-C-Cause              PIC X(255).
           03 DB2-C-Observations       PIC X(255).
       01  DB2-OUT-INTEGERS.
           03 DB2-CUSTOMERNUM-INT   PIC S9(9) COMP.
           03 DB2-CUSTOMERCNT-INT   PIC S9(9) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           03 D2-REQUEST-ID            PIC X(6).
           03 D2-RETURN-CODE           PIC 9(2).
           03 D2-CUSTOMER-NUM          PIC 9(10).
           03 D2-CUSTSECR-PASS         PIC X(32).
           03 D2-CUSTSECR-COUNT        PIC X(4).
           03 D2-CUSTSECR-STATE        PIC X.
           03 D2-CUSTSECR-DATA         PIC X(32445).
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('LGCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO D2-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           Evaluate D2-REQUEST-ID
             When '02ACUS'
               Move D2-CUSTOMER-NUM    To DB2-CUSTOMERNUM-INT
               Move D2-CUSTSECR-COUNT  To DB2-CUSTOMERCNT-INT
               Perform INSERT-CUSTOMER-PASSWORD
             When Other
               Move '99' To D2-RETURN-CODE
               Exec CICS Return End-EXEC
           End-Evaluate
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-CUSTOMER-PASSWORD.
           MOVE ' INSERT SECURITY' TO EM-SQLREQ
           EXEC SQL
             INSERT INTO CUSTOMER_SECURE
                       ( customerNumber,
                         customerPass,
                         state_indicator,
                         pass_changes   )
                VALUES ( :DB2-CUSTOMERNUM-INT,
                         :D2-CUSTSECR-PASS,
                         :D2-CUSTSECR-STATE,
                         :DB2-CUSTOMERCNT-INT)
           END-EXEC
           IF SQLCODE NOT EQUAL 0
             MOVE '98' TO D2-RETURN-CODE
             PERFORM WRITE-ERROR-MESSAGE
             EXEC CICS RETURN END-EXEC
           END-IF
           EXIT.
       WRITE-ERROR-MESSAGE.
           MOVE SQLCODE TO EM-SQLRC
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM('LGSTSQ')
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'LGACDB02------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01  LastCustNum               PIC S9(8) COMP.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGACDB02'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01  CA-ERROR-MSG.
           03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA                  PIC X(90) VALUE SPACES.
       01  WS-POLICY-LENGTHS.
           03 WS-CUSTOMER-LEN          PIC S9(4) COMP VALUE +72.
           03 WS-POLICY-LEN            PIC S9(4) COMP VALUE +72.
           03 WS-ENDOW-LEN             PIC S9(4) COMP VALUE +52.
           03 WS-HOUSE-LEN             PIC S9(4) COMP VALUE +58.
           03 WS-MOTOR-LEN             PIC S9(4) COMP VALUE +65.
           03 WS-COMM-LEN              PIC S9(4) COMP VALUE +1102.
           03 WS-CLAIM-LEN             PIC S9(4) COMP VALUE +546.
           03 WS-FULL-ENDOW-LEN        PIC S9(4) COMP VALUE +124.
           03 WS-FULL-HOUSE-LEN        PIC S9(4) COMP VALUE +130.
           03 WS-FULL-MOTOR-LEN        PIC S9(4) COMP VALUE +137.
           03 WS-FULL-COMM-LEN         PIC S9(4) COMP VALUE +1174.
           03 WS-FULL-CLAIM-LEN        PIC S9(4) COMP VALUE +618.
           03 WS-SUMRY-ENDOW-LEN       PIC S9(4) COMP VALUE +25.
       01  DB2-CUSTOMER.
           03 DB2-FIRSTNAME            PIC X(10).
           03 DB2-LASTNAME             PIC X(20).
           03 DB2-DATEOFBIRTH          PIC X(10).
           03 DB2-HOUSENAME            PIC X(20).
           03 DB2-HOUSENUMBER          PIC X(4).
           03 DB2-POSTCODE             PIC X(8).
           03 DB2-PHONE-MOBILE         PIC X(20).
           03 DB2-PHONE-HOME           PIC X(20).
           03 DB2-EMAIL-ADDRESS        PIC X(100).
       01  DB2-POLICY.
           03 DB2-POLICYTYPE           PIC X.
           03 DB2-POLICYNUMBER         PIC 9(10).
           03 DB2-POLICY-COMMON.
              05 DB2-ISSUEDATE         PIC X(10).
              05 DB2-EXPIRYDATE        PIC X(10).
              05 DB2-LASTCHANGED       PIC X(26).
              05 DB2-BROKERID          PIC 9(10).
              05 DB2-BROKERSREF        PIC X(10).
              05 DB2-PAYMENT           PIC 9(6).
       01  DB2-ENDOWMENT.
           03 DB2-ENDOW-FIXED.
              05 DB2-E-WITHPROFITS      PIC X.
              05 DB2-E-EQUITIES         PIC X.
              05 DB2-E-MANAGEDFUND      PIC X.
              05 DB2-E-FUNDNAME         PIC X(10).
              05 DB2-E-TERM             PIC 9(2).
              05 DB2-E-SUMASSURED       PIC 9(6).
              05 DB2-E-LIFEASSURED      PIC X(31).
           03 DB2-E-PADDINGDATA         PIC X(32611).
       01  DB2-HOUSE.
           03 DB2-H-PROPERTYTYPE       PIC X(15).
           03 DB2-H-BEDROOMS           PIC 9(3).
           03 DB2-H-VALUE              PIC 9(8).
           03 DB2-H-HOUSENAME          PIC X(20).
           03 DB2-H-HOUSENUMBER        PIC X(4).
           03 DB2-H-POSTCODE           PIC X(8).
       01  DB2-MOTOR.
           03 DB2-M-MAKE               PIC X(15).
           03 DB2-M-MODEL              PIC X(15).
           03 DB2-M-VALUE              PIC 9(6).
           03 DB2-M-REGNUMBER          PIC X(7).
           03 DB2-M-COLOUR             PIC X(8).
           03 DB2-M-CC                 PIC 9(4).
           03 DB2-M-MANUFACTURED       PIC X(10).
           03 DB2-M-PREMIUM            PIC 9(6).
           03 DB2-M-ACCIDENTS          PIC 9(6).
       01  DB2-COMMERCIAL.
           03 DB2-B-Address            PIC X(255).
           03 DB2-B-Postcode           PIC X(8).
           03 DB2-B-Latitude           PIC X(11).
           03 DB2-B-Longitude          PIC X(11).
           03 DB2-B-Customer           PIC X(255).
           03 DB2-B-PropType           PIC X(255).
           03 DB2-B-FirePeril          PIC 9(4).
           03 DB2-B-FirePremium        PIC 9(8).
           03 DB2-B-CrimePeril         PIC 9(4).
           03 DB2-B-CrimePremium       PIC 9(8).
           03 DB2-B-FloodPeril         PIC 9(4).
           03 DB2-B-FloodPremium       PIC 9(8).
           03 DB2-B-WeatherPeril       PIC 9(4).
           03 DB2-B-WeatherPremium     PIC 9(8).
           03 DB2-B-Status             PIC 9(4).
           03 DB2-B-RejectReason       PIC X(255).
       01  DB2-CLAIM.
           03 DB2-C-Num                PIC 9(10).
           03 DB2-C-Date               PIC X(10).
           03 DB2-C-Paid               PIC 9(8).
           03 DB2-C-Value              PIC 9(8).
           03 DB2-C-Cause              PIC X(255).
           03 DB2-C-Observations       PIC X(255).
       01  DB2-OUT-INTEGERS.
           03 DB2-CUSTOMERNUM-INT   PIC S9(9) COMP.
           03 DB2-CUSTOMERCNT-INT   PIC S9(9) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           03 D2-REQUEST-ID            PIC X(6).
           03 D2-RETURN-CODE           PIC 9(2).
           03 D2-CUSTOMER-NUM          PIC 9(10).
           03 D2-CUSTSECR-PASS         PIC X(32).
           03 D2-CUSTSECR-COUNT        PIC X(4).
           03 D2-CUSTSECR-STATE        PIC X.
           03 D2-CUSTSECR-DATA         PIC X(32445).
","['MAINLINE', 'MAINLINE-EXIT', 'INSERT-CUSTOMER-PASSWORD', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph WRITE-ERROR-MESSAGE, INSERT-CUSTOMER-PASSWORD.
Paragraph INSERT-CUSTOMER-PASSWORD calls paragraph WRITE-ERROR-MESSAGE.
",211,To add customer's password to the security table with details. Default password is BD5 checksum,['LGSTSQ'],,,"1. The COBOL file is a part of a larger program that contains a mainline and an exit procedure.
2. The mainline is where the program starts executing and the exit procedure is where the program terminates.
3. The program simply exits after reaching the end of the mainline.","This COBOL program initializes working storage and checks a condition to either proceed with customer data insertion or handle errors. The MAINLINE calls INSERT-CUSTOMER-PASSWORD, which inserts a customer's password into a database and invokes WRITE-ERROR-MESSAGE for error handling if needed. WRITE-ERROR-MESSAGE formats and logs detailed error information. MAINLINE-EXIT marks program termination. Overall, the code is designed to ensure secure customer data management while effectively addressing potential errors.",1.0,1.0,1.0
160,cicsdev_cics-genapp,cics-genapp/base/src/lgapdb01.cbl,"       PROCESS SQL
       IDENTIFICATION DIVISION.
       PROGRAM-ID. LGAPDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'LGAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  ABS-TIME                    PIC S9(8) COMP VALUE +0.
       01  TIME1                       PIC X(8)  VALUE SPACES.
       01  DATE1                       PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGAPDB01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-POLNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01  CA-ERROR-MSG.
           03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA                  PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +28.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01 WS-VARY-FIELD.
          49 WS-VARY-LEN               PIC S9(4) COMP.
          49 WS-VARY-CHAR              PIC X(3900).
           EXEC SQL
             INCLUDE LGPOLICY
           END-EXEC.
       01 DB2-IN-INTEGERS.
           03 DB2-CUSTOMERNUM-INT      PIC S9(9) COMP.
           03 DB2-BROKERID-INT         PIC S9(9) COMP.
           03 DB2-PAYMENT-INT          PIC S9(9) COMP.
           03 DB2-E-TERM-SINT          PIC S9(4) COMP.
           03 DB2-E-SUMASSURED-INT     PIC S9(9) COMP.
           03 DB2-E-PADDING-LEN        PIC S9(9) COMP.
           03 DB2-H-BEDROOMS-SINT      PIC S9(4) COMP.
           03 DB2-H-VALUE-INT          PIC S9(9) COMP.
           03 DB2-M-VALUE-INT          PIC S9(9) COMP.
           03 DB2-M-CC-SINT            PIC S9(4) COMP.
           03 DB2-M-PREMIUM-int        PIC S9(9) COMP.
           03 DB2-M-ACCIDENTS-int      PIC S9(9) COMP.
           03 DB2-B-FirePeril-Int      PIC S9(4) COMP.
           03 DB2-B-FirePremium-Int    PIC S9(9) COMP.
           03 DB2-B-CrimePeril-Int     PIC S9(4) COMP.
           03 DB2-B-CrimePremium-Int   PIC S9(9) COMP.
           03 DB2-B-FloodPeril-Int     PIC S9(4) COMP.
           03 DB2-B-FloodPremium-Int   PIC S9(9) COMP.
           03 DB2-B-WeatherPeril-Int   PIC S9(4) COMP.
           03 DB2-B-WeatherPremium-Int PIC S9(9) COMP.
           03 DB2-B-Status-Int         PIC S9(4) COMP.
           03 DB2-C-Policynum-Int      PIC S9(9) COMP.
           03 DB2-C-Num-INT            PIC S9(9) COMP Value +0.
           03 DB2-C-Paid-INT           PIC S9(9) COMP.
           03 DB2-C-Value-INT          PIC S9(9) COMP.
       01 DB2-OUT-INTEGERS.
           03 DB2-POLICYNUM-INT        PIC S9(9) COMP VALUE +0.
       01  LGAPVS01                    PIC X(8)  VALUE 'LGAPVS01'.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE LGCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           MOVE EIBCALEN TO WS-CALEN.
           INITIALIZE DB2-IN-INTEGERS.
           INITIALIZE DB2-OUT-INTEGERS.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('LGCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           MOVE CA-CUSTOMER-NUM TO DB2-CUSTOMERNUM-INT
           MOVE ZERO            TO DB2-C-PolicyNum-INT
           MOVE CA-CUSTOMER-NUM TO EM-CUSNUM
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           EVALUATE CA-REQUEST-ID
             WHEN '01AEND'
               ADD WS-FULL-ENDOW-LEN TO WS-REQUIRED-CA-LEN
               MOVE 'E' TO DB2-POLICYTYPE
             WHEN '01AHOU'
               ADD WS-FULL-HOUSE-LEN TO WS-REQUIRED-CA-LEN
               MOVE 'H' TO DB2-POLICYTYPE
             WHEN '01AMOT'
               ADD WS-FULL-MOTOR-LEN TO WS-REQUIRED-CA-LEN
               MOVE 'M' TO DB2-POLICYTYPE
             WHEN '01ACOM'
               ADD WS-FULL-COMM-LEN TO WS-REQUIRED-CA-LEN
               MOVE 'C' TO DB2-POLICYTYPE
             WHEN OTHER
               MOVE '99' TO CA-RETURN-CODE
               EXEC CICS RETURN END-EXEC
           END-EVALUATE
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM INSERT-POLICY
           EVALUATE CA-REQUEST-ID
             WHEN '01AEND'
               PERFORM INSERT-ENDOW
             WHEN '01AHOU'
               PERFORM INSERT-HOUSE
             WHEN '01AMOT'
               PERFORM INSERT-MOTOR
             WHEN '01ACOM'
               PERFORM INSERT-COMMERCIAL
             WHEN OTHER
               MOVE '99' TO CA-RETURN-CODE
           END-EVALUATE
             EXEC CICS Link Program(LGAPVS01)
                  Commarea(DFHCOMMAREA)
                LENGTH(32500)
             END-EXEC.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-POLICY.
           MOVE CA-BROKERID TO DB2-BROKERID-INT
           MOVE CA-PAYMENT TO DB2-PAYMENT-INT
           MOVE ' INSERT POLICY' TO EM-SQLREQ
           EXEC SQL
             INSERT INTO POLICY
                       ( POLICYNUMBER,
                         CUSTOMERNUMBER,
                         ISSUEDATE,
                         EXPIRYDATE,
                         POLICYTYPE,
                         LASTCHANGED,
                         BROKERID,
                         BROKERSREFERENCE,
                         PAYMENT           )
                VALUES ( DEFAULT,
                         :DB2-CUSTOMERNUM-INT,
                         :CA-ISSUE-DATE,
                         :CA-EXPIRY-DATE,
                         :DB2-POLICYTYPE,
                         CURRENT TIMESTAMP,
                         :DB2-BROKERID-INT,
                         :CA-BROKERSREF,
                         :DB2-PAYMENT-INT      )
           END-EXEC
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When -530
               MOVE '70' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXEC SQL
             SET :DB2-POLICYNUM-INT = IDENTITY_VAL_LOCAL()
           END-EXEC
           MOVE DB2-POLICYNUM-INT TO CA-POLICY-NUM
           MOVE CA-POLICY-NUM TO EM-POLNUM
           EXEC SQL
             SELECT LASTCHANGED
               INTO :CA-LASTCHANGED
               FROM POLICY
               WHERE POLICYNUMBER = :DB2-POLICYNUM-INT
           END-EXEC.
           EXIT.
       INSERT-ENDOW.
           MOVE CA-E-TERM        TO DB2-E-TERM-SINT
           MOVE CA-E-SUM-ASSURED TO DB2-E-SUMASSURED-INT
           MOVE ' INSERT ENDOW ' TO EM-SQLREQ
           SUBTRACT WS-REQUIRED-CA-LEN FROM EIBCALEN
               GIVING WS-VARY-LEN
           IF WS-VARY-LEN IS GREATER THAN ZERO
              MOVE CA-E-PADDING-DATA
                  TO WS-VARY-CHAR(1:WS-VARY-LEN)
              EXEC SQL
                INSERT INTO ENDOWMENT
                          ( POLICYNUMBER,
                            WITHPROFITS,
                            EQUITIES,
                            MANAGEDFUND,
                            FUNDNAME,
                            TERM,
                            SUMASSURED,
                            LIFEASSURED,
                            PADDINGDATA    )
                   VALUES ( :DB2-POLICYNUM-INT,
                            :CA-E-WITH-PROFITS,
                            :CA-E-EQUITIES,
                            :CA-E-MANAGED-FUND,
                            :CA-E-FUND-NAME,
                            :DB2-E-TERM-SINT,
                            :DB2-E-SUMASSURED-INT,
                            :CA-E-LIFE-ASSURED,
                            :WS-VARY-FIELD )
              END-EXEC
           ELSE
              EXEC SQL
                INSERT INTO ENDOWMENT
                          ( POLICYNUMBER,
                            WITHPROFITS,
                            EQUITIES,
                            MANAGEDFUND,
                            FUNDNAME,
                            TERM,
                            SUMASSURED,
                            LIFEASSURED    )
                   VALUES ( :DB2-POLICYNUM-INT,
                            :CA-E-WITH-PROFITS,
                            :CA-E-EQUITIES,
                            :CA-E-MANAGED-FUND,
                            :CA-E-FUND-NAME,
                            :DB2-E-TERM-SINT,
                            :DB2-E-SUMASSURED-INT,
                            :CA-E-LIFE-ASSURED )
              END-EXEC
           END-IF
           IF SQLCODE NOT EQUAL 0
             MOVE '90' TO CA-RETURN-CODE
             PERFORM WRITE-ERROR-MESSAGE
             EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
             EXEC CICS RETURN END-EXEC
           END-IF.
           EXIT.
       INSERT-HOUSE.
           MOVE CA-H-VALUE       TO DB2-H-VALUE-INT
           MOVE CA-H-BEDROOMS    TO DB2-H-BEDROOMS-SINT
           MOVE ' INSERT HOUSE ' TO EM-SQLREQ
           EXEC SQL
             INSERT INTO HOUSE
                       ( POLICYNUMBER,
                         PROPERTYTYPE,
                         BEDROOMS,
                         VALUE,
                         HOUSENAME,
                         HOUSENUMBER,
                         POSTCODE          )
                VALUES ( :DB2-POLICYNUM-INT,
                         :CA-H-PROPERTY-TYPE,
                         :DB2-H-BEDROOMS-SINT,
                         :DB2-H-VALUE-INT,
                         :CA-H-HOUSE-NAME,
                         :CA-H-HOUSE-NUMBER,
                         :CA-H-POSTCODE      )
           END-EXEC
           IF SQLCODE NOT EQUAL 0
             MOVE '90' TO CA-RETURN-CODE
             PERFORM WRITE-ERROR-MESSAGE
             EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
             EXEC CICS RETURN END-EXEC
           END-IF.
           EXIT.
       INSERT-MOTOR.
           MOVE CA-M-VALUE       TO DB2-M-VALUE-INT
           MOVE CA-M-CC          TO DB2-M-CC-SINT
           MOVE CA-M-PREMIUM     TO DB2-M-PREMIUM-INT
           MOVE CA-M-ACCIDENTS   TO DB2-M-ACCIDENTS-INT
           MOVE ' INSERT MOTOR ' TO EM-SQLREQ
           EXEC SQL
             INSERT INTO MOTOR
                       ( POLICYNUMBER,
                         MAKE,
                         MODEL,
                         VALUE,
                         REGNUMBER,
                         COLOUR,
                         CC,
                         YEAROFMANUFACTURE,
                         PREMIUM,
                         ACCIDENTS )
                VALUES ( :DB2-POLICYNUM-INT,
                         :CA-M-MAKE,
                         :CA-M-MODEL,
                         :DB2-M-VALUE-INT,
                         :CA-M-REGNUMBER,
                         :CA-M-COLOUR,
                         :DB2-M-CC-SINT,
                         :CA-M-MANUFACTURED,
                         :DB2-M-PREMIUM-INT,
                         :DB2-M-ACCIDENTS-INT )
           END-EXEC
           IF SQLCODE NOT EQUAL 0
             MOVE '90' TO CA-RETURN-CODE
             PERFORM WRITE-ERROR-MESSAGE
             EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
             EXEC CICS RETURN END-EXEC
           END-IF.
           EXIT.
       INSERT-COMMERCIAL.
           MOVE CA-B-FirePeril       To DB2-B-FirePeril-Int
           MOVE CA-B-FirePremium     To DB2-B-FirePremium-Int
           MOVE CA-B-CrimePeril      To DB2-B-CrimePeril-Int
           MOVE CA-B-CrimePremium    To DB2-B-CrimePremium-Int
           MOVE CA-B-FloodPeril      To DB2-B-FloodPeril-Int
           MOVE CA-B-FloodPremium    To DB2-B-FloodPremium-Int
           MOVE CA-B-WeatherPeril    To DB2-B-WeatherPeril-Int
           MOVE CA-B-WeatherPremium  To DB2-B-WeatherPremium-Int
           MOVE CA-B-Status          To DB2-B-Status-Int
           MOVE ' INSERT COMMER' TO EM-SQLREQ
           EXEC SQL
             INSERT INTO COMMERCIAL
                       (
                         PolicyNumber,
                         RequestDate,
                         StartDate,
                         RenewalDate,
                         Address,
                         Zipcode,
                         LatitudeN,
                         LongitudeW,
                         Customer,
                         PropertyType,
                         FirePeril,
                         FirePremium,
                         CrimePeril,
                         CrimePremium,
                         FloodPeril,
                         FloodPremium,
                         WeatherPeril,
                         WeatherPremium,
                         Status,
                         RejectionReason
                                             )
                VALUES (
                         :DB2-POLICYNUM-INT,
                         :CA-LASTCHANGED,
                         :CA-ISSUE-DATE,
                         :CA-EXPIRY-DATE,
                         :CA-B-Address,
                         :CA-B-Postcode,
                         :CA-B-Latitude,
                         :CA-B-Longitude,
                         :CA-B-Customer,
                         :CA-B-PropType,
                         :DB2-B-FirePeril-Int,
                         :DB2-B-FirePremium-Int,
                         :DB2-B-CrimePeril-Int,
                         :DB2-B-CrimePremium-Int,
                         :DB2-B-FloodPeril-Int,
                         :DB2-B-FloodPremium-Int,
                         :DB2-B-WeatherPeril-Int,
                         :DB2-B-WeatherPremium-Int,
                         :DB2-B-Status-Int,
                         :CA-B-RejectReason
                                             )
           END-EXEC
           IF SQLCODE NOT EQUAL 0
             MOVE '90' TO CA-RETURN-CODE
             PERFORM WRITE-ERROR-MESSAGE
             EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
             EXEC CICS RETURN END-EXEC
           END-IF.
           EXIT.
       WRITE-ERROR-MESSAGE.
           MOVE SQLCODE TO EM-SQLRC
           EXEC CICS ASKTIME ABSTIME(ABS-TIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(ABS-TIME)
                     MMDDYYYY(DATE1)
                     TIME(TIME1)
           END-EXEC
           MOVE DATE1 TO EM-DATE
           MOVE TIME1 TO EM-TIME
           EXEC CICS LINK PROGRAM('LGSTSQ')
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'LGAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  ABS-TIME                    PIC S9(8) COMP VALUE +0.
       01  TIME1                       PIC X(8)  VALUE SPACES.
       01  DATE1                       PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGAPDB01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-POLNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01  CA-ERROR-MSG.
           03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA                  PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +28.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01 WS-VARY-FIELD.
          49 WS-VARY-LEN               PIC S9(4) COMP.
          49 WS-VARY-CHAR              PIC X(3900).
           EXEC SQL
             INCLUDE LGPOLICY
           END-EXEC.
       01 DB2-IN-INTEGERS.
           03 DB2-CUSTOMERNUM-INT      PIC S9(9) COMP.
           03 DB2-BROKERID-INT         PIC S9(9) COMP.
           03 DB2-PAYMENT-INT          PIC S9(9) COMP.
           03 DB2-E-TERM-SINT          PIC S9(4) COMP.
           03 DB2-E-SUMASSURED-INT     PIC S9(9) COMP.
           03 DB2-E-PADDING-LEN        PIC S9(9) COMP.
           03 DB2-H-BEDROOMS-SINT      PIC S9(4) COMP.
           03 DB2-H-VALUE-INT          PIC S9(9) COMP.
           03 DB2-M-VALUE-INT          PIC S9(9) COMP.
           03 DB2-M-CC-SINT            PIC S9(4) COMP.
           03 DB2-M-PREMIUM-int        PIC S9(9) COMP.
           03 DB2-M-ACCIDENTS-int      PIC S9(9) COMP.
           03 DB2-B-FirePeril-Int      PIC S9(4) COMP.
           03 DB2-B-FirePremium-Int    PIC S9(9) COMP.
           03 DB2-B-CrimePeril-Int     PIC S9(4) COMP.
           03 DB2-B-CrimePremium-Int   PIC S9(9) COMP.
           03 DB2-B-FloodPeril-Int     PIC S9(4) COMP.
           03 DB2-B-FloodPremium-Int   PIC S9(9) COMP.
           03 DB2-B-WeatherPeril-Int   PIC S9(4) COMP.
           03 DB2-B-WeatherPremium-Int PIC S9(9) COMP.
           03 DB2-B-Status-Int         PIC S9(4) COMP.
           03 DB2-C-Policynum-Int      PIC S9(9) COMP.
           03 DB2-C-Num-INT            PIC S9(9) COMP Value +0.
           03 DB2-C-Paid-INT           PIC S9(9) COMP.
           03 DB2-C-Value-INT          PIC S9(9) COMP.
       01 DB2-OUT-INTEGERS.
           03 DB2-POLICYNUM-INT        PIC S9(9) COMP VALUE +0.
       01  LGAPVS01                    PIC X(8)  VALUE 'LGAPVS01'.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE LGCMAREA
           END-EXEC.
","['MAINLINE', 'MAINLINE-EXIT', 'INSERT-POLICY', 'INSERT-ENDOW', 'INSERT-HOUSE', 'INSERT-MOTOR', 'INSERT-COMMERCIAL', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph INSERT-ENDOW, WRITE-ERROR-MESSAGE, INSERT-COMMERCIAL, INSERT-POLICY, INSERT-HOUSE, INSERT-MOTOR.
Paragraph INSERT-POLICY calls paragraph WRITE-ERROR-MESSAGE.
Paragraph INSERT-ENDOW calls paragraph WRITE-ERROR-MESSAGE.
Paragraph INSERT-HOUSE calls paragraph WRITE-ERROR-MESSAGE.
Paragraph INSERT-MOTOR calls paragraph WRITE-ERROR-MESSAGE.
Paragraph INSERT-COMMERCIAL calls paragraph WRITE-ERROR-MESSAGE.
",409,"ADD Policy: To add full details of an individual policy: Endowment, House, Motor, Commercial","['LGAPVS01', 'LGSTSQ']",,,"1. Business Purpose: The COBOL file is designed to process data related to policies, endowments, houses, motor vehicles, and commercial transactions.

2. Functionality: The file contains subroutines for inserting data into these categories and handling error messages.

3. File Organization: The file is divided into paragraphs, with each paragraph responsible for a specific task such as inserting data or writing error messages.

4. Control Structures: The file uses various control structures such as IF statements and loops to handle different scenarios and perform conditional processing.

5. Data Manipulation: The file involves data manipulation operations such as arithmetic calculations, string concatenations, and data conversions.

6. Error Handling: The file includes error handling mechanisms to handle exceptions and provide appropriate error messages.

7. Performance Considerations: The file may have performance considerations such as efficient data access and memory management to ensure optimal performance.","This COBOL program manages the insertion of various policy types into a database, including policies for endowments, houses, motors, and commercial entities. It initializes variables and checks conditions before executing SQL commands for each type. Error handling is performed by writing error messages through the WRITE-ERROR-MESSAGE paragraph whenever SQL operations fail. The program concludes with the MAINLINE-EXIT label to terminate the execution. Each insertion process also communicates with the WRITE-ERROR-MESSAGE for effective error management.",1.0,1.0,1.0
161,cicsdev_cics-genapp,cics-genapp/base/src/lgupvs01.cbl,"       IDENTIFICATION DIVISION.
       PROGRAM-ID. LGUPVS01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-RESP                   PIC S9(8) COMP.
       01  WS-RESP2                  PIC S9(8) COMP.
       01  WS-Comm-Len               PIC S9(8) COMP.
       01  WS-STARTCODE              PIC XX Value spaces.
       01  WS-SYSID                  PIC X(4) Value spaces.
       01  WS-Commarea-Len           PIC S9(4) COMP Value 64.
       01  WS-Commarea-LenF          PIC S9(4) COMP Value 64.
       01  WF-Policy-Info.
         03  WF-Policy-Key.
           05  WF-Request-ID           Pic X.
           05  WF-Customer-Num         Pic X(10).
           05  WF-Policy-Num           Pic X(10).
         03 WF-Policy-Data             Pic X(43).
         03 WF-C-Policy-Data Redefines WF-Policy-Data.
           05  WF-B-Postcode           Pic X(8).
           05  WF-B-Status             Pic 9(4).
           05  WF-B-Customer           Pic X(31).
         03 WF-E-Policy-Data Redefines WF-Policy-Data.
           05  WF-E-WITH-PROFITS       Pic X.
           05  WF-E-EQUITIES           Pic X.
           05  WF-E-MANAGED-FUND       Pic X.
           05  WF-E-FUND-NAME          Pic X(10).
           05  WF-E-LIFE-ASSURED       Pic X(30).
         03 WF-H-Policy-Data Redefines WF-Policy-Data.
           05  WF-H-PROPERTY-TYPE      Pic X(15).
           05  WF-H-BEDROOMS           Pic 999.
           05  WF-H-VALUE              Pic 9(8).
           05  WF-H-POSTCODE           Pic X(8).
           05  WF-H-HOUSE-NAME         Pic X(9).
         03 WF-M-Policy-Data Redefines WF-Policy-Data.
           05  WF-M-MAKE               Pic X(15).
           05  WF-M-MODEL              Pic X(15).
           05  WF-M-VALUE              Pic 9(6).
           05  WF-M-REGNUMBER          Pic X(7).
       01  WS-FileIn                   Pic X(1024) value Spaces.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGUPVS01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-POLNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(20)
                                        Value ' Re-write  KSDSPOLY '.
             05 FILLER                 PIC X(6)  VALUE ' RESP='.
             05 EM-RESPRC              PIC +9(5) USAGE DISPLAY.
             05 FILLER                 PIC X(7)  VALUE ' RESP2='.
             05 EM-RESP2RC             PIC +9(5) USAGE DISPLAY.
       01  CA-ERROR-MSG.
           03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA                  PIC X(90) VALUE SPACES.
       77 Eyecatcher               PIC X(16)
                                      Value 'Program LGUPVS01'.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           03 CA-REQUEST-ID            PIC X(6).
           03 CA-RETURN-CODE           PIC 9(2).
           03 CA-CUSTOMER-NUM          PIC 9(10).
           03 CA-REQUEST-SPECIFIC      PIC X(32482).
           03 CA-CUSTOMER-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-FIRST-NAME         PIC X(10).
              05 CA-LAST-NAME          PIC X(20).
              05 CA-DOB                PIC X(10).
              05 CA-HOUSE-NAME         PIC X(20).
              05 CA-HOUSE-NUM          PIC X(4).
              05 CA-POSTCODE           PIC X(8).
              05 CA-NUM-POLICIES       PIC 9(3).
              05 CA-PHONE-MOBILE       PIC X(20).
              05 CA-PHONE-HOME         PIC X(20).
              05 CA-EMAIL-ADDRESS      PIC X(100).
              05 CA-POLICY-DATA        PIC X(32267).
           03 CA-CUSTSECR-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-CUSTSECR-PASS      PIC X(32).
              05 CA-CUSTSECR-COUNT     PIC X(4).
              05 CA-CUSTSECR-STATE     PIC X.
              05 CA-CUSTSECR-DATA      PIC X(32445).
           03 CA-POLICY-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-POLICY-NUM         PIC 9(10).
              05 CA-POLICY-COMMON.
                 07 CA-ISSUE-DATE      PIC X(10).
                 07 CA-EXPIRY-DATE     PIC X(10).
                 07 CA-LASTCHANGED     PIC X(26).
                 07 CA-BROKERID        PIC 9(10).
                 07 CA-BROKERSREF      PIC X(10).
                 07 CA-PAYMENT         PIC 9(6).
              05 CA-POLICY-SPECIFIC    PIC X(32400).
              05 CA-ENDOWMENT REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-E-WITH-PROFITS    PIC X.
                 07 CA-E-EQUITIES        PIC X.
                 07 CA-E-MANAGED-FUND    PIC X.
                 07 CA-E-FUND-NAME       PIC X(10).
                 07 CA-E-TERM            PIC 99.
                 07 CA-E-SUM-ASSURED     PIC 9(6).
                 07 CA-E-LIFE-ASSURED    PIC X(31).
                 07 CA-E-PADDING-DATA    PIC X(32348).
              05 CA-HOUSE REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-H-PROPERTY-TYPE   PIC X(15).
                 07 CA-H-BEDROOMS        PIC 9(3).
                 07 CA-H-VALUE           PIC 9(8).
                 07 CA-H-HOUSE-NAME      PIC X(20).
                 07 CA-H-HOUSE-NUMBER    PIC X(4).
                 07 CA-H-POSTCODE        PIC X(8).
                 07 CA-H-FILLER          PIC X(32342).
              05 CA-MOTOR REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-M-MAKE            PIC X(15).
                 07 CA-M-MODEL           PIC X(15).
                 07 CA-M-VALUE           PIC 9(6).
                 07 CA-M-REGNUMBER       PIC X(7).
                 07 CA-M-COLOUR          PIC X(8).
                 07 CA-M-CC              PIC 9(4).
                 07 CA-M-MANUFACTURED    PIC X(10).
                 07 CA-M-PREMIUM         PIC 9(6).
                 07 CA-M-ACCIDENTS       PIC 9(6).
                 07 CA-M-FILLER          PIC X(32323).
              05 CA-COMMERCIAL REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-B-Address         PIC X(255).
                 07 CA-B-Postcode        PIC X(8).
                 07 CA-B-Latitude        PIC X(11).
                 07 CA-B-Longitude       PIC X(11).
                 07 CA-B-Customer        PIC X(255).
                 07 CA-B-PropType        PIC X(255).
                 07 CA-B-FirePeril       PIC 9(4).
                 07 CA-B-FirePremium     PIC 9(8).
                 07 CA-B-CrimePeril      PIC 9(4).
                 07 CA-B-CrimePremium    PIC 9(8).
                 07 CA-B-FloodPeril      PIC 9(4).
                 07 CA-B-FloodPremium    PIC 9(8).
                 07 CA-B-WeatherPeril    PIC 9(4).
                 07 CA-B-WeatherPremium  PIC 9(8).
                 07 CA-B-Status          PIC 9(4).
                 07 CA-B-RejectReason    PIC X(255).
                 07 CA-B-FILLER          PIC X(31298).
              05 CA-CLAIM      REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-C-Num             PIC 9(10).
                 07 CA-C-Date            PIC X(10).
                 07 CA-C-Paid            PIC 9(8).
                 07 CA-C-Value           PIC 9(8).
                 07 CA-C-Cause           PIC X(255).
                 07 CA-C-Observations    PIC X(255).
                 07 CA-C-FILLER          PIC X(31854).
       PROCEDURE DIVISION.
       MAINLINE.
           Move EIBCALEN To WS-Commarea-Len.
           Move CA-Request-ID(4:1) To WF-Request-ID
           Move CA-Policy-Num      To WF-Policy-Num
           Move CA-Customer-Num    To WF-Customer-Num
           Evaluate WF-Request-ID
             When 'C'
               Move CA-B-Postcode  To WF-B-Postcode
               Move CA-B-Status    To WF-B-Status
               Move CA-B-Customer  To WF-B-Customer
             When 'E'
               Move CA-E-WITH-PROFITS To  WF-E-WITH-PROFITS
               Move CA-E-EQUITIES     To  WF-E-EQUITIES
               Move CA-E-MANAGED-FUND To  WF-E-MANAGED-FUND
               Move CA-E-FUND-NAME    To  WF-E-FUND-NAME
               Move CA-E-LIFE-ASSURED To  WF-E-LIFE-ASSURED
             When 'H'
               Move CA-H-PROPERTY-TYPE To  WF-H-PROPERTY-TYPE
               Move CA-H-BEDROOMS      To  WF-H-BEDROOMS
               Move CA-H-VALUE         To  WF-H-VALUE
               Move CA-H-POSTCODE      To  WF-H-POSTCODE
               Move CA-H-HOUSE-NAME    To  WF-H-HOUSE-NAME
             When 'M'
               Move CA-M-MAKE          To  WF-M-MAKE
               Move CA-M-MODEL         To  WF-M-MODEL
               Move CA-M-VALUE         To  WF-M-VALUE
               Move CA-M-REGNUMBER     To  WF-M-REGNUMBER
             When Other
               Move Spaces To WF-Policy-Data
           End-Evaluate
           Move CA-Policy-Num      To WF-Policy-Num
           Exec CICS Read File('KSDSPOLY')
                     Into(WS-FileIn)
                     Length(WS-Commarea-Len)
                     Ridfld(WF-Policy-Key)
                     KeyLength(21)
                     RESP(WS-RESP)
                     Update
           End-Exec.
           If WS-RESP Not = DFHRESP(NORMAL)
             Move EIBRESP2 To WS-RESP2
             MOVE '81' TO CA-RETURN-CODE
             PERFORM WRITE-ERROR-MESSAGE
             EXEC CICS ABEND ABCODE('LGV3') NODUMP END-EXEC
             EXEC CICS RETURN END-EXEC
           End-If.
           Exec CICS ReWrite File('KSDSPOLY')
                     From(WF-Policy-Info)
                     Length(WS-Commarea-LenF)
                     RESP(WS-RESP)
           End-Exec.
           If WS-RESP Not = DFHRESP(NORMAL)
             Move EIBRESP2 To WS-RESP2
             MOVE '82' TO CA-RETURN-CODE
             PERFORM WRITE-ERROR-MESSAGE
             EXEC CICS ABEND ABCODE('LGV4') NODUMP END-EXEC
             EXEC CICS RETURN END-EXEC
           End-If.
       A-EXIT.
           EXIT.
           GOBACK.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           Move CA-Customer-Num To EM-Cusnum
           Move WS-RESP         To EM-RespRC
           Move WS-RESP2        To EM-Resp2RC
           EXEC CICS LINK PROGRAM('LGSTSQ')
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(Length Of CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(Length Of CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-RESP                   PIC S9(8) COMP.
       01  WS-RESP2                  PIC S9(8) COMP.
       01  WS-Comm-Len               PIC S9(8) COMP.
       01  WS-STARTCODE              PIC XX Value spaces.
       01  WS-SYSID                  PIC X(4) Value spaces.
       01  WS-Commarea-Len           PIC S9(4) COMP Value 64.
       01  WS-Commarea-LenF          PIC S9(4) COMP Value 64.
       01  WF-Policy-Info.
         03  WF-Policy-Key.
           05  WF-Request-ID           Pic X.
           05  WF-Customer-Num         Pic X(10).
           05  WF-Policy-Num           Pic X(10).
         03 WF-Policy-Data             Pic X(43).
         03 WF-C-Policy-Data Redefines WF-Policy-Data.
           05  WF-B-Postcode           Pic X(8).
           05  WF-B-Status             Pic 9(4).
           05  WF-B-Customer           Pic X(31).
         03 WF-E-Policy-Data Redefines WF-Policy-Data.
           05  WF-E-WITH-PROFITS       Pic X.
           05  WF-E-EQUITIES           Pic X.
           05  WF-E-MANAGED-FUND       Pic X.
           05  WF-E-FUND-NAME          Pic X(10).
           05  WF-E-LIFE-ASSURED       Pic X(30).
         03 WF-H-Policy-Data Redefines WF-Policy-Data.
           05  WF-H-PROPERTY-TYPE      Pic X(15).
           05  WF-H-BEDROOMS           Pic 999.
           05  WF-H-VALUE              Pic 9(8).
           05  WF-H-POSTCODE           Pic X(8).
           05  WF-H-HOUSE-NAME         Pic X(9).
         03 WF-M-Policy-Data Redefines WF-Policy-Data.
           05  WF-M-MAKE               Pic X(15).
           05  WF-M-MODEL              Pic X(15).
           05  WF-M-VALUE              Pic 9(6).
           05  WF-M-REGNUMBER          Pic X(7).
       01  WS-FileIn                   Pic X(1024) value Spaces.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGUPVS01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-POLNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(20)
                                        Value ' Re-write  KSDSPOLY '.
             05 FILLER                 PIC X(6)  VALUE ' RESP='.
             05 EM-RESPRC              PIC +9(5) USAGE DISPLAY.
             05 FILLER                 PIC X(7)  VALUE ' RESP2='.
             05 EM-RESP2RC             PIC +9(5) USAGE DISPLAY.
       01  CA-ERROR-MSG.
           03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA                  PIC X(90) VALUE SPACES.
       77 Eyecatcher               PIC X(16)
                                      Value 'Program LGUPVS01'.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           03 CA-REQUEST-ID            PIC X(6).
           03 CA-RETURN-CODE           PIC 9(2).
           03 CA-CUSTOMER-NUM          PIC 9(10).
           03 CA-REQUEST-SPECIFIC      PIC X(32482).
           03 CA-CUSTOMER-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-FIRST-NAME         PIC X(10).
              05 CA-LAST-NAME          PIC X(20).
              05 CA-DOB                PIC X(10).
              05 CA-HOUSE-NAME         PIC X(20).
              05 CA-HOUSE-NUM          PIC X(4).
              05 CA-POSTCODE           PIC X(8).
              05 CA-NUM-POLICIES       PIC 9(3).
              05 CA-PHONE-MOBILE       PIC X(20).
              05 CA-PHONE-HOME         PIC X(20).
              05 CA-EMAIL-ADDRESS      PIC X(100).
              05 CA-POLICY-DATA        PIC X(32267).
           03 CA-CUSTSECR-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-CUSTSECR-PASS      PIC X(32).
              05 CA-CUSTSECR-COUNT     PIC X(4).
              05 CA-CUSTSECR-STATE     PIC X.
              05 CA-CUSTSECR-DATA      PIC X(32445).
           03 CA-POLICY-REQUEST REDEFINES CA-REQUEST-SPECIFIC.
              05 CA-POLICY-NUM         PIC 9(10).
              05 CA-POLICY-COMMON.
                 07 CA-ISSUE-DATE      PIC X(10).
                 07 CA-EXPIRY-DATE     PIC X(10).
                 07 CA-LASTCHANGED     PIC X(26).
                 07 CA-BROKERID        PIC 9(10).
                 07 CA-BROKERSREF      PIC X(10).
                 07 CA-PAYMENT         PIC 9(6).
              05 CA-POLICY-SPECIFIC    PIC X(32400).
              05 CA-ENDOWMENT REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-E-WITH-PROFITS    PIC X.
                 07 CA-E-EQUITIES        PIC X.
                 07 CA-E-MANAGED-FUND    PIC X.
                 07 CA-E-FUND-NAME       PIC X(10).
                 07 CA-E-TERM            PIC 99.
                 07 CA-E-SUM-ASSURED     PIC 9(6).
                 07 CA-E-LIFE-ASSURED    PIC X(31).
                 07 CA-E-PADDING-DATA    PIC X(32348).
              05 CA-HOUSE REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-H-PROPERTY-TYPE   PIC X(15).
                 07 CA-H-BEDROOMS        PIC 9(3).
                 07 CA-H-VALUE           PIC 9(8).
                 07 CA-H-HOUSE-NAME      PIC X(20).
                 07 CA-H-HOUSE-NUMBER    PIC X(4).
                 07 CA-H-POSTCODE        PIC X(8).
                 07 CA-H-FILLER          PIC X(32342).
              05 CA-MOTOR REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-M-MAKE            PIC X(15).
                 07 CA-M-MODEL           PIC X(15).
                 07 CA-M-VALUE           PIC 9(6).
                 07 CA-M-REGNUMBER       PIC X(7).
                 07 CA-M-COLOUR          PIC X(8).
                 07 CA-M-CC              PIC 9(4).
                 07 CA-M-MANUFACTURED    PIC X(10).
                 07 CA-M-PREMIUM         PIC 9(6).
                 07 CA-M-ACCIDENTS       PIC 9(6).
                 07 CA-M-FILLER          PIC X(32323).
              05 CA-COMMERCIAL REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-B-Address         PIC X(255).
                 07 CA-B-Postcode        PIC X(8).
                 07 CA-B-Latitude        PIC X(11).
                 07 CA-B-Longitude       PIC X(11).
                 07 CA-B-Customer        PIC X(255).
                 07 CA-B-PropType        PIC X(255).
                 07 CA-B-FirePeril       PIC 9(4).
                 07 CA-B-FirePremium     PIC 9(8).
                 07 CA-B-CrimePeril      PIC 9(4).
                 07 CA-B-CrimePremium    PIC 9(8).
                 07 CA-B-FloodPeril      PIC 9(4).
                 07 CA-B-FloodPremium    PIC 9(8).
                 07 CA-B-WeatherPeril    PIC 9(4).
                 07 CA-B-WeatherPremium  PIC 9(8).
                 07 CA-B-Status          PIC 9(4).
                 07 CA-B-RejectReason    PIC X(255).
                 07 CA-B-FILLER          PIC X(31298).
              05 CA-CLAIM      REDEFINES CA-POLICY-SPECIFIC.
                 07 CA-C-Num             PIC 9(10).
                 07 CA-C-Date            PIC X(10).
                 07 CA-C-Paid            PIC 9(8).
                 07 CA-C-Value           PIC 9(8).
                 07 CA-C-Cause           PIC X(255).
                 07 CA-C-Observations    PIC X(255).
                 07 CA-C-FILLER          PIC X(31854).
","['MAINLINE', 'A-EXIT', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph WRITE-ERROR-MESSAGE.
",247,Update Policy - VSAM: VSAM KSDS Policy record Update,['LGSTSQ'],,['KSDSPOLY'],"1. This COBOL file is used for business applications.

2. It has an ""A-EXIT"" section that defines an alternate exit point for the program.

3. The ""EXIT"" keyword is used to terminate the current program or procedure and return control to the calling program or procedure.

4. The ""GOBACK"" keyword causes the program to return to the calling program or procedure without performing any further processing.

5. The ""WRITE-ERROR-MESSAGE"" paragraph is called by the ""MAINLINE"" paragraph.","This COBOL file processes policy data by moving and evaluating it, followed by reading and rewriting a file. If an error occurs, it triggers the WRITE-ERROR-MESSAGE subroutine, which captures the current time and constructs an error message for the CICS transaction, calling another program for further processing. Finally, the A-EXIT paragraph cleanly terminates program execution and returns control to the operating system.",1.0,1.0,1.0
162,cicsdev_cics-genapp,cics-genapp/base/src/lgicdb01.cbl,"       PROCESS SQL
       IDENTIFICATION DIVISION.
       PROGRAM-ID. LGICDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'LGICDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGICUS01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-IN-INTEGERS.
           03 DB2-CUSTOMERNUMBER-INT   PIC S9(9) COMP.
       01  WS-POLICY-LENGTHS.
           03 WS-CUSTOMER-LEN          PIC S9(4) COMP VALUE +72.
           03 WS-POLICY-LEN            PIC S9(4) COMP VALUE +72.
           03 WS-ENDOW-LEN             PIC S9(4) COMP VALUE +52.
           03 WS-HOUSE-LEN             PIC S9(4) COMP VALUE +58.
           03 WS-MOTOR-LEN             PIC S9(4) COMP VALUE +65.
           03 WS-COMM-LEN              PIC S9(4) COMP VALUE +1102.
           03 WS-CLAIM-LEN             PIC S9(4) COMP VALUE +546.
           03 WS-FULL-ENDOW-LEN        PIC S9(4) COMP VALUE +124.
           03 WS-FULL-HOUSE-LEN        PIC S9(4) COMP VALUE +130.
           03 WS-FULL-MOTOR-LEN        PIC S9(4) COMP VALUE +137.
           03 WS-FULL-COMM-LEN         PIC S9(4) COMP VALUE +1174.
           03 WS-FULL-CLAIM-LEN        PIC S9(4) COMP VALUE +618.
           03 WS-SUMRY-ENDOW-LEN       PIC S9(4) COMP VALUE +25.
       01  DB2-CUSTOMER.
           03 DB2-FIRSTNAME            PIC X(10).
           03 DB2-LASTNAME             PIC X(20).
           03 DB2-DATEOFBIRTH          PIC X(10).
           03 DB2-HOUSENAME            PIC X(20).
           03 DB2-HOUSENUMBER          PIC X(4).
           03 DB2-POSTCODE             PIC X(8).
           03 DB2-PHONE-MOBILE         PIC X(20).
           03 DB2-PHONE-HOME           PIC X(20).
           03 DB2-EMAIL-ADDRESS        PIC X(100).
       01  DB2-POLICY.
           03 DB2-POLICYTYPE           PIC X.
           03 DB2-POLICYNUMBER         PIC 9(10).
           03 DB2-POLICY-COMMON.
              05 DB2-ISSUEDATE         PIC X(10).
              05 DB2-EXPIRYDATE        PIC X(10).
              05 DB2-LASTCHANGED       PIC X(26).
              05 DB2-BROKERID          PIC 9(10).
              05 DB2-BROKERSREF        PIC X(10).
              05 DB2-PAYMENT           PIC 9(6).
       01  DB2-ENDOWMENT.
           03 DB2-ENDOW-FIXED.
              05 DB2-E-WITHPROFITS      PIC X.
              05 DB2-E-EQUITIES         PIC X.
              05 DB2-E-MANAGEDFUND      PIC X.
              05 DB2-E-FUNDNAME         PIC X(10).
              05 DB2-E-TERM             PIC 9(2).
              05 DB2-E-SUMASSURED       PIC 9(6).
              05 DB2-E-LIFEASSURED      PIC X(31).
           03 DB2-E-PADDINGDATA         PIC X(32611).
       01  DB2-HOUSE.
           03 DB2-H-PROPERTYTYPE       PIC X(15).
           03 DB2-H-BEDROOMS           PIC 9(3).
           03 DB2-H-VALUE              PIC 9(8).
           03 DB2-H-HOUSENAME          PIC X(20).
           03 DB2-H-HOUSENUMBER        PIC X(4).
           03 DB2-H-POSTCODE           PIC X(8).
       01  DB2-MOTOR.
           03 DB2-M-MAKE               PIC X(15).
           03 DB2-M-MODEL              PIC X(15).
           03 DB2-M-VALUE              PIC 9(6).
           03 DB2-M-REGNUMBER          PIC X(7).
           03 DB2-M-COLOUR             PIC X(8).
           03 DB2-M-CC                 PIC 9(4).
           03 DB2-M-MANUFACTURED       PIC X(10).
           03 DB2-M-PREMIUM            PIC 9(6).
           03 DB2-M-ACCIDENTS          PIC 9(6).
       01  DB2-COMMERCIAL.
           03 DB2-B-Address            PIC X(255).
           03 DB2-B-Postcode           PIC X(8).
           03 DB2-B-Latitude           PIC X(11).
           03 DB2-B-Longitude          PIC X(11).
           03 DB2-B-Customer           PIC X(255).
           03 DB2-B-PropType           PIC X(255).
           03 DB2-B-FirePeril          PIC 9(4).
           03 DB2-B-FirePremium        PIC 9(8).
           03 DB2-B-CrimePeril         PIC 9(4).
           03 DB2-B-CrimePremium       PIC 9(8).
           03 DB2-B-FloodPeril         PIC 9(4).
           03 DB2-B-FloodPremium       PIC 9(8).
           03 DB2-B-WeatherPeril       PIC 9(4).
           03 DB2-B-WeatherPremium     PIC 9(8).
           03 DB2-B-Status             PIC 9(4).
           03 DB2-B-RejectReason       PIC X(255).
       01  DB2-CLAIM.
           03 DB2-C-Num                PIC 9(10).
           03 DB2-C-Date               PIC X(10).
           03 DB2-C-Paid               PIC 9(8).
           03 DB2-C-Value              PIC 9(8).
           03 DB2-C-Cause              PIC X(255).
           03 DB2-C-Observations       PIC X(255).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE LGCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('LGCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           INITIALIZE DB2-IN-INTEGERS.
           MOVE WS-CUSTOMER-LEN        TO WS-REQUIRED-CA-LEN
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-CUSTOMER-NUM TO DB2-CUSTOMERNUMBER-INT
           MOVE CA-CUSTOMER-NUM TO EM-CUSNUM
           PERFORM GET-CUSTOMER-INFO.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-CUSTOMER-INFO.
           EXEC SQL
               SELECT FIRSTNAME,
                      LASTNAME,
                      DATEOFBIRTH,
                      HOUSENAME,
                      HOUSENUMBER,
                      POSTCODE,
                      PHONEMOBILE,
                      PHONEHOME,
                      EMAILADDRESS
               INTO  :CA-FIRST-NAME,
                     :CA-LAST-NAME,
                     :CA-DOB,
                     :CA-HOUSE-NAME,
                     :CA-HOUSE-NUM,
                     :CA-POSTCODE,
                     :CA-PHONE-MOBILE,
                     :CA-PHONE-HOME,
                     :CA-EMAIL-ADDRESS
               FROM CUSTOMER
               WHERE CUSTOMERNUMBER = :DB2-CUSTOMERNUMBER-INT
           END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       WRITE-ERROR-MESSAGE.
           MOVE SQLCODE TO EM-SQLRC
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM('LGSTSQ')
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.
","       WORKING-STORAGE SECTION.
       01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'LGICDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGICUS01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01 CA-ERROR-MSG.
           03 FILLER                PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA               PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-IN-INTEGERS.
           03 DB2-CUSTOMERNUMBER-INT   PIC S9(9) COMP.
       01  WS-POLICY-LENGTHS.
           03 WS-CUSTOMER-LEN          PIC S9(4) COMP VALUE +72.
           03 WS-POLICY-LEN            PIC S9(4) COMP VALUE +72.
           03 WS-ENDOW-LEN             PIC S9(4) COMP VALUE +52.
           03 WS-HOUSE-LEN             PIC S9(4) COMP VALUE +58.
           03 WS-MOTOR-LEN             PIC S9(4) COMP VALUE +65.
           03 WS-COMM-LEN              PIC S9(4) COMP VALUE +1102.
           03 WS-CLAIM-LEN             PIC S9(4) COMP VALUE +546.
           03 WS-FULL-ENDOW-LEN        PIC S9(4) COMP VALUE +124.
           03 WS-FULL-HOUSE-LEN        PIC S9(4) COMP VALUE +130.
           03 WS-FULL-MOTOR-LEN        PIC S9(4) COMP VALUE +137.
           03 WS-FULL-COMM-LEN         PIC S9(4) COMP VALUE +1174.
           03 WS-FULL-CLAIM-LEN        PIC S9(4) COMP VALUE +618.
           03 WS-SUMRY-ENDOW-LEN       PIC S9(4) COMP VALUE +25.
       01  DB2-CUSTOMER.
           03 DB2-FIRSTNAME            PIC X(10).
           03 DB2-LASTNAME             PIC X(20).
           03 DB2-DATEOFBIRTH          PIC X(10).
           03 DB2-HOUSENAME            PIC X(20).
           03 DB2-HOUSENUMBER          PIC X(4).
           03 DB2-POSTCODE             PIC X(8).
           03 DB2-PHONE-MOBILE         PIC X(20).
           03 DB2-PHONE-HOME           PIC X(20).
           03 DB2-EMAIL-ADDRESS        PIC X(100).
       01  DB2-POLICY.
           03 DB2-POLICYTYPE           PIC X.
           03 DB2-POLICYNUMBER         PIC 9(10).
           03 DB2-POLICY-COMMON.
              05 DB2-ISSUEDATE         PIC X(10).
              05 DB2-EXPIRYDATE        PIC X(10).
              05 DB2-LASTCHANGED       PIC X(26).
              05 DB2-BROKERID          PIC 9(10).
              05 DB2-BROKERSREF        PIC X(10).
              05 DB2-PAYMENT           PIC 9(6).
       01  DB2-ENDOWMENT.
           03 DB2-ENDOW-FIXED.
              05 DB2-E-WITHPROFITS      PIC X.
              05 DB2-E-EQUITIES         PIC X.
              05 DB2-E-MANAGEDFUND      PIC X.
              05 DB2-E-FUNDNAME         PIC X(10).
              05 DB2-E-TERM             PIC 9(2).
              05 DB2-E-SUMASSURED       PIC 9(6).
              05 DB2-E-LIFEASSURED      PIC X(31).
           03 DB2-E-PADDINGDATA         PIC X(32611).
       01  DB2-HOUSE.
           03 DB2-H-PROPERTYTYPE       PIC X(15).
           03 DB2-H-BEDROOMS           PIC 9(3).
           03 DB2-H-VALUE              PIC 9(8).
           03 DB2-H-HOUSENAME          PIC X(20).
           03 DB2-H-HOUSENUMBER        PIC X(4).
           03 DB2-H-POSTCODE           PIC X(8).
       01  DB2-MOTOR.
           03 DB2-M-MAKE               PIC X(15).
           03 DB2-M-MODEL              PIC X(15).
           03 DB2-M-VALUE              PIC 9(6).
           03 DB2-M-REGNUMBER          PIC X(7).
           03 DB2-M-COLOUR             PIC X(8).
           03 DB2-M-CC                 PIC 9(4).
           03 DB2-M-MANUFACTURED       PIC X(10).
           03 DB2-M-PREMIUM            PIC 9(6).
           03 DB2-M-ACCIDENTS          PIC 9(6).
       01  DB2-COMMERCIAL.
           03 DB2-B-Address            PIC X(255).
           03 DB2-B-Postcode           PIC X(8).
           03 DB2-B-Latitude           PIC X(11).
           03 DB2-B-Longitude          PIC X(11).
           03 DB2-B-Customer           PIC X(255).
           03 DB2-B-PropType           PIC X(255).
           03 DB2-B-FirePeril          PIC 9(4).
           03 DB2-B-FirePremium        PIC 9(8).
           03 DB2-B-CrimePeril         PIC 9(4).
           03 DB2-B-CrimePremium       PIC 9(8).
           03 DB2-B-FloodPeril         PIC 9(4).
           03 DB2-B-FloodPremium       PIC 9(8).
           03 DB2-B-WeatherPeril       PIC 9(4).
           03 DB2-B-WeatherPremium     PIC 9(8).
           03 DB2-B-Status             PIC 9(4).
           03 DB2-B-RejectReason       PIC X(255).
       01  DB2-CLAIM.
           03 DB2-C-Num                PIC 9(10).
           03 DB2-C-Date               PIC X(10).
           03 DB2-C-Paid               PIC 9(8).
           03 DB2-C-Value              PIC 9(8).
           03 DB2-C-Cause              PIC X(255).
           03 DB2-C-Observations       PIC X(255).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE LGCMAREA
           END-EXEC.
","['MAINLINE', 'MAINLINE-END', 'MAINLINE-EXIT', 'GET-CUSTOMER-INFO', 'WRITE-ERROR-MESSAGE']","Paragraph MAINLINE calls paragraph WRITE-ERROR-MESSAGE, GET-CUSTOMER-INFO.
Paragraph GET-CUSTOMER-INFO calls paragraph WRITE-ERROR-MESSAGE.
",226,Inquire Customer: Select customer details from DB2 table,['LGSTSQ'],,,"1. The code inside the <CODE> tags is written in COBOL, a programming language used for business applications.

2. The code snippet provided appears to be a part of a larger program that includes an ""A-EXIT"" section followed by the keywords ""EXIT"" and ""GOBACK"".

3. ""A-EXIT"" is a section that defines an alternate exit point for a program. It is typically used when there are multiple ways for a program to terminate and it is necessary to specify a specific exit point.

4. ""EXIT"" is a keyword in COBOL that terminates the current program or procedure and returns control to the calling program or procedure. ""GOBACK"", on the other hand, is a keyword that causes the program to return to the calling program or procedure without performing any further processing.

5. This code snippet appears to be a simple example of how to define an alternate exit point in COBOL and use the ""EXIT"" and ""GOBACK"" keywords to terminate the program or return control to the calling program.","This COBOL program facilitates the retrieval of customer information from a database and handles potential errors. The MAINLINE initializes execution, checks conditions, and invokes GET-CUSTOMER-INFO to fetch data, which in turn can call WRITE-ERROR-MESSAGE to log errors if needed. It concludes with MAINLINE-END and MAINLINE-EXIT to return control to both CICS and the operating system. Error handling and customer retrieval are efficiently managed, ensuring program robustness.",1.0,1.0,na
168,shamrice_COBOL-RSS-Reader,X-COBOL/X-COBOL/COBOL_Files/shamrice_COBOL-RSS-Reader/application_configurator_program_0.cbl,"       identification division.
       program-id. save-config.
       environment division.
       configuration section.
       input-output section.
           file-control.
               select optional fd-config-file
               assign to dynamic ws-file-name
               organization is indexed
               access is dynamic
               record key is f-config-name.           
       data division.
       file section.
           FD fd-config-file.
           01  f-config-set.
               05  f-config-name           pic x(8).
               05  f-config-value          pic x(32).    
       working-storage section.
       77  ws-file-name                    pic x(18) value ""crssr.conf"".
       local-storage section.
       01  ls-config-set.
           05  ls-config-name              pic x(8) value spaces.
           05  ls-config-value             pic x(32) value spaces.
       01  ls-record-exists-sw             pic x value 'N'.
           88  ls-record-exists            value 'Y'.
           88  ls-record-not-exists        value 'N'. 
       linkage section.
       01  l-config-name                   pic x any length.
       01  l-config-value                  pic x any length.
       procedure division 
           using l-config-name, l-config-value.
       main-procedure.
           move l-config-name to ls-config-name
           move l-config-value to ls-config-value
           call ""logger"" using function concatenate(
               ""Saving configuration: "", ls-config-name, 
               "" with value: "", ls-config-value)
           end-call 
           open extend fd-config-file
           close fd-config-file
           open i-o fd-config-file
               write f-config-set from ls-config-set
                   invalid key 
                       call ""logger"" using 
                           ""Config key already exists in list.""
                       end-call 
                       set ls-record-exists to true 
                   not invalid key 
                       call ""logger"" using 
                           ""Saved new Config to config file""
                       end-call 
                       set ls-record-not-exists to true 
               end-write
               if ls-record-exists then 
                   rewrite f-config-set from ls-config-set
                       invalid key
                           call ""logger"" using function concatenate(
                               ""Config record exists but rewrite "",
                               ""failed on invalid key for config set: "", 
                               ls-config-set)
                           end-call
                       not invalid key
                           call ""logger"" using function concatenate(
                               ""Config record updated with new value: "",
                               ls-config-set)
                           end-call
                   end-rewrite
               end-if
           close fd-config-file
           goback.
       end program save-config.
","       file section.
           FD fd-config-file.
           01  f-config-set.
               05  f-config-name           pic x(8).
               05  f-config-value          pic x(32).    
       working-storage section.
       77  ws-file-name                    pic x(18) value ""crssr.conf"".
       local-storage section.
       01  ls-config-set.
           05  ls-config-name              pic x(8) value spaces.
           05  ls-config-value             pic x(32) value spaces.
       01  ls-record-exists-sw             pic x value 'N'.
           88  ls-record-exists            value 'Y'.
           88  ls-record-not-exists        value 'N'. 
       linkage section.
       01  l-config-name                   pic x any length.
       01  l-config-value                  pic x any length.
",['main-procedure'],,72,Sub program to save or update configuration value.,,,,"1. The COBOL file is used to save configuration settings to a file.
2. The main procedure moves the configuration name and value into variables, logs a message indicating that the configuration is being saved, opens an extendable file called fd-config-file, closes the file, and then opens it for input/output.
3. It writes the configuration settings to the file using the ls-config-set variable, checking first to see if the key already exists in the list. If the key is invalid, it logs an error message and sets a flag to indicate that the record already exists. If the key is valid, it logs a message indicating that a new configuration has been saved to the file and sets a flag to indicate that the record does not exist.
4. Finally, it rewrites the configuration record if it already exists, logging a message indicating whether the update was successful or not.","This COBOL code is a main procedure that saves a configuration by calling a logger, opening and closing a configuration file, and writing a configuration set to the file. It also checks if the record exists and updates it if necessary.",1.0,1.0,na
173,brazilofmux_gnucobol,X-COBOL/X-COBOL/COBOL_Files/brazilofmux_gnucobol/linear_to_fielded_program_0.cbl,"       identification division.
       function-id. linear_to_gregorian.
       environment division.
       configuration section.
       repository.
           function isleapyear
           function floor-divmod
           function gregorian_to_linear
           function all intrinsic.
       data division.
       working-storage section.
       01  ltg-d0                pic s9(8) comp-5.
       01  divmod-400.
           05  ltg-n400          pic s9(8) comp-5.
           05  ltg-d1            pic s9(8) comp-5.
       01  divmod-100.
           05  ltg-n100          pic s9(8) comp-5.
           05  ltg-d2            pic s9(8) comp-5.
       01  divmod-4.
           05  ltg-n4            pic s9(8) comp-5.
           05  ltg-d3            pic s9(8) comp-5.
       01  divmod-1.
           05  ltg-n1            pic s9(8) comp-5.
           05  ltg-d4            pic s9(8) comp-5.
       01  ltg-jan01         pic s9(8) comp-5.
       01  ltg-mar01         pic s9(8) comp-5.
       01  ltg-correction    pic 9     comp-5.
       01  ltg-prior-days    pic s9(8) comp-5.
       01  ltg-temp          pic s9(8) comp-5.
       01  ltg-1st           pic s9(8) comp-5.
       01  ltg-cache-year    pic s9(5) comp-5  value -27257.
       01  ltg-cache-jan01   pic s9(8) comp-5.
       01  ltg-cache-mar01   pic s9(8) comp-5.
       01  c146097      pic s9(8) comp-5 value 146097.
       01  c36524       pic s9(8) comp-5 value 36524.
       01  c1461        pic s9(8) comp-5 value 1461.
       01  c365         pic s9(8) comp-5 value 365.
       01  c7           pic s9(8) comp-5 value 7.
       01  divmod.
           05  fdm-div pic s9(8) comp-5.
           05  fdm-mod pic s9(8) comp-5.
       linkage section.
       01  ltg-linear        pic s9(8) comp-5.
       01  ltg-fielded.
           05  ltg-year          pic s9(5) comp-5.
           05  ltg-month         pic 99    comp-5.
           05  ltg-day-of-month  pic 99    comp-5.
           05  ltg-day-of-year   pic 999   comp-5.
           05  ltg-day-of-week   pic 9     comp-5.
       procedure division using ltg-linear returning ltg-fielded.
       0100-main.
           subtract 1 from ltg-linear giving ltg-d0.
           move floor-divmod(ltg-d0, c146097) to divmod-400.
           move floor-divmod(ltg-d1, c36524) to divmod-100.
           move floor-divmod(ltg-d2, c1461) to divmod-4.
           move floor-divmod(ltg-d3, c365) to divmod-1.
           compute ltg-year = 400 * ltg-n400 + 100 * ltg-n100
                            + 4 * ltg-n4 + ltg-n1.
           if (ltg-n100 is not equal 4) and (ltg-n1 is not equal 4)
               add 1 to ltg-year
           end-if.
           move 1 to ltg-day-of-month.
           if ltg-year is equal to ltg-cache-year
               move ltg-cache-jan01 to ltg-jan01
               move ltg-cache-mar01 to ltg-mar01
           else
               move 1 to ltg-month
               move gregorian_to_linear(ltg-year, ltg-month, ltg-day-of-month) to ltg-jan01
               move 3 to ltg-month
               move gregorian_to_linear(ltg-year, ltg-month, ltg-day-of-month) to ltg-mar01
               move ltg-year  to ltg-cache-year
               move ltg-jan01 to ltg-cache-jan01
               move ltg-mar01 to ltg-cache-mar01
           end-if.
           if (ltg-linear  < ltg-mar01)
               move 0 to ltg-correction
           else
               if isleapyear(ltg-year) = 'Y'
                   move 1 to ltg-correction
               else
                   move 2 to ltg-correction
               end-if
           end-if.
           subtract ltg-jan01 from ltg-linear giving ltg-prior-days.
           add 1 to ltg-prior-days giving ltg-day-of-year.
           compute ltg-temp =
               (12 * (ltg-prior-days + ltg-correction) + 373) / 367.
           move ltg-temp to ltg-month.
           move gregorian_to_linear(ltg-year, ltg-month, ltg-day-of-month) to ltg-1st.
           compute ltg-day-of-month = ltg-linear - ltg-1st + 1.
           move floor-divmod(ltg-linear, c7) to divmod.
           move fdm-mod to ltg-day-of-week.
           goback.
       end function linear_to_gregorian.
","       working-storage section.
       01  ltg-d0                pic s9(8) comp-5.
       01  divmod-400.
           05  ltg-n400          pic s9(8) comp-5.
           05  ltg-d1            pic s9(8) comp-5.
       01  divmod-100.
           05  ltg-n100          pic s9(8) comp-5.
           05  ltg-d2            pic s9(8) comp-5.
       01  divmod-4.
           05  ltg-n4            pic s9(8) comp-5.
           05  ltg-d3            pic s9(8) comp-5.
       01  divmod-1.
           05  ltg-n1            pic s9(8) comp-5.
           05  ltg-d4            pic s9(8) comp-5.
       01  ltg-jan01         pic s9(8) comp-5.
       01  ltg-mar01         pic s9(8) comp-5.
       01  ltg-correction    pic 9     comp-5.
       01  ltg-prior-days    pic s9(8) comp-5.
       01  ltg-temp          pic s9(8) comp-5.
       01  ltg-1st           pic s9(8) comp-5.
       01  ltg-cache-year    pic s9(5) comp-5  value -27257.
       01  ltg-cache-jan01   pic s9(8) comp-5.
       01  ltg-cache-mar01   pic s9(8) comp-5.
       01  c146097      pic s9(8) comp-5 value 146097.
       01  c36524       pic s9(8) comp-5 value 36524.
       01  c1461        pic s9(8) comp-5 value 1461.
       01  c365         pic s9(8) comp-5 value 365.
       01  c7           pic s9(8) comp-5 value 7.
       01  divmod.
           05  fdm-div pic s9(8) comp-5.
           05  fdm-mod pic s9(8) comp-5.
       linkage section.
       01  ltg-linear        pic s9(8) comp-5.
       01  ltg-fielded.
           05  ltg-year          pic s9(5) comp-5.
           05  ltg-month         pic 99    comp-5.
           05  ltg-day-of-month  pic 99    comp-5.
           05  ltg-day-of-year   pic 999   comp-5.
           05  ltg-day-of-week   pic 9     comp-5.
",['0100-main'],,95,"The following date conversion routine takes a linear numbering of days from the Epoch of 1601 January 1st and calculates the corresponding date in the Gregorian Calendar. This is equivalent to a combination of gregorian-year-from-fixed(fixed), gregorian-from-fixed(fixed), and day-number() from the book.",,,,"### Response:
The COBOL file is used to manage customer data for a banking system. The main paragraph, 0100-main, initializes the program and performs the following tasks:

1. It declares and initializes the necessary data areas for customer information, including name, address, account number, balance, and other relevant details.
2. It prompts the user to enter a customer number and then searches for that customer's record in the file. If the customer is found, it displays the customer's information. If not, it displays an error message.
3. It allows the user to update the customer's information, such as their address or balance.
4. It provides options for additional transactions, such as depositing or withdrawing funds from the customer's account.
5. Finally, it terminates the program.

Overall, this program provides a basic framework for managing customer data in a banking system.","This COBOL code is used to convert a given date to the corresponding day of the week. The code uses various calculations and functions to determine the day of the week for a given date. The code first calculates the number of days since the beginning of the year, then adjusts for leap years and the number of days in each month. Finally, it uses a formula to determine the day of the week based on the number of days since the beginning of the year. The code also includes a cache to improve performance for subsequent calls with the same year.",0.5,0.5,na
178,brazilofmux_gnucobol,X-COBOL/X-COBOL/COBOL_Files/brazilofmux_gnucobol/holidays_program_1.cbl,"       identification division.
       function-id. yearend.
       environment division.
       configuration section.
       repository.
           function fielded_to_linear
           function all intrinsic.
       data division.
       working-storage section.
       01  month           pic 99      comp-5 value 12.
       01  dom             pic 99      comp-5 value 31.
       linkage section.
       01  ye-year              pic s9(5)   comp-5.
       01  results.
           05  ye-lineardate        pic s9(8)   comp-5.
           05  ye-success           pic x.
       procedure division using ye-year returning results.
       0100-main.
           move 'N' to ye-success
           if (-27256 <= ye-year) and (ye-year <= 30826)
               move fielded_to_linear(ye-year, month, dom) to ye-lineardate
               move 'Y' to ye-success
           end-if.
           goback.
       end function yearend.
","       working-storage section.
       01  month           pic 99      comp-5 value 12.
       01  dom             pic 99      comp-5 value 31.
       linkage section.
       01  ye-year              pic s9(5)   comp-5.
       01  results.
           05  ye-lineardate        pic s9(8)   comp-5.
           05  ye-success           pic x.
",['0100-main'],,26,Returns the linear date for the last day of the given year.,,,,"The COBOL file is used to calculate the linear date based on the input year, month, and day. The file checks whether the input year is within a certain range and sets the success flag accordingly. If the year is within the specified range, the code sets the success flag to ""Y"" and returns the calculated linear date. Otherwise, it sets the success flag to ""N"".","This COBOL code is used to calculate the linear date from the given year, month, and day. It first checks if the given year is within the valid range. If it is, it calls the fielded_to_linear function to calculate the linear date and sets the success flag to 'Y'. If the year is outside the valid range, it sets the success flag to 'N'.",0.75,1.0,na
179,brazilofmux_gnucobol,X-COBOL/X-COBOL/COBOL_Files/brazilofmux_gnucobol/holidays_program_2.cbl,"       identification division.
       function-id. dayofweek.
       environment division.
       configuration section.
       repository.
           function floor-divmod
           function all intrinsic.
       data division.
       working-storage section.
       01  ld2                    signed-int.
       01  c7           pic s9(8) comp-5 value 7.
       01  divmod.
           05  d            pic s9(8) comp-5.
           05  m            pic s9(8) comp-5.
       linkage section.
       01  ld                 usage   signed-int.
       01  results.
           05  dow            unsigned-short.
           05  dow-success    pic x.
       procedure division using ld returning results.
       0100-main.
           add 1 to ld giving ld2.
           move floor-divmod(ld2, c7) to divmod.
           move m to dow.
           move 'Y' to dow-success
           goback.
       end function dayofweek.
","       working-storage section.
       01  ld2                    signed-int.
       01  c7           pic s9(8) comp-5 value 7.
       01  divmod.
           05  d            pic s9(8) comp-5.
           05  m            pic s9(8) comp-5.
       linkage section.
       01  ld                 usage   signed-int.
       01  results.
           05  dow            unsigned-short.
           05  dow-success    pic x.
",['0100-main'],,28,Returns the day of week for the given fixed date.,,,,"The COBOL file performs some arithmetic operations on the variable ""ld"". It adds 1 to ""ld"" and stores the result in ""ld2"". Then it calls a function called ""floor-divmod"" with arguments ""ld2"" and ""c7"", and stores the result in a structure called ""divmod"". The values of ""d"" and ""m"" in ""divmod"" are then moved to variables called ""dow"" and ""dow-success"" respectively. Finally, the program ends by executing the ""goback"" statement.","The COBOL code is performing a series of calculations and assignments. The first line, ""add 1 to ld giving ld2,"" adds 1 to the value of ld and stores the result in ld2. The second line, ""move floor-divmod(ld2, c7) to divmod,"" calls a function called floor-divmod, passing ld2 and the value 7 as arguments, and stores the result in a variable called divmod. This function is likely performing integer division and returning both the quotient and the remainder. The third line, ""move m to dow,"" moves the value of m (presumably the remainder from the previous operation) to a variable called dow. The fourth line, ""move 'Y' to dow-success,"" moves the character 'Y' to a variable called dow-success. Finally, the last line, ""goback,"" is a COBOL statement that returns control to the calling program.",0.0,1.0,na
